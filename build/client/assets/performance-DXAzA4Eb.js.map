{"version":3,"file":"performance-DXAzA4Eb.js","sources":["../../../node_modules/@sentry/utils/build/esm/aggregate-errors.js","../../../node_modules/@sentry/utils/build/esm/dsn.js","../../../node_modules/@sentry/utils/build/esm/error.js","../../../node_modules/@sentry/utils/build/esm/instrument/handlers.js","../../../node_modules/@sentry/utils/build/esm/instrument/console.js","../../../node_modules/@sentry/utils/build/esm/supports.js","../../../node_modules/@sentry/utils/build/esm/instrument/fetch.js","../../../node_modules/@sentry/utils/build/esm/instrument/globalError.js","../../../node_modules/@sentry/utils/build/esm/instrument/globalUnhandledRejection.js","../../../node_modules/@sentry/utils/build/esm/promisebuffer.js","../../../node_modules/@sentry/utils/build/esm/url.js","../../../node_modules/@sentry/utils/build/esm/severity.js","../../../node_modules/@sentry/utils/build/esm/envelope.js","../../../node_modules/@sentry/utils/build/esm/clientreport.js","../../../node_modules/@sentry/utils/build/esm/ratelimit.js","../../../node_modules/@sentry/utils/build/esm/buildPolyfills/_optionalChain.js","../../../node_modules/@sentry/utils/build/esm/vendor/supportsHistory.js","../../../node_modules/@sentry/core/build/esm/tracing/errors.js","../../../node_modules/@sentry/core/build/esm/tracing/utils.js","../../../node_modules/@sentry/core/build/esm/utils/hasTracingEnabled.js","../../../node_modules/@sentry/core/build/esm/tracing/sentryNonRecordingSpan.js","../../../node_modules/@sentry/core/build/esm/tracing/logSpans.js","../../../node_modules/@sentry/core/build/esm/utils/parseSampleRate.js","../../../node_modules/@sentry/core/build/esm/tracing/sampling.js","../../../node_modules/@sentry/core/build/esm/envelope.js","../../../node_modules/@sentry/core/build/esm/tracing/measurement.js","../../../node_modules/@sentry/core/build/esm/tracing/sentrySpan.js","../../../node_modules/@sentry/core/build/esm/tracing/trace.js","../../../node_modules/@sentry/core/build/esm/tracing/idleSpan.js","../../../node_modules/@sentry/core/build/esm/api.js","../../../node_modules/@sentry/core/build/esm/integration.js","../../../node_modules/@sentry/core/build/esm/baseclient.js","../../../node_modules/@sentry/core/build/esm/sdk.js","../../../node_modules/@sentry/core/build/esm/transports/base.js","../../../node_modules/@sentry/core/build/esm/utils/sdkMetadata.js","../../../node_modules/@sentry/core/build/esm/breadcrumbs.js","../../../node_modules/@sentry/core/build/esm/integrations/functiontostring.js","../../../node_modules/@sentry/core/build/esm/integrations/inboundfilters.js","../../../node_modules/@sentry/core/build/esm/integrations/dedupe.js","../../../node_modules/@sentry/core/build/esm/fetch.js","../../../node_modules/@sentry/browser/build/npm/esm/helpers.js","../../../node_modules/@sentry/browser/build/npm/esm/debug-build.js","../../../node_modules/@sentry/browser/build/npm/esm/eventbuilder.js","../../../node_modules/@sentry/browser/build/npm/esm/userfeedback.js","../../../node_modules/@sentry/browser/build/npm/esm/client.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/debug-build.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/bindReporter.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/types.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/generateUniqueID.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/getNavigationEntry.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/getActivationStart.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/initMetric.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/observe.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/onHidden.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/runOnce.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/getVisibilityWatcher.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/whenActivated.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/onFCP.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/getCLS.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/getFID.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/polyfills/interactionCountPolyfill.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/getINP.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/getLCP.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/onTTFB.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/instrument.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/utils.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/browserMetrics.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/instrument/dom.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/instrument/xhr.js","../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/inp.js","../../../node_modules/@sentry/browser/build/npm/esm/transports/fetch.js","../../../node_modules/@sentry/browser/build/npm/esm/stack-parsers.js","../../../node_modules/@sentry/browser/build/npm/esm/integrations/breadcrumbs.js","../../../node_modules/@sentry/browser/build/npm/esm/integrations/browserapierrors.js","../../../node_modules/@sentry/browser/build/npm/esm/integrations/globalhandlers.js","../../../node_modules/@sentry/browser/build/npm/esm/integrations/httpcontext.js","../../../node_modules/@sentry/browser/build/npm/esm/integrations/linkederrors.js","../../../node_modules/@sentry/browser/build/npm/esm/sdk.js","../../../node_modules/@sentry/browser/build/npm/esm/tracing/request.js","../../../node_modules/@sentry/browser/build/npm/esm/tracing/backgroundtab.js","../../../node_modules/@sentry/browser/build/npm/esm/tracing/browserTracingIntegration.js","../../../node_modules/@sentry/react/build/esm/error.js","../../../node_modules/@sentry/react/build/esm/debug-build.js","../../../node_modules/@sentry/react/build/esm/errorboundary.js","../../../node_modules/@sentry/remix/build/esm/utils/debug-build.js","../../../node_modules/@sentry/remix/build/esm/utils/futureFlags.js","../../../node_modules/@sentry/remix/build/esm/client/performance.js"],"sourcesContent":["import { isInstanceOf } from './is.js';\nimport { truncate } from './string.js';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nfunction applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation,\n  parser,\n  maxValueLimit = 250,\n  key,\n  limit,\n  event,\n  hint,\n) {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = truncateAggregateExceptions(\n      aggregateExceptionsFromError(\n        exceptionFromErrorImplementation,\n        parser,\n        limit,\n        hint.originalException ,\n        key,\n        event.exception.values,\n        originalException,\n        0,\n      ),\n      maxValueLimit,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation,\n  parser,\n  limit,\n  error,\n  key,\n  prevExceptions,\n  exception,\n  exceptionId,\n) {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception,\n  source,\n  exceptionId,\n  parentId,\n) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n\n/**\n * Truncate the message (exception.value) of all exceptions in the event.\n * Because this event processor is ran after `applyClientOptions`,\n * we need to truncate the message of the added exceptions here.\n */\nfunction truncateAggregateExceptions(exceptions, maxValueLength) {\n  return exceptions.map(exception => {\n    if (exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    return exception;\n  });\n}\n\nexport { applyAggregateErrorsToEvent };\n//# sourceMappingURL=aggregate-errors.js.map\n","import { DEBUG_BUILD } from './debug-build.js';\nimport { consoleSandbox, logger } from './logger.js';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn, withPassword = false) {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() ;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol , publicKey });\n}\n\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn) {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n\nexport { dsnFromString, dsnToString, makeDsn };\n//# sourceMappingURL=dsn.js.map\n","/** An error emitted by Sentry SDKs and related utilities. */\nclass SentryError extends Error {\n  /** Display name of this error instance. */\n\n   constructor( message, logLevel = 'warn') {\n    super(message);this.message = message;\n    this.name = new.target.prototype.constructor.name;\n    // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line\n    // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes\n    // instances of `SentryError` fail `obj instanceof SentryError` checks.\n    Object.setPrototypeOf(this, new.target.prototype);\n    this.logLevel = logLevel;\n  }\n}\n\nexport { SentryError };\n//# sourceMappingURL=error.js.map\n","import { DEBUG_BUILD } from '../debug-build.js';\nimport { logger } from '../logger.js';\nimport { getFunctionName } from '../stacktrace.js';\n\n// We keep the handlers globally\nconst handlers = {};\nconst instrumented = {};\n\n/** Add a handler function. */\nfunction addHandler(type, handler) {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] ).push(handler);\n}\n\n/**\n * Reset all instrumentation handlers.\n * This can be used by tests to ensure we have a clean slate of instrumentation handlers.\n */\nfunction resetInstrumentationHandlers() {\n  Object.keys(handlers).forEach(key => {\n    handlers[key ] = undefined;\n  });\n}\n\n/** Maybe run an instrumentation function, unless it was already called. */\nfunction maybeInstrument(type, instrumentFn) {\n  if (!instrumented[type]) {\n    instrumentFn();\n    instrumented[type] = true;\n  }\n}\n\n/** Trigger handlers for a given instrumentation type. */\nfunction triggerHandlers(type, data) {\n  const typeHandlers = type && handlers[type];\n  if (!typeHandlers) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\nexport { addHandler, maybeInstrument, resetInstrumentationHandlers, triggerHandlers };\n//# sourceMappingURL=handlers.js.map\n","import { CONSOLE_LEVELS, originalConsoleMethods } from '../logger.js';\nimport { fill } from '../object.js';\nimport { GLOBAL_OBJ } from '../worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers.js';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addConsoleInstrumentationHandler(handler) {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole() {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level) {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod) {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args) {\n        const handlerData = { args, level };\n        triggerHandlers('console', handlerData);\n\n        const log = originalConsoleMethods[level];\n        log && log.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n\nexport { addConsoleInstrumentationHandler };\n//# sourceMappingURL=console.js.map\n","import { DEBUG_BUILD } from './debug-build.js';\nimport { logger } from './logger.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\nconst WINDOW = GLOBAL_OBJ ;\n\n/**\n * Tells whether current environment supports ErrorEvent objects\n * {@link supportsErrorEvent}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsErrorEvent() {\n  try {\n    new ErrorEvent('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMError objects\n * {@link supportsDOMError}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMError() {\n  try {\n    // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':\n    // 1 argument required, but only 0 present.\n    // @ts-expect-error It really needs 1 argument, not 0.\n    new DOMError('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports DOMException objects\n * {@link supportsDOMException}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsDOMException() {\n  try {\n    new DOMException('');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Tells whether current environment supports Fetch API\n * {@link supportsFetch}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsFetch() {\n  if (!('fetch' in WINDOW)) {\n    return false;\n  }\n\n  try {\n    new Headers();\n    new Request('http://www.example.com');\n    new Response();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * isNative checks if the given function is a native implementation\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNativeFunction(func) {\n  return func && /^function\\s+\\w+\\(\\)\\s+\\{\\s+\\[native code\\]\\s+\\}$/.test(func.toString());\n}\n\n/**\n * Tells whether current environment supports Fetch API natively\n * {@link supportsNativeFetch}.\n *\n * @returns true if `window.fetch` is natively implemented, false otherwise\n */\nfunction supportsNativeFetch() {\n  if (typeof EdgeRuntime === 'string') {\n    return true;\n  }\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  // Fast path to avoid DOM I/O\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  if (isNativeFunction(WINDOW.fetch)) {\n    return true;\n  }\n\n  // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)\n  // so create a \"pure\" iframe to see if that has native fetch\n  let result = false;\n  const doc = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (doc && typeof (doc.createElement ) === 'function') {\n    try {\n      const sandbox = doc.createElement('iframe');\n      sandbox.hidden = true;\n      doc.head.appendChild(sandbox);\n      if (sandbox.contentWindow && sandbox.contentWindow.fetch) {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        result = isNativeFunction(sandbox.contentWindow.fetch);\n      }\n      doc.head.removeChild(sandbox);\n    } catch (err) {\n      DEBUG_BUILD &&\n        logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Tells whether current environment supports ReportingObserver API\n * {@link supportsReportingObserver}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReportingObserver() {\n  return 'ReportingObserver' in WINDOW;\n}\n\n/**\n * Tells whether current environment supports Referrer Policy API\n * {@link supportsReferrerPolicy}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsReferrerPolicy() {\n  // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'\n  // (see https://caniuse.com/#feat=referrer-policy),\n  // it doesn't. And it throws an exception instead of ignoring this parameter...\n  // REF: https://github.com/getsentry/raven-js/issues/1233\n\n  if (!supportsFetch()) {\n    return false;\n  }\n\n  try {\n    new Request('_', {\n      referrerPolicy: 'origin' ,\n    });\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport { isNativeFunction, supportsDOMError, supportsDOMException, supportsErrorEvent, supportsFetch, supportsNativeFetch, supportsReferrerPolicy, supportsReportingObserver };\n//# sourceMappingURL=supports.js.map\n","import { isError } from '../is.js';\nimport { fill, addNonEnumerableProperty } from '../object.js';\nimport { supportsNativeFetch } from '../supports.js';\nimport { timestampInSeconds } from '../time.js';\nimport { GLOBAL_OBJ } from '../worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers.js';\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addFetchInstrumentationHandler(handler) {\n  const type = 'fetch';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentFetch);\n}\n\nfunction instrumentFetch() {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(GLOBAL_OBJ, 'fetch', function (originalFetch) {\n    return function (...args) {\n      const { method, url } = parseFetchArgs(args);\n\n      const handlerData = {\n        args,\n        fetchData: {\n          method,\n          url,\n        },\n        startTimestamp: timestampInSeconds() * 1000,\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // We capture the stack right here and not in the Promise error callback because Safari (and probably other\n      // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.\n\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n      //       it means the error, that was caused by your fetch call did not\n      //       have a stack trace, so the SDK backfilled the stack trace so\n      //       you can see which fetch call failed.\n      const virtualStackTrace = new Error().stack;\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(GLOBAL_OBJ, args).then(\n        (response) => {\n          const finishedHandlerData = {\n            ...handlerData,\n            endTimestamp: timestampInSeconds() * 1000,\n            response,\n          };\n\n          triggerHandlers('fetch', finishedHandlerData);\n          return response;\n        },\n        (error) => {\n          const erroredHandlerData = {\n            ...handlerData,\n            endTimestamp: timestampInSeconds() * 1000,\n            error,\n          };\n\n          triggerHandlers('fetch', erroredHandlerData);\n\n          if (isError(error) && error.stack === undefined) {\n            // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n            //       it means the error, that was caused by your fetch call did not\n            //       have a stack trace, so the SDK backfilled the stack trace so\n            //       you can see which fetch call failed.\n            error.stack = virtualStackTrace;\n            addNonEnumerableProperty(error, 'framesToPop', 1);\n          }\n\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\nfunction hasProp(obj, prop) {\n  return !!obj && typeof obj === 'object' && !!(obj )[prop];\n}\n\nfunction getUrlFromResource(resource) {\n  if (typeof resource === 'string') {\n    return resource;\n  }\n\n  if (!resource) {\n    return '';\n  }\n\n  if (hasProp(resource, 'url')) {\n    return resource.url;\n  }\n\n  if (resource.toString) {\n    return resource.toString();\n  }\n\n  return '';\n}\n\n/**\n * Parses the fetch arguments to find the used Http method and the url of the request.\n * Exported for tests only.\n */\nfunction parseFetchArgs(fetchArgs) {\n  if (fetchArgs.length === 0) {\n    return { method: 'GET', url: '' };\n  }\n\n  if (fetchArgs.length === 2) {\n    const [url, options] = fetchArgs ;\n\n    return {\n      url: getUrlFromResource(url),\n      method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET',\n    };\n  }\n\n  const arg = fetchArgs[0];\n  return {\n    url: getUrlFromResource(arg ),\n    method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET',\n  };\n}\n\nexport { addFetchInstrumentationHandler, parseFetchArgs };\n//# sourceMappingURL=fetch.js.map\n","import { GLOBAL_OBJ } from '../worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers.js';\n\nlet _oldOnErrorHandler = null;\n\n/**\n * Add an instrumentation handler for when an error is captured by the global error handler.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalErrorInstrumentationHandler(handler) {\n  const type = 'error';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentError);\n}\n\nfunction instrumentError() {\n  _oldOnErrorHandler = GLOBAL_OBJ.onerror;\n\n  GLOBAL_OBJ.onerror = function (\n    msg,\n    url,\n    line,\n    column,\n    error,\n  ) {\n    const handlerData = {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    };\n    triggerHandlers('error', handlerData);\n\n    if (_oldOnErrorHandler && !_oldOnErrorHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n\n  GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;\n}\n\nexport { addGlobalErrorInstrumentationHandler };\n//# sourceMappingURL=globalError.js.map\n","import { GLOBAL_OBJ } from '../worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers.js';\n\nlet _oldOnUnhandledRejectionHandler = null;\n\n/**\n * Add an instrumentation handler for when an unhandled promise rejection is captured.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addGlobalUnhandledRejectionInstrumentationHandler(\n  handler,\n) {\n  const type = 'unhandledrejection';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentUnhandledRejection);\n}\n\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = GLOBAL_OBJ.onunhandledrejection;\n\n  GLOBAL_OBJ.onunhandledrejection = function (e) {\n    const handlerData = e;\n    triggerHandlers('unhandledrejection', handlerData);\n\n    if (_oldOnUnhandledRejectionHandler && !_oldOnUnhandledRejectionHandler.__SENTRY_LOADER__) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n\n  GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;\n}\n\nexport { addGlobalUnhandledRejectionInstrumentationHandler };\n//# sourceMappingURL=globalUnhandledRejection.js.map\n","import { SentryError } from './error.js';\nimport { rejectedSyncPromise, SyncPromise, resolvedSyncPromise } from './syncpromise.js';\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nfunction makePromiseBuffer(limit) {\n  const buffer = [];\n\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer) {\n    if (!isReady()) {\n      return rejectedSyncPromise(new SentryError('Not adding Promise because buffer limit was reached.'));\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout) {\n    return new SyncPromise((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n\nexport { makePromiseBuffer };\n//# sourceMappingURL=promisebuffer.js.map\n","/**\n * Parses string form of URL into an object\n * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n * // intentionally using regex and not <a/> href parsing trick because React Native and other\n * // environments where DOM might not be available\n * @returns parsed URL object\n */\nfunction parseUrl(url) {\n  if (!url) {\n    return {};\n  }\n\n  const match = url.match(/^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\n  if (!match) {\n    return {};\n  }\n\n  // coerce to undefined values to empty string so we don't get 'undefined'\n  const query = match[6] || '';\n  const fragment = match[8] || '';\n  return {\n    host: match[4],\n    path: match[5],\n    protocol: match[2],\n    search: query,\n    hash: fragment,\n    relative: match[5] + query + fragment, // everything minus origin\n  };\n}\n\n/**\n * Strip the query string and fragment off of a given URL or path (if present)\n *\n * @param urlPath Full URL or path, including possible query string and/or fragment\n * @returns URL or path without query string or fragment\n */\nfunction stripUrlQueryAndFragment(urlPath) {\n  return (urlPath.split(/[?#]/, 1) )[0];\n}\n\n/**\n * Returns number of URL segments of a passed string URL.\n */\nfunction getNumberOfUrlSegments(url) {\n  // split at '/' or at '\\/' to split regex urls correctly\n  return url.split(/\\\\?\\//).filter(s => s.length > 0 && s !== ',').length;\n}\n\n/**\n * Takes a URL object and returns a sanitized string which is safe to use as span name\n * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data\n */\nfunction getSanitizedUrlString(url) {\n  const { protocol, host, path } = url;\n\n  const filteredHost =\n    (host &&\n      host\n        // Always filter out authority\n        .replace(/^.*@/, '[filtered]:[filtered]@')\n        // Don't show standard :80 (http) and :443 (https) ports to reduce the noise\n        // TODO: Use new URL global if it exists\n        .replace(/(:80)$/, '')\n        .replace(/(:443)$/, '')) ||\n    '';\n\n  return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;\n}\n\nexport { getNumberOfUrlSegments, getSanitizedUrlString, parseUrl, stripUrlQueryAndFragment };\n//# sourceMappingURL=url.js.map\n","// Note: Ideally the `SeverityLevel` type would be derived from `validSeverityLevels`, but that would mean either\n//\n// a) moving `validSeverityLevels` to `@sentry/types`,\n// b) moving the`SeverityLevel` type here, or\n// c) importing `validSeverityLevels` from here into `@sentry/types`.\n//\n// Option A would make `@sentry/types` a runtime dependency of `@sentry/utils` (not good), and options B and C would\n// create a circular dependency between `@sentry/types` and `@sentry/utils` (also not good). So a TODO accompanying the\n// type, reminding anyone who changes it to change this list also, will have to do.\n\nconst validSeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'];\n\n/**\n * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.\n *\n * @param level String representation of desired `SeverityLevel`.\n * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.\n */\nfunction severityLevelFromString(level) {\n  return (level === 'warn' ? 'warning' : validSeverityLevels.includes(level) ? level : 'log') ;\n}\n\nexport { severityLevelFromString, validSeverityLevels };\n//# sourceMappingURL=severity.js.map\n","import { dsnToString } from './dsn.js';\nimport { normalize } from './normalize.js';\nimport { dropUndefinedKeys } from './object.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers, items = []) {\n  return [headers, items] ;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] ;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(\n  envelope,\n  callback,\n) {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input) {\n  return GLOBAL_OBJ.__SENTRY__ && GLOBAL_OBJ.__SENTRY__.encodePolyfill\n    ? GLOBAL_OBJ.__SENTRY__.encodePolyfill(input)\n    : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input) {\n  return GLOBAL_OBJ.__SENTRY__ && GLOBAL_OBJ.__SENTRY__.decodePolyfill\n    ? GLOBAL_OBJ.__SENTRY__.decodePolyfill(input)\n    : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope) {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts = JSON.stringify(envHeaders);\n\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.strinify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers) {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env) {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n\n  function readBinary(length) {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson() {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(decodeUTF8(readBinary(i))) ;\n  }\n\n  const envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nfunction createSpanEnvelopeItem(spanJson) {\n  const spanHeaders = {\n    type: 'span',\n  };\n\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment) {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n\n  return [\n    dropUndefinedKeys({\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    }),\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  statsd: 'metric_bucket',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent || !metadataOrEvent.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(\n  event,\n  sdkInfo,\n  tunnel,\n  dsn,\n) {\n  const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;\n  return {\n    event_id: event.event_id ,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dropUndefinedKeys({ ...dynamicSamplingContext }),\n    }),\n  };\n}\n\nexport { addItemToEnvelope, createAttachmentEnvelopeItem, createEnvelope, createEventEnvelopeHeaders, createSpanEnvelopeItem, envelopeContainsItemType, envelopeItemTypeToDataCategory, forEachEnvelopeItem, getSdkMetadataForEnvelopeHeader, parseEnvelope, serializeEnvelope };\n//# sourceMappingURL=envelope.js.map\n","import { createEnvelope } from './envelope.js';\nimport { dateTimestampInSeconds } from './time.js';\n\n/**\n * Creates client report envelope\n * @param discarded_events An array of discard events\n * @param dsn A DSN that can be set on the header. Optional.\n */\nfunction createClientReportEnvelope(\n  discarded_events,\n  dsn,\n  timestamp,\n) {\n  const clientReportItem = [\n    { type: 'client_report' },\n    {\n      timestamp: timestamp || dateTimestampInSeconds(),\n      discarded_events,\n    },\n  ];\n  return createEnvelope(dsn ? { dsn } : {}, [clientReportItem]);\n}\n\nexport { createClientReportEnvelope };\n//# sourceMappingURL=clientreport.js.map\n","// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header, now = Date.now()) {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, dataCategory) {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, dataCategory, now = Date.now()) {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(\n  limits,\n  { statusCode, headers },\n  now = Date.now(),\n) {\n  const updatedRateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5) ;\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n\nexport { DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits };\n//# sourceMappingURL=ratelimit.js.map\n","/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The value of the expression\n */\nfunction _optionalChain(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n  while (i < ops.length) {\n    const op = ops[i] ;\n    const fn = ops[i + 1] ;\n    i += 2;\n    // by checking for loose equality to `null`, we catch both `null` and `undefined`\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it\n      return;\n    }\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn((...args) => (value ).call(lastAccessLHS, ...args));\n      lastAccessLHS = undefined;\n    }\n  }\n  return value;\n}\n\n// Sucrase version\n// function _optionalChain(ops) {\n//   let lastAccessLHS = undefined;\n//   let value = ops[0];\n//   let i = 1;\n//   while (i < ops.length) {\n//     const op = ops[i];\n//     const fn = ops[i + 1];\n//     i += 2;\n//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n//       return undefined;\n//     }\n//     if (op === 'access' || op === 'optionalAccess') {\n//       lastAccessLHS = value;\n//       value = fn(value);\n//     } else if (op === 'call' || op === 'optionalCall') {\n//       value = fn((...args) => value.call(lastAccessLHS, ...args));\n//       lastAccessLHS = undefined;\n//     }\n//   }\n//   return value;\n// }\n\nexport { _optionalChain };\n//# sourceMappingURL=_optionalChain.js.map\n","import { GLOBAL_OBJ } from '../worldwide.js';\n\n// Based on https://github.com/angular/angular.js/pull/13945/files\n// The MIT License\n\n\nconst WINDOW = GLOBAL_OBJ ;\n\n/**\n * Tells whether current environment supports History API\n * {@link supportsHistory}.\n *\n * @returns Answer to the given question.\n */\nfunction supportsHistory() {\n  // NOTE: in Chrome App environment, touching history.pushState, *even inside\n  //       a try/catch block*, will cause Chrome to output an error to console.error\n  // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const chromeVar = (WINDOW ).chrome;\n  const isChromePackagedApp = chromeVar && chromeVar.app && chromeVar.app.runtime;\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n  const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;\n\n  return !isChromePackagedApp && hasHistoryApi;\n}\n\nexport { supportsHistory };\n//# sourceMappingURL=supportsHistory.js.map\n","import { addGlobalErrorInstrumentationHandler, addGlobalUnhandledRejectionInstrumentationHandler, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils.js';\nimport { SPAN_STATUS_ERROR } from './spanstatus.js';\n\nlet errorsInstrumented = false;\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nfunction registerSpanErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active root span as failed\n */\nfunction errorCallback() {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n  if (rootSpan) {\n    const message = 'internal_error';\n    DEBUG_BUILD && logger.log(`[Tracing] Root span: ${message} -> Global error occured`);\n    rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message });\n  }\n}\n\n// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n// node.js default exit behaviour\nerrorCallback.tag = 'sentry_tracingErrorCallback';\n\nexport { registerSpanErrorInstrumentation };\n//# sourceMappingURL=errors.js.map\n","import { addNonEnumerableProperty } from '@sentry/utils';\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: (span )[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span )[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n\nexport { getCapturedScopesOnSpan, setCapturedScopesOnSpan };\n//# sourceMappingURL=utils.js.map\n","import { getClient } from '../currentScopes.js';\n\n// Treeshakable guard to remove all code related to tracing\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nfunction hasTracingEnabled(\n  maybeOptions,\n) {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const options = maybeOptions || getClientOptions();\n  // eslint-disable-next-line deprecation/deprecation\n  return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);\n}\n\nfunction getClientOptions() {\n  const client = getClient();\n  return client && client.getOptions();\n}\n\nexport { hasTracingEnabled };\n//# sourceMappingURL=hasTracingEnabled.js.map\n","import { uuid4 } from '@sentry/utils';\nimport { TRACE_FLAG_NONE } from '../utils/spanUtils.js';\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nclass SentryNonRecordingSpan  {\n\n   constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || uuid4();\n    this._spanId = spanContext.spanId || uuid4().substring(16);\n  }\n\n  /** @inheritdoc */\n   spanContext() {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n   end(_timestamp) {}\n\n  /** @inheritdoc */\n   setAttribute(_key, _value) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   setAttributes(_values) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   setStatus(_status) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   updateName(_name) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   isRecording() {\n    return false;\n  }\n\n  /** @inheritdoc */\n   addEvent(\n    _name,\n    _attributesOrStartTime,\n    _startTime,\n  ) {\n    return this;\n  }\n}\n\nexport { SentryNonRecordingSpan };\n//# sourceMappingURL=sentryNonRecordingSpan.js.map\n","import { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { spanToJSON, spanIsSampled, getRootSpan } from '../utils/spanUtils.js';\n\n/**\n * Print a log message for a started span.\n */\nfunction logSpanStart(span) {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nfunction logSpanEnd(span) {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  logger.log(msg);\n}\n\nexport { logSpanEnd, logSpanStart };\n//# sourceMappingURL=logSpans.js.map\n","import { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\n\n/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nfunction parseSampleRate(sampleRate) {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          sampleRate,\n        )} of type ${JSON.stringify(typeof sampleRate)}.`,\n      );\n    return undefined;\n  }\n\n  return rate;\n}\n\nexport { parseSampleRate };\n//# sourceMappingURL=parseSampleRate.js.map\n","import { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled.js';\nimport { parseSampleRate } from '../utils/parseSampleRate.js';\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nfunction sampleSpan(\n  options,\n  samplingContext,\n) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    return [false];\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n  } else {\n    // When `enableTracing === true`, we use a sample rate of 100%\n    sampleRate = 1;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate(sampleRate);\n\n  if (parsedSampleRate === undefined) {\n    DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    return [false, parsedSampleRate];\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  const shouldSample = Math.random() < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return [false, parsedSampleRate];\n  }\n\n  return [true, parsedSampleRate];\n}\n\nexport { sampleSpan };\n//# sourceMappingURL=sampling.js.map\n","import { getSdkMetadataForEnvelopeHeader, dsnToString, createEnvelope, createEventEnvelopeHeaders, createSpanEnvelopeItem } from '@sentry/utils';\nimport { getDynamicSamplingContextFromSpan } from './tracing/dynamicSamplingContext.js';\nimport { spanToJSON } from './utils/spanUtils.js';\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nfunction createSessionEnvelope(\n  session,\n  dsn,\n  metadata,\n  tunnel,\n) {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return createEnvelope(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nfunction createEventEnvelope(\n  event,\n  dsn,\n  metadata,\n  tunnel,\n) {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjut a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  enhanceEventWithSdkInfo(event, metadata && metadata.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem = [{ type: eventType }, event];\n  return createEnvelope(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nfunction createSpanEnvelope(spans, client) {\n  function dscHasRequiredProps(dsc) {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = getDynamicSamplingContextFromSpan(spans[0]);\n\n  const dsn = client && client.getDsn();\n  const tunnel = client && client.getOptions().tunnel;\n\n  const headers = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && { trace: dsc }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const beforeSendSpan = client && client.getOptions().beforeSendSpan;\n  const convertToSpanJSON = beforeSendSpan\n    ? (span) => beforeSendSpan(spanToJSON(span) )\n    : (span) => spanToJSON(span);\n\n  const items = [];\n  for (const span of spans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(createSpanEnvelopeItem(spanJson));\n    }\n  }\n\n  return createEnvelope(headers, items);\n}\n\nexport { createEventEnvelope, createSessionEnvelope, createSpanEnvelope };\n//# sourceMappingURL=envelope.js.map\n","import { SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT } from '../semanticAttributes.js';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils.js';\n\n/**\n * Adds a measurement to the current active transaction.\n */\nfunction setMeasurement(name, value, unit) {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n  if (rootSpan) {\n    rootSpan.addEvent(name, {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit ,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nfunction timedEventsToMeasurements(events) {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] ;\n    const value = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] ;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n\nexport { setMeasurement, timedEventsToMeasurements };\n//# sourceMappingURL=measurement.js.map\n","import { uuid4, timestampInSeconds, dropUndefinedKeys, logger } from '@sentry/utils';\nimport { getClient, getCurrentScope } from '../currentScopes.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { createSpanEnvelope } from '../envelope.js';\nimport { getMetricSummaryJsonForSpan } from '../metrics/metric-summary.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_PROFILE_ID, SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes.js';\nimport { TRACE_FLAG_SAMPLED, TRACE_FLAG_NONE, spanTimeInputToSeconds, getStatusMessage, getRootSpan, spanToJSON, getSpanDescendants, spanToTransactionTraceContext } from '../utils/spanUtils.js';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext.js';\nimport { logSpanEnd } from './logSpans.js';\nimport { timedEventsToMeasurements } from './measurement.js';\nimport { getCapturedScopesOnSpan } from './utils.js';\n\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nclass SentrySpan  {\n\n  /** Epoch timestamp in seconds when the span started. */\n\n  /** Epoch timestamp in seconds when the span ended. */\n\n  /** Internal keeper of the status */\n\n  /** The timed events added to this span. */\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n   constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || uuid4();\n    this._spanId = spanContext.spanId || uuid4().substring(16);\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n\n    this._attributes = {};\n    this.setAttributes({\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    this._name = spanContext.name;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n\n    this._events = [];\n\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /** @inheritdoc */\n   spanContext() {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n   setAttribute(key, value) {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n  }\n\n  /** @inheritdoc */\n   setAttributes(attributes) {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n   updateStartTime(timeInput) {\n    this._startTime = spanTimeInputToSeconds(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setStatus(value) {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   updateName(name) {\n    this._name = name;\n    return this;\n  }\n\n  /** @inheritdoc */\n   end(endTimestamp) {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n    logSpanEnd(this);\n\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n   getSpanJSON() {\n    return dropUndefinedKeys({\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: getStatusMessage(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ,\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      profile_id: this._attributes[SEMANTIC_ATTRIBUTE_PROFILE_ID] ,\n      exclusive_time: this._attributes[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] ,\n      measurements: timedEventsToMeasurements(this._events),\n      is_segment: (this._isStandaloneSpan && getRootSpan(this) === this) || undefined,\n      segment_id: this._isStandaloneSpan ? getRootSpan(this).spanContext().spanId : undefined,\n    });\n  }\n\n  /** @inheritdoc */\n   isRecording() {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n   addEvent(\n    name,\n    attributesOrStartTime,\n    startTime,\n  ) {\n    DEBUG_BUILD && logger.log('[Tracing] Adding an event to span:', name);\n\n    const time = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || timestampInSeconds();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n\n    const event = {\n      name,\n      time: spanTimeInputToSeconds(time),\n      attributes,\n    };\n\n    this._events.push(event);\n\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n   isStandaloneSpan() {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n   _onSpanEnded() {\n    const client = getClient();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === getRootSpan(this);\n\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope(createSpanEnvelope([this], client));\n      } else {\n        DEBUG_BUILD &&\n          logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = getCapturedScopesOnSpan(this).scope || getCurrentScope();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n   _convertSpanToTransaction() {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan(spanToJSON(this))) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = getCapturedScopesOnSpan(this);\n    const scope = capturedSpanScope || getCurrentScope();\n    const client = scope.getClient() || getClient();\n\n    if (this._sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      if (client) {\n        client.recordDroppedEvent('sample_rate', 'transaction');\n      }\n\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = getSpanDescendants(this).filter(span => span !== this && !isStandaloneSpan(span));\n\n    const spans = finishedSpans.map(span => spanToJSON(span)).filter(isFullFinishedSpan);\n\n    const source = this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n    const transaction = {\n      contexts: {\n        trace: spanToTransactionTraceContext(this),\n      },\n      spans:\n        // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n        // we do not use spans anymore after this point\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        ...dropUndefinedKeys({\n          dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n        }),\n      },\n      _metrics_summary: getMetricSummaryJsonForSpan(this),\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const measurements = timedEventsToMeasurements(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction event',\n          JSON.stringify(measurements, undefined, 2),\n        );\n      transaction.measurements = measurements;\n    }\n\n    return transaction;\n  }\n}\n\nfunction isSpanTimeInput(value) {\n  return (value && typeof value === 'number') || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input) {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span) {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope) {\n  const client = getClient();\n  if (!client) {\n    return;\n  }\n\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  const transport = client.getTransport();\n  if (transport) {\n    transport.send(envelope).then(null, reason => {\n      DEBUG_BUILD && logger.error('Error while sending span:', reason);\n    });\n  }\n}\n\nexport { SentrySpan };\n//# sourceMappingURL=sentrySpan.js.map\n","import { propagationContextFromHeaders, generatePropagationContext, logger } from '@sentry/utils';\nimport { getMainCarrier } from '../carrier.js';\nimport { withScope, getCurrentScope, getIsolationScope, getClient } from '../currentScopes.js';\nimport { getAsyncContextStrategy } from '../asyncContext/index.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE } from '../semanticAttributes.js';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors.js';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled.js';\nimport { _setSpanForScope, _getSpanForScope } from '../utils/spanOnScope.js';\nimport { spanToJSON, addChildSpanToSpan, spanIsSampled, spanTimeInputToSeconds, getRootSpan } from '../utils/spanUtils.js';\nimport { getDynamicSamplingContextFromSpan, freezeDscOnSpan } from './dynamicSamplingContext.js';\nimport { logSpanStart } from './logSpans.js';\nimport { sampleSpan } from './sampling.js';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan.js';\nimport { SentrySpan } from './sentrySpan.js';\nimport { SPAN_STATUS_ERROR } from './spanstatus.js';\nimport { setCapturedScopesOnSpan } from './utils.js';\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  return withScope(options.scope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => activeSpan.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  return withScope(options.scope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      function finishAndSetSpan() {\n        activeSpan.end();\n      }\n\n      return handleCallbackErrors(\n        () => callback(activeSpan, finishAndSetSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback) => withScope(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback) => withActiveSpan(customParentSpan, callback)\n      : (callback) => callback();\n\n  return wrapper(() => {\n    const scope = getCurrentScope();\n    const parentSpan = getParentSpan(scope);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nconst continueTrace = (\n  {\n    sentryTrace,\n    baggage,\n  }\n\n,\n  callback,\n) => {\n  return withScope(scope => {\n    const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return withScope(scope => {\n    _setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return withScope(scope => {\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nfunction startNewTrace(callback) {\n  return withScope(scope => {\n    scope.setPropagationContext(generatePropagationContext());\n    DEBUG_BUILD && logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}\n\n) {\n  if (!hasTracingEnabled()) {\n    return new SentryNonRecordingSpan();\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = spanIsSampled(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      freezeDscOnSpan(span, dsc);\n    }\n  }\n\n  logSpanStart(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options) {\n  const exp = options.experimental || {};\n  const initialCtx = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx = { ...initialCtx };\n    ctx.startTimestamp = spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs() {\n  const carrier = getMainCarrier();\n  return getAsyncContextStrategy(carrier);\n}\n\nfunction _startRootSpan(spanArguments, scope, parentSampled) {\n  const client = getClient();\n  const options = (client && client.getOptions()) || {};\n\n  const { name = '', attributes } = spanArguments;\n  const [sampled, sampleRate] = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY]\n    ? [false]\n    : sampleSpan(options, {\n        name,\n        parentSampled,\n        attributes,\n        transactionContext: {\n          name,\n          parentSampled,\n        },\n      });\n\n  const rootSpan = new SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      ...spanArguments.attributes,\n    },\n    sampled,\n  });\n  if (sampleRate !== undefined) {\n    rootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, sampleRate);\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan, scope, spanArguments) {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanIsSampled(parentSpan);\n\n  const childSpan = sampled\n    ? new SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new SentryNonRecordingSpan({ traceId });\n\n  addChildSpanToSpan(parentSpan, childSpan);\n\n  const client = getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope) {\n  const span = _getSpanForScope(scope) ;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = getClient();\n  const options = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return getRootSpan(span) ;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\nexport { continueTrace, startInactiveSpan, startNewTrace, startSpan, startSpanManual, suppressTracing, withActiveSpan };\n//# sourceMappingURL=trace.js.map\n","import { timestampInSeconds, logger } from '@sentry/utils';\nimport { getClient, getCurrentScope } from '../currentScopes.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON } from '../semanticAttributes.js';\nimport { hasTracingEnabled } from '../utils/hasTracingEnabled.js';\nimport { _setSpanForScope } from '../utils/spanOnScope.js';\nimport { getActiveSpan, spanTimeInputToSeconds, getSpanDescendants, spanToJSON, removeChildSpanFromSpan } from '../utils/spanUtils.js';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan.js';\nimport { SPAN_STATUS_ERROR } from './spanstatus.js';\nimport { startInactiveSpan } from './trace.js';\n\nconst TRACING_DEFAULTS = {\n  idleTimeout: 1000,\n  finalTimeout: 30000,\n  childSpanTimeout: 15000,\n};\n\nconst FINISH_REASON_HEARTBEAT_FAILED = 'heartbeatFailed';\nconst FINISH_REASON_IDLE_TIMEOUT = 'idleTimeout';\nconst FINISH_REASON_FINAL_TIMEOUT = 'finalTimeout';\nconst FINISH_REASON_EXTERNAL_FINISH = 'externalFinish';\n\n/**\n * An idle span is a span that automatically finishes. It does this by tracking child spans as activities.\n * An idle span is always the active span.\n */\nfunction startIdleSpan(startSpanOptions, options = {}) {\n  // Activities store a list of active spans\n  const activities = new Map();\n\n  // We should not use heartbeat if we finished a span\n  let _finished = false;\n\n  // Timer that tracks idleTimeout\n  let _idleTimeoutID;\n\n  // The reason why the span was finished\n  let _finishReason = FINISH_REASON_EXTERNAL_FINISH;\n\n  let _autoFinishAllowed = !options.disableAutoFinish;\n\n  const _cleanupHooks = [];\n\n  const {\n    idleTimeout = TRACING_DEFAULTS.idleTimeout,\n    finalTimeout = TRACING_DEFAULTS.finalTimeout,\n    childSpanTimeout = TRACING_DEFAULTS.childSpanTimeout,\n    beforeSpanEnd,\n  } = options;\n\n  const client = getClient();\n\n  if (!client || !hasTracingEnabled()) {\n    return new SentryNonRecordingSpan();\n  }\n\n  const scope = getCurrentScope();\n  const previousActiveSpan = getActiveSpan();\n  const span = _startIdleSpan(startSpanOptions);\n\n  // We patch span.end to ensure we can run some things before the span is ended\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  span.end = new Proxy(span.end, {\n    apply(target, thisArg, args) {\n      if (beforeSpanEnd) {\n        beforeSpanEnd(span);\n      }\n\n      // Just ensuring that this keeps working, even if we ever have more arguments here\n      const [definedEndTimestamp, ...rest] = args;\n      const timestamp = definedEndTimestamp || timestampInSeconds();\n      const spanEndTimestamp = spanTimeInputToSeconds(timestamp);\n\n      // Ensure we end with the last span timestamp, if possible\n      const spans = getSpanDescendants(span).filter(child => child !== span);\n\n      // If we have no spans, we just end, nothing else to do here\n      if (!spans.length) {\n        onIdleSpanEnded(spanEndTimestamp);\n        return Reflect.apply(target, thisArg, [spanEndTimestamp, ...rest]);\n      }\n\n      const childEndTimestamps = spans\n        .map(span => spanToJSON(span).timestamp)\n        .filter(timestamp => !!timestamp) ;\n      const latestSpanEndTimestamp = childEndTimestamps.length ? Math.max(...childEndTimestamps) : undefined;\n\n      // In reality this should always exist here, but type-wise it may be undefined...\n      const spanStartTimestamp = spanToJSON(span).start_timestamp;\n\n      // The final endTimestamp should:\n      // * Never be before the span start timestamp\n      // * Be the latestSpanEndTimestamp, if there is one, and it is smaller than the passed span end timestamp\n      // * Otherwise be the passed end timestamp\n      // Final timestamp can never be after finalTimeout\n      const endTimestamp = Math.min(\n        spanStartTimestamp ? spanStartTimestamp + finalTimeout / 1000 : Infinity,\n        Math.max(spanStartTimestamp || -Infinity, Math.min(spanEndTimestamp, latestSpanEndTimestamp || Infinity)),\n      );\n\n      onIdleSpanEnded(endTimestamp);\n      return Reflect.apply(target, thisArg, [endTimestamp, ...rest]);\n    },\n  });\n\n  /**\n   * Cancels the existing idle timeout, if there is one.\n   */\n  function _cancelIdleTimeout() {\n    if (_idleTimeoutID) {\n      clearTimeout(_idleTimeoutID);\n      _idleTimeoutID = undefined;\n    }\n  }\n\n  /**\n   * Restarts idle timeout, if there is no running idle timeout it will start one.\n   */\n  function _restartIdleTimeout(endTimestamp) {\n    _cancelIdleTimeout();\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && activities.size === 0 && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_IDLE_TIMEOUT;\n        span.end(endTimestamp);\n      }\n    }, idleTimeout);\n  }\n\n  /**\n   * Restarts child span timeout, if there is none running it will start one.\n   */\n  function _restartChildSpanTimeout(endTimestamp) {\n    _idleTimeoutID = setTimeout(() => {\n      if (!_finished && _autoFinishAllowed) {\n        _finishReason = FINISH_REASON_HEARTBEAT_FAILED;\n        span.end(endTimestamp);\n      }\n    }, childSpanTimeout);\n  }\n\n  /**\n   * Start tracking a specific activity.\n   * @param spanId The span id that represents the activity\n   */\n  function _pushActivity(spanId) {\n    _cancelIdleTimeout();\n    activities.set(spanId, true);\n\n    const endTimestamp = timestampInSeconds();\n    // We need to add the timeout here to have the real endtimestamp of the idle span\n    // Remember timestampInSeconds is in seconds, timeout is in ms\n    _restartChildSpanTimeout(endTimestamp + childSpanTimeout / 1000);\n  }\n\n  /**\n   * Remove an activity from usage\n   * @param spanId The span id that represents the activity\n   */\n  function _popActivity(spanId) {\n    if (activities.has(spanId)) {\n      activities.delete(spanId);\n    }\n\n    if (activities.size === 0) {\n      const endTimestamp = timestampInSeconds();\n      // We need to add the timeout here to have the real endtimestamp of the idle span\n      // Remember timestampInSeconds is in seconds, timeout is in ms\n      _restartIdleTimeout(endTimestamp + idleTimeout / 1000);\n    }\n  }\n\n  function onIdleSpanEnded(endTimestamp) {\n    _finished = true;\n    activities.clear();\n\n    _cleanupHooks.forEach(cleanup => cleanup());\n\n    _setSpanForScope(scope, previousActiveSpan);\n\n    const spanJSON = spanToJSON(span);\n\n    const { start_timestamp: startTimestamp } = spanJSON;\n    // This should never happen, but to make TS happy...\n    if (!startTimestamp) {\n      return;\n    }\n\n    const attributes = spanJSON.data || {};\n    if (!attributes[SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON]) {\n      span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, _finishReason);\n    }\n\n    logger.log(`[Tracing] Idle span \"${spanJSON.op}\" finished`);\n\n    const childSpans = getSpanDescendants(span).filter(child => child !== span);\n\n    let discardedSpans = 0;\n    childSpans.forEach(childSpan => {\n      // We cancel all pending spans with status \"cancelled\" to indicate the idle span was finished early\n      if (childSpan.isRecording()) {\n        childSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'cancelled' });\n        childSpan.end(endTimestamp);\n        DEBUG_BUILD &&\n          logger.log('[Tracing] Cancelling span since span ended early', JSON.stringify(childSpan, undefined, 2));\n      }\n\n      const childSpanJSON = spanToJSON(childSpan);\n      const { timestamp: childEndTimestamp = 0, start_timestamp: childStartTimestamp = 0 } = childSpanJSON;\n\n      const spanStartedBeforeIdleSpanEnd = childStartTimestamp <= endTimestamp;\n\n      // Add a delta with idle timeout so that we prevent false positives\n      const timeoutWithMarginOfError = (finalTimeout + idleTimeout) / 1000;\n      const spanEndedBeforeFinalTimeout = childEndTimestamp - childStartTimestamp <= timeoutWithMarginOfError;\n\n      if (DEBUG_BUILD) {\n        const stringifiedSpan = JSON.stringify(childSpan, undefined, 2);\n        if (!spanStartedBeforeIdleSpanEnd) {\n          logger.log('[Tracing] Discarding span since it happened after idle span was finished', stringifiedSpan);\n        } else if (!spanEndedBeforeFinalTimeout) {\n          logger.log('[Tracing] Discarding span since it finished after idle span final timeout', stringifiedSpan);\n        }\n      }\n\n      if (!spanEndedBeforeFinalTimeout || !spanStartedBeforeIdleSpanEnd) {\n        removeChildSpanFromSpan(span, childSpan);\n        discardedSpans++;\n      }\n    });\n\n    if (discardedSpans > 0) {\n      span.setAttribute('sentry.idle_span_discarded_spans', discardedSpans);\n    }\n  }\n\n  _cleanupHooks.push(\n    client.on('spanStart', startedSpan => {\n      // If we already finished the idle span,\n      // or if this is the idle span itself being started,\n      // or if the started span has already been closed,\n      // we don't care about it for activity\n      if (_finished || startedSpan === span || !!spanToJSON(startedSpan).timestamp) {\n        return;\n      }\n\n      const allSpans = getSpanDescendants(span);\n\n      // If the span that was just started is a child of the idle span, we should track it\n      if (allSpans.includes(startedSpan)) {\n        _pushActivity(startedSpan.spanContext().spanId);\n      }\n    }),\n  );\n\n  _cleanupHooks.push(\n    client.on('spanEnd', endedSpan => {\n      if (_finished) {\n        return;\n      }\n\n      _popActivity(endedSpan.spanContext().spanId);\n    }),\n  );\n\n  _cleanupHooks.push(\n    client.on('idleSpanEnableAutoFinish', spanToAllowAutoFinish => {\n      if (spanToAllowAutoFinish === span) {\n        _autoFinishAllowed = true;\n        _restartIdleTimeout();\n\n        if (activities.size) {\n          _restartChildSpanTimeout();\n        }\n      }\n    }),\n  );\n\n  // We only start the initial idle timeout if we are not delaying the auto finish\n  if (!options.disableAutoFinish) {\n    _restartIdleTimeout();\n  }\n\n  setTimeout(() => {\n    if (!_finished) {\n      span.setStatus({ code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' });\n      _finishReason = FINISH_REASON_FINAL_TIMEOUT;\n      span.end();\n    }\n  }, finalTimeout);\n\n  return span;\n}\n\nfunction _startIdleSpan(options) {\n  const span = startInactiveSpan(options);\n\n  _setSpanForScope(getCurrentScope(), span);\n\n  DEBUG_BUILD && logger.log('[Tracing] Started span is an idle span');\n\n  return span;\n}\n\nexport { TRACING_DEFAULTS, startIdleSpan };\n//# sourceMappingURL=idleSpan.js.map\n","import { makeDsn, dsnToString, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(\n  dsnLike,\n  dialogOptions\n\n,\n) {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] )}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n\nexport { getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint };\n//# sourceMappingURL=api.js.map\n","import { arrayify, logger } from '@sentry/utils';\nimport { getClient } from './currentScopes.js';\nimport { DEBUG_BUILD } from './debug-build.js';\n\nconst installedIntegrations = [];\n\n/** Map of integrations assigned to a client */\n\n/**\n * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to\n * preseve the order of integrations in the array.\n *\n * @private\n */\nfunction filterDuplicates(integrations) {\n  const integrationsByName = {};\n\n  integrations.forEach(currentInstance => {\n    const { name } = currentInstance;\n\n    const existingInstance = integrationsByName[name];\n\n    // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a\n    // default instance to overwrite an existing user instance\n    if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {\n      return;\n    }\n\n    integrationsByName[name] = currentInstance;\n  });\n\n  return Object.values(integrationsByName);\n}\n\n/** Gets integrations to install */\nfunction getIntegrationsToSetup(options) {\n  const defaultIntegrations = options.defaultIntegrations || [];\n  const userIntegrations = options.integrations;\n\n  // We flag default instances, so that later we can tell them apart from any user-created instances of the same class\n  defaultIntegrations.forEach(integration => {\n    integration.isDefaultInstance = true;\n  });\n\n  let integrations;\n\n  if (Array.isArray(userIntegrations)) {\n    integrations = [...defaultIntegrations, ...userIntegrations];\n  } else if (typeof userIntegrations === 'function') {\n    integrations = arrayify(userIntegrations(defaultIntegrations));\n  } else {\n    integrations = defaultIntegrations;\n  }\n\n  const finalIntegrations = filterDuplicates(integrations);\n\n  // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or\n  // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event\n  // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore\n  // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.\n  const debugIndex = finalIntegrations.findIndex(integration => integration.name === 'Debug');\n  if (debugIndex > -1) {\n    const [debugInstance] = finalIntegrations.splice(debugIndex, 1) ;\n    finalIntegrations.push(debugInstance);\n  }\n\n  return finalIntegrations;\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nfunction setupIntegrations(client, integrations) {\n  const integrationIndex = {};\n\n  integrations.forEach(integration => {\n    // guard against empty provided integrations\n    if (integration) {\n      setupIntegration(client, integration, integrationIndex);\n    }\n  });\n\n  return integrationIndex;\n}\n\n/**\n * Execute the `afterAllSetup` hooks of the given integrations.\n */\nfunction afterSetupIntegrations(client, integrations) {\n  for (const integration of integrations) {\n    // guard against empty provided integrations\n    if (integration && integration.afterAllSetup) {\n      integration.afterAllSetup(client);\n    }\n  }\n}\n\n/** Setup a single integration.  */\nfunction setupIntegration(client, integration, integrationIndex) {\n  if (integrationIndex[integration.name]) {\n    DEBUG_BUILD && logger.log(`Integration skipped because it was already installed: ${integration.name}`);\n    return;\n  }\n  integrationIndex[integration.name] = integration;\n\n  // `setupOnce` is only called the first time\n  if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {\n    integration.setupOnce();\n    installedIntegrations.push(integration.name);\n  }\n\n  // `setup` is run for each client\n  if (integration.setup && typeof integration.setup === 'function') {\n    integration.setup(client);\n  }\n\n  if (typeof integration.preprocessEvent === 'function') {\n    const callback = integration.preprocessEvent.bind(integration) ;\n    client.on('preprocessEvent', (event, hint) => callback(event, hint, client));\n  }\n\n  if (typeof integration.processEvent === 'function') {\n    const callback = integration.processEvent.bind(integration) ;\n\n    const processor = Object.assign((event, hint) => callback(event, hint, client), {\n      id: integration.name,\n    });\n\n    client.addEventProcessor(processor);\n  }\n\n  DEBUG_BUILD && logger.log(`Integration installed: ${integration.name}`);\n}\n\n/** Add an integration to the current scope's client. */\nfunction addIntegration(integration) {\n  const client = getClient();\n\n  if (!client) {\n    DEBUG_BUILD && logger.warn(`Cannot add integration \"${integration.name}\" because no SDK Client is available.`);\n    return;\n  }\n\n  client.addIntegration(integration);\n}\n\n/**\n * Define an integration function that can be used to create an integration instance.\n * Note that this by design hides the implementation details of the integration, as they are considered internal.\n */\nfunction defineIntegration(fn) {\n  return fn;\n}\n\nexport { addIntegration, afterSetupIntegrations, defineIntegration, getIntegrationsToSetup, installedIntegrations, setupIntegration, setupIntegrations };\n//# sourceMappingURL=integration.js.map\n","import { makeDsn, logger, uuid4, checkOrSetAlreadyCaught, isParameterizedString, isPrimitive, resolvedSyncPromise, addItemToEnvelope, createAttachmentEnvelopeItem, SyncPromise, dropUndefinedKeys, rejectedSyncPromise, SentryError, isThenable, isPlainObject } from '@sentry/utils';\nimport { getEnvelopeEndpointWithUrlEncodedAuth } from './api.js';\nimport { getIsolationScope } from './currentScopes.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { createEventEnvelope, createSessionEnvelope } from './envelope.js';\nimport { setupIntegration, afterSetupIntegrations, setupIntegrations } from './integration.js';\nimport { updateSession } from './session.js';\nimport { getDynamicSamplingContextFromClient } from './tracing/dynamicSamplingContext.js';\nimport { parseSampleRate } from './utils/parseSampleRate.js';\nimport { prepareEvent } from './utils/prepareEvent.js';\n\nconst ALREADY_SEEN_ERROR = \"Not capturing exception because it's already been captured.\";\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event, it is passed through\n * {@link BaseClient._prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(options);\n *   }\n *\n *   // ...\n * }\n */\nclass BaseClient {\n  /** Options passed to the SDK. */\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n\n  /** Array of set up integrations. */\n\n  /** Number of calls being processed */\n\n  /** Holds flushable  */\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param options Options for the client.\n   */\n   constructor(options) {\n    this._options = options;\n    this._integrations = {};\n    this._numProcessing = 0;\n    this._outcomes = {};\n    this._hooks = {};\n    this._eventProcessors = [];\n\n    if (options.dsn) {\n      this._dsn = makeDsn(options.dsn);\n    } else {\n      DEBUG_BUILD && logger.warn('No DSN provided, client will not send events.');\n    }\n\n    if (this._dsn) {\n      const url = getEnvelopeEndpointWithUrlEncodedAuth(\n        this._dsn,\n        options.tunnel,\n        options._metadata ? options._metadata.sdk : undefined,\n      );\n      this._transport = options.transport({\n        tunnel: this._options.tunnel,\n        recordDroppedEvent: this.recordDroppedEvent.bind(this),\n        ...options.transportOptions,\n        url,\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n   captureException(exception, hint, scope) {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (checkOrSetAlreadyCaught(exception)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    this._process(\n      this.eventFromException(exception, hintWithEventId).then(event =>\n        this._captureEvent(event, hintWithEventId, scope),\n      ),\n    );\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   captureMessage(\n    message,\n    level,\n    hint,\n    currentScope,\n  ) {\n    const hintWithEventId = {\n      event_id: uuid4(),\n      ...hint,\n    };\n\n    const eventMessage = isParameterizedString(message) ? message : String(message);\n\n    const promisedEvent = isPrimitive(message)\n      ? this.eventFromMessage(eventMessage, level, hintWithEventId)\n      : this.eventFromException(message, hintWithEventId);\n\n    this._process(promisedEvent.then(event => this._captureEvent(event, hintWithEventId, currentScope)));\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   captureEvent(event, hint, currentScope) {\n    const eventId = uuid4();\n\n    // ensure we haven't captured this very object before\n    if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {\n      DEBUG_BUILD && logger.log(ALREADY_SEEN_ERROR);\n      return eventId;\n    }\n\n    const hintWithEventId = {\n      event_id: eventId,\n      ...hint,\n    };\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;\n\n    this._process(this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope));\n\n    return hintWithEventId.event_id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   captureSession(session) {\n    if (!(typeof session.release === 'string')) {\n      DEBUG_BUILD && logger.warn('Discarded session because of missing or non-string release');\n    } else {\n      this.sendSession(session);\n      // After sending, we set init false to indicate it's not the first occurrence\n      updateSession(session, { init: false });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   getDsn() {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   getOptions() {\n    return this._options;\n  }\n\n  /**\n   * @see SdkMetadata in @sentry/types\n   *\n   * @return The metadata of the SDK\n   */\n   getSdkMetadata() {\n    return this._options._metadata;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   getTransport() {\n    return this._transport;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   flush(timeout) {\n    const transport = this._transport;\n    if (transport) {\n      this.emit('flush');\n      return this._isClientDoneProcessing(timeout).then(clientFinished => {\n        return transport.flush(timeout).then(transportFlushed => clientFinished && transportFlushed);\n      });\n    } else {\n      return resolvedSyncPromise(true);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   close(timeout) {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      this.emit('close');\n      return result;\n    });\n  }\n\n  /** Get all installed event processors. */\n   getEventProcessors() {\n    return this._eventProcessors;\n  }\n\n  /** @inheritDoc */\n   addEventProcessor(eventProcessor) {\n    this._eventProcessors.push(eventProcessor);\n  }\n\n  /** @inheritdoc */\n   init() {\n    if (this._isEnabled()) {\n      this._setupIntegrations();\n    }\n  }\n\n  /**\n   * Gets an installed integration by its name.\n   *\n   * @returns The installed integration or `undefined` if no integration with that `name` was installed.\n   */\n   getIntegrationByName(integrationName) {\n    return this._integrations[integrationName] ;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   addIntegration(integration) {\n    const isAlreadyInstalled = this._integrations[integration.name];\n\n    // This hook takes care of only installing if not already installed\n    setupIntegration(this, integration, this._integrations);\n    // Here we need to check manually to make sure to not run this multiple times\n    if (!isAlreadyInstalled) {\n      afterSetupIntegrations(this, [integration]);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   sendEvent(event, hint = {}) {\n    this.emit('beforeSendEvent', event, hint);\n\n    let env = createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);\n\n    for (const attachment of hint.attachments || []) {\n      env = addItemToEnvelope(env, createAttachmentEnvelopeItem(attachment));\n    }\n\n    const promise = this.sendEnvelope(env);\n    if (promise) {\n      promise.then(sendResponse => this.emit('afterSendEvent', event, sendResponse), null);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   sendSession(session) {\n    const env = createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(env);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   recordDroppedEvent(reason, category, _event) {\n    // Note: we use `event` in replay, where we overwrite this hook.\n\n    if (this._options.sendClientReports) {\n      // We want to track each category (error, transaction, session, replay_event) separately\n      // but still keep the distinction between different type of outcomes.\n      // We could use nested maps, but it's much easier to read and type this way.\n      // A correct type for map-based implementation if we want to go that route\n      // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`\n      // With typescript 4.1 we could even use template literal types\n      const key = `${reason}:${category}`;\n      DEBUG_BUILD && logger.log(`Adding outcome: \"${key}\"`);\n\n      this._outcomes[key] = (this._outcomes[key] || 0) + 1;\n    }\n  }\n\n  // Keep on() & emit() signatures in sync with types' client.ts interface\n  /* eslint-disable @typescript-eslint/unified-signatures */\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n   on(hook, callback) {\n    const hooks = (this._hooks[hook] = this._hooks[hook] || []);\n\n    // @ts-expect-error We assue the types are correct\n    hooks.push(callback);\n\n    // This function returns a callback execution handler that, when invoked,\n    // deregisters a callback. This is crucial for managing instances where callbacks\n    // need to be unregistered to prevent self-referencing in callback closures,\n    // ensuring proper garbage collection.\n    return () => {\n      // @ts-expect-error We assue the types are correct\n      const cbIndex = hooks.indexOf(callback);\n      if (cbIndex > -1) {\n        hooks.splice(cbIndex, 1);\n      }\n    };\n  }\n\n  /** @inheritdoc */\n\n  /** @inheritdoc */\n   emit(hook, ...rest) {\n    const callbacks = this._hooks[hook];\n    if (callbacks) {\n      callbacks.forEach(callback => callback(...rest));\n    }\n  }\n\n  /**\n   * @inheritdoc\n   */\n   sendEnvelope(envelope) {\n    this.emit('beforeEnvelope', envelope);\n\n    if (this._isEnabled() && this._transport) {\n      return this._transport.send(envelope).then(null, reason => {\n        DEBUG_BUILD && logger.error('Error while sending event:', reason);\n        return reason;\n      });\n    }\n\n    DEBUG_BUILD && logger.error('Transport disabled');\n\n    return resolvedSyncPromise({});\n  }\n\n  /* eslint-enable @typescript-eslint/unified-signatures */\n\n  /** Setup integrations for this client. */\n   _setupIntegrations() {\n    const { integrations } = this._options;\n    this._integrations = setupIntegrations(this, integrations);\n    afterSetupIntegrations(this, integrations);\n  }\n\n  /** Updates existing session based on the provided event */\n   _updateSessionFromEvent(session, event) {\n    let crashed = false;\n    let errored = false;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    // A session is updated and that session update is sent in only one of the two following scenarios:\n    // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update\n    // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update\n    const sessionNonTerminal = session.status === 'ok';\n    const shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);\n\n    if (shouldUpdateAndSend) {\n      updateSession(session, {\n        ...(crashed && { status: 'crashed' }),\n        errors: session.errors || Number(errored || crashed),\n      });\n      this.captureSession(session);\n    }\n  }\n\n  /**\n   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying\n   * \"no\" (resolving to `false`) in order to give the client a chance to potentially finish first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not\n   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and\n   * `false` otherwise\n   */\n   _isClientDoneProcessing(timeout) {\n    return new SyncPromise(resolve => {\n      let ticked = 0;\n      const tick = 1;\n\n      const interval = setInterval(() => {\n        if (this._numProcessing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Determines whether this SDK is enabled and a transport is present. */\n   _isEnabled() {\n    return this.getOptions().enabled !== false && this._transport !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n   _prepareEvent(\n    event,\n    hint,\n    currentScope,\n    isolationScope = getIsolationScope(),\n  ) {\n    const options = this.getOptions();\n    const integrations = Object.keys(this._integrations);\n    if (!hint.integrations && integrations.length > 0) {\n      hint.integrations = integrations;\n    }\n\n    this.emit('preprocessEvent', event, hint);\n\n    if (!event.type) {\n      isolationScope.setLastEventId(event.event_id || hint.event_id);\n    }\n\n    return prepareEvent(options, event, hint, currentScope, this, isolationScope).then(evt => {\n      if (evt === null) {\n        return evt;\n      }\n\n      const propagationContext = {\n        ...isolationScope.getPropagationContext(),\n        ...(currentScope ? currentScope.getPropagationContext() : undefined),\n      };\n\n      const trace = evt.contexts && evt.contexts.trace;\n      if (!trace && propagationContext) {\n        const { traceId: trace_id, spanId, parentSpanId, dsc } = propagationContext;\n        evt.contexts = {\n          trace: dropUndefinedKeys({\n            trace_id,\n            span_id: spanId,\n            parent_span_id: parentSpanId,\n          }),\n          ...evt.contexts,\n        };\n\n        const dynamicSamplingContext = dsc ? dsc : getDynamicSamplingContextFromClient(trace_id, this);\n\n        evt.sdkProcessingMetadata = {\n          dynamicSamplingContext,\n          ...evt.sdkProcessingMetadata,\n        };\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n   _captureEvent(event, hint = {}, scope) {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        if (DEBUG_BUILD) {\n          // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for\n          // control flow, log just the message (no stack) as a log-level log.\n          const sentryError = reason ;\n          if (sentryError.logLevel === 'log') {\n            logger.log(sentryError.message);\n          } else {\n            logger.warn(sentryError);\n          }\n        }\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param currentScope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n   _processEvent(event, hint, currentScope) {\n    const options = this.getOptions();\n    const { sampleRate } = options;\n\n    const isTransaction = isTransactionEvent(event);\n    const isError = isErrorEvent(event);\n    const eventType = event.type || 'error';\n    const beforeSendLabel = `before send for type \\`${eventType}\\``;\n\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate(sampleRate);\n    if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {\n      this.recordDroppedEvent('sample_rate', 'error', event);\n      return rejectedSyncPromise(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n          'log',\n        ),\n      );\n    }\n\n    const dataCategory = eventType === 'replay_event' ? 'replay' : eventType;\n\n    const sdkProcessingMetadata = event.sdkProcessingMetadata || {};\n    const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;\n\n    return this._prepareEvent(event, hint, currentScope, capturedSpanIsolationScope)\n      .then(prepared => {\n        if (prepared === null) {\n          this.recordDroppedEvent('event_processor', dataCategory, event);\n          throw new SentryError('An event processor returned `null`, will not send event.', 'log');\n        }\n\n        const isInternalException = hint.data && (hint.data ).__sentry__ === true;\n        if (isInternalException) {\n          return prepared;\n        }\n\n        const result = processBeforeSend(this, options, prepared, hint);\n        return _validateBeforeSendResult(result, beforeSendLabel);\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          this.recordDroppedEvent('before_send', dataCategory, event);\n          if (isTransactionEvent(event)) {\n            const spans = event.spans || [];\n            // the transaction itself counts as one span, plus all the child spans that are added\n            const spanCount = 1 + spans.length;\n            this._outcomes['span'] = (this._outcomes['span'] || 0) + spanCount;\n          }\n          throw new SentryError(`${beforeSendLabel} returned \\`null\\`, will not send event.`, 'log');\n        }\n\n        const session = currentScope && currentScope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        // None of the Sentry built event processor will update transaction name,\n        // so if the transaction name has been changed by an event processor, we know\n        // it has to come from custom event processor added by a user\n        const transactionInfo = processedEvent.transaction_info;\n        if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {\n          const source = 'custom';\n          processedEvent.transaction_info = {\n            ...transactionInfo,\n            source,\n          };\n        }\n\n        this.sendEvent(processedEvent, hint);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n   _process(promise) {\n    this._numProcessing++;\n    void promise.then(\n      value => {\n        this._numProcessing--;\n        return value;\n      },\n      reason => {\n        this._numProcessing--;\n        return reason;\n      },\n    );\n  }\n\n  /**\n   * Clears outcomes on this client and returns them.\n   */\n   _clearOutcomes() {\n    const outcomes = this._outcomes;\n    this._outcomes = {};\n    return Object.entries(outcomes).map(([key, quantity]) => {\n      const [reason, category] = key.split(':') ;\n      return {\n        reason,\n        category,\n        quantity,\n      };\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n}\n\n/**\n * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.\n */\nfunction _validateBeforeSendResult(\n  beforeSendResult,\n  beforeSendLabel,\n) {\n  const invalidValueError = `${beforeSendLabel} must return \\`null\\` or a valid event.`;\n  if (isThenable(beforeSendResult)) {\n    return beforeSendResult.then(\n      event => {\n        if (!isPlainObject(event) && event !== null) {\n          throw new SentryError(invalidValueError);\n        }\n        return event;\n      },\n      e => {\n        throw new SentryError(`${beforeSendLabel} rejected with ${e}`);\n      },\n    );\n  } else if (!isPlainObject(beforeSendResult) && beforeSendResult !== null) {\n    throw new SentryError(invalidValueError);\n  }\n  return beforeSendResult;\n}\n\n/**\n * Process the matching `beforeSendXXX` callback.\n */\nfunction processBeforeSend(\n  client,\n  options,\n  event,\n  hint,\n) {\n  const { beforeSend, beforeSendTransaction, beforeSendSpan } = options;\n\n  if (isErrorEvent(event) && beforeSend) {\n    return beforeSend(event, hint);\n  }\n\n  if (isTransactionEvent(event)) {\n    if (event.spans && beforeSendSpan) {\n      const processedSpans = [];\n      for (const span of event.spans) {\n        const processedSpan = beforeSendSpan(span);\n        if (processedSpan) {\n          processedSpans.push(processedSpan);\n        } else {\n          client.recordDroppedEvent('before_send', 'span');\n        }\n      }\n      event.spans = processedSpans;\n    }\n\n    if (beforeSendTransaction) {\n      return beforeSendTransaction(event, hint);\n    }\n  }\n\n  return event;\n}\n\nfunction isErrorEvent(event) {\n  return event.type === undefined;\n}\n\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\nexport { BaseClient };\n//# sourceMappingURL=baseclient.js.map\n","import { logger, consoleSandbox } from '@sentry/utils';\nimport { getCurrentScope } from './currentScopes.js';\nimport { DEBUG_BUILD } from './debug-build.js';\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(\n  clientClass,\n  options,\n) {\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nfunction setCurrentClient(client) {\n  getCurrentScope().setClient(client);\n}\n\nexport { initAndBind, setCurrentClient };\n//# sourceMappingURL=sdk.js.map\n","import { makePromiseBuffer, forEachEnvelopeItem, envelopeItemTypeToDataCategory, isRateLimited, resolvedSyncPromise, createEnvelope, SentryError, logger, serializeEnvelope, updateRateLimits } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 64;\n\n/**\n * Creates an instance of a Sentry `Transport`\n *\n * @param options\n * @param makeRequest\n */\nfunction createTransport(\n  options,\n  makeRequest,\n  buffer = makePromiseBuffer(\n    options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE,\n  ),\n) {\n  let rateLimits = {};\n  const flush = (timeout) => buffer.drain(timeout);\n\n  function send(envelope) {\n    const filteredEnvelopeItems = [];\n\n    // Drop rate limited items from envelope\n    forEachEnvelopeItem(envelope, (item, type) => {\n      const dataCategory = envelopeItemTypeToDataCategory(type);\n      if (isRateLimited(rateLimits, dataCategory)) {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);\n      } else {\n        filteredEnvelopeItems.push(item);\n      }\n    });\n\n    // Skip sending if envelope is empty after filtering out rate limited events\n    if (filteredEnvelopeItems.length === 0) {\n      return resolvedSyncPromise({});\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const filteredEnvelope = createEnvelope(envelope[0], filteredEnvelopeItems );\n\n    // Creates client report for each item in an envelope\n    const recordEnvelopeLoss = (reason) => {\n      forEachEnvelopeItem(filteredEnvelope, (item, type) => {\n        const event = getEventForEnvelopeItem(item, type);\n        options.recordDroppedEvent(reason, envelopeItemTypeToDataCategory(type), event);\n      });\n    };\n\n    const requestTask = () =>\n      makeRequest({ body: serializeEnvelope(filteredEnvelope) }).then(\n        response => {\n          // We don't want to throw on NOK responses, but we want to at least log them\n          if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {\n            DEBUG_BUILD && logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);\n          }\n\n          rateLimits = updateRateLimits(rateLimits, response);\n          return response;\n        },\n        error => {\n          recordEnvelopeLoss('network_error');\n          throw error;\n        },\n      );\n\n    return buffer.add(requestTask).then(\n      result => result,\n      error => {\n        if (error instanceof SentryError) {\n          DEBUG_BUILD && logger.error('Skipped sending event because buffer is full.');\n          recordEnvelopeLoss('queue_overflow');\n          return resolvedSyncPromise({});\n        } else {\n          throw error;\n        }\n      },\n    );\n  }\n\n  return {\n    send,\n    flush,\n  };\n}\n\nfunction getEventForEnvelopeItem(item, type) {\n  if (type !== 'event' && type !== 'transaction') {\n    return undefined;\n  }\n\n  return Array.isArray(item) ? (item )[1] : undefined;\n}\n\nexport { DEFAULT_TRANSPORT_BUFFER_SIZE, createTransport };\n//# sourceMappingURL=base.js.map\n","import { SDK_VERSION } from '@sentry/utils';\n\n/**\n * A builder for the SDK metadata in the options for the SDK initialization.\n *\n * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.\n * We don't extract it for bundle size reasons.\n * @see https://github.com/getsentry/sentry-javascript/pull/7404\n * @see https://github.com/getsentry/sentry-javascript/pull/4196\n *\n * If you make changes to this function consider updating the others as well.\n *\n * @param options SDK options object that gets mutated\n * @param names list of package names\n */\nfunction applySdkMetadata(options, name, names = [name], source = 'npm') {\n  const metadata = options._metadata || {};\n\n  if (!metadata.sdk) {\n    metadata.sdk = {\n      name: `sentry.javascript.${name}`,\n      packages: names.map(name => ({\n        name: `${source}:@sentry/${name}`,\n        version: SDK_VERSION,\n      })),\n      version: SDK_VERSION,\n    };\n  }\n\n  options._metadata = metadata;\n}\n\nexport { applySdkMetadata };\n//# sourceMappingURL=sdkMetadata.js.map\n","import { dateTimestampInSeconds, consoleSandbox } from '@sentry/utils';\nimport { getClient, getIsolationScope } from './currentScopes.js';\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nfunction addBreadcrumb(breadcrumb, hint) {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n\n  if (!client) return;\n\n  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n\n  if (maxBreadcrumbs <= 0) return;\n\n  const timestamp = dateTimestampInSeconds();\n  const mergedBreadcrumb = { timestamp, ...breadcrumb };\n  const finalBreadcrumb = beforeBreadcrumb\n    ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) )\n    : mergedBreadcrumb;\n\n  if (finalBreadcrumb === null) return;\n\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n\nexport { addBreadcrumb };\n//# sourceMappingURL=breadcrumbs.js.map\n","import { getOriginalFunction } from '@sentry/utils';\nimport { getClient } from '../currentScopes.js';\nimport { defineIntegration } from '../integration.js';\n\nlet originalFunctionToString;\n\nconst INTEGRATION_NAME = 'FunctionToString';\n\nconst SETUP_CLIENTS = new WeakMap();\n\nconst _functionToStringIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // intrinsics (like Function.prototype) might be immutable in some environments\n      // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Function.prototype.toString = function ( ...args) {\n          const originalFunction = getOriginalFunction(this);\n          const context =\n            SETUP_CLIENTS.has(getClient() ) && originalFunction !== undefined ? originalFunction : this;\n          return originalFunctionToString.apply(context, args);\n        };\n      } catch (e) {\n        // ignore errors here, just don't patch this\n      }\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) ;\n\n/**\n * Patch toString calls to return proper name for wrapped functions.\n *\n * ```js\n * Sentry.init({\n *   integrations: [\n *     functionToStringIntegration(),\n *   ],\n * });\n * ```\n */\nconst functionToStringIntegration = defineIntegration(_functionToStringIntegration);\n\nexport { functionToStringIntegration };\n//# sourceMappingURL=functiontostring.js.map\n","import { logger, getEventDescription, stringMatchesSomePattern } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { defineIntegration } from '../integration.js';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [\n  /^Script error\\.?$/,\n  /^Javascript error: Script error\\.? on line 0$/,\n  /^ResizeObserver loop completed with undelivered notifications.$/, // The browser logs this when a ResizeObserver handler takes a bit longer. Usually this is not an actual issue though. It indicates slowness.\n  /^Cannot redefine property: googletag$/, // This is thrown when google tag manager is used in combination with an ad blocker\n  \"undefined is not an object (evaluating 'a.L')\", // Random error that happens but not actionable or noticeable to end-users.\n  'can\\'t redefine non-configurable property \"solana\"', // Probably a browser extension or custom browser (Brave) throwing this error\n  \"vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)\", // Error thrown by GTM, seemingly not affecting end-users\n  \"Can't find variable: _AutofillCallbackHandler\", // Unactionable error in instagram webview https://developers.facebook.com/community/threads/320013549791141/\n];\n\n/** Options for the InboundFilters integration */\n\nconst INTEGRATION_NAME = 'InboundFilters';\nconst _inboundFiltersIntegration = ((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const clientOptions = client.getOptions();\n      const mergedOptions = _mergeOptions(options, clientOptions);\n      return _shouldDropEvent(event, mergedOptions) ? null : event;\n    },\n  };\n}) ;\n\nconst inboundFiltersIntegration = defineIntegration(_inboundFiltersIntegration);\n\nfunction _mergeOptions(\n  internalOptions = {},\n  clientOptions = {},\n) {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...(internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS),\n    ],\n    ignoreTransactions: [...(internalOptions.ignoreTransactions || []), ...(clientOptions.ignoreTransactions || [])],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\nfunction _shouldDropEvent(event, options) {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    DEBUG_BUILD &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isUselessError(event)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to not having an error message, error type or stacktrace.\\nEvent: ${getEventDescription(\n          event,\n        )}`,\n      );\n    return true;\n  }\n  if (_isIgnoredTransaction(event, options.ignoreTransactions)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreTransactions\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event, ignoreErrors) {\n  // If event.type, this is not an error\n  if (event.type || !ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isIgnoredTransaction(event, ignoreTransactions) {\n  if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {\n    return false;\n  }\n\n  const name = event.transaction;\n  return name ? stringMatchesSomePattern(name, ignoreTransactions) : false;\n}\n\nfunction _isDeniedUrl(event, denyUrls) {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event, allowUrls) {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getPossibleEventMessages(event) {\n  const possibleMessages = [];\n\n  if (event.message) {\n    possibleMessages.push(event.message);\n  }\n\n  let lastException;\n  try {\n    // @ts-expect-error Try catching to save bundle size\n    lastException = event.exception.values[event.exception.values.length - 1];\n  } catch (e) {\n    // try catching to save bundle size checking existence of variables\n  }\n\n  if (lastException) {\n    if (lastException.value) {\n      possibleMessages.push(lastException.value);\n      if (lastException.type) {\n        possibleMessages.push(`${lastException.type}: ${lastException.value}`);\n      }\n    }\n  }\n\n  return possibleMessages;\n}\n\nfunction _isSentryError(event) {\n  try {\n    // @ts-expect-error can't be a sentry error if undefined\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames = []) {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event) {\n  try {\n    let frames;\n    try {\n      // @ts-expect-error we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    DEBUG_BUILD && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n\nfunction _isUselessError(event) {\n  if (event.type) {\n    // event is not an error\n    return false;\n  }\n\n  // We only want to consider events for dropping that actually have recorded exception values.\n  if (!event.exception || !event.exception.values || event.exception.values.length === 0) {\n    return false;\n  }\n\n  return (\n    // No top-level message\n    !event.message &&\n    // There are no exception values that have a stacktrace, a non-generic-Error type or value\n    !event.exception.values.some(value => value.stacktrace || (value.type && value.type !== 'Error') || value.value)\n  );\n}\n\nexport { inboundFiltersIntegration };\n//# sourceMappingURL=inboundfilters.js.map\n","import { logger, getFramesFromEvent } from '@sentry/utils';\nimport { defineIntegration } from '../integration.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\n\nconst INTEGRATION_NAME = 'Dedupe';\n\nconst _dedupeIntegration = (() => {\n  let previousEvent;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(currentEvent) {\n      // We want to ignore any non-error type events, e.g. transactions or replays\n      // These should never be deduped, and also not be compared against as _previousEvent.\n      if (currentEvent.type) {\n        return currentEvent;\n      }\n\n      // Juuust in case something goes wrong\n      try {\n        if (_shouldDropEvent(currentEvent, previousEvent)) {\n          DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n          return null;\n        }\n      } catch (_oO) {} // eslint-disable-line no-empty\n\n      return (previousEvent = currentEvent);\n    },\n  };\n}) ;\n\n/**\n * Deduplication filter.\n */\nconst dedupeIntegration = defineIntegration(_dedupeIntegration);\n\n/** only exported for tests. */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  let currentFrames = getFramesFromEvent(currentEvent);\n  let previousFrames = getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames ;\n  previousFrames = previousFrames ;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameA = previousFrames[i];\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint ;\n  previousFingerprint = previousFingerprint ;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\nexport { _shouldDropEvent, dedupeIntegration };\n//# sourceMappingURL=dedupe.js.map\n","import { parseUrl, generateSentryTraceHeader, dynamicSamplingContextToSentryBaggageHeader, isInstanceOf, BAGGAGE_HEADER_NAME } from '@sentry/utils';\nimport { getCurrentScope, getClient, getIsolationScope } from './currentScopes.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_OP } from './semanticAttributes.js';\nimport './tracing/errors.js';\nimport './debug-build.js';\nimport { hasTracingEnabled } from './utils/hasTracingEnabled.js';\nimport { getActiveSpan, spanToTraceHeader } from './utils/spanUtils.js';\nimport { SentryNonRecordingSpan } from './tracing/sentryNonRecordingSpan.js';\nimport { setHttpStatus, SPAN_STATUS_ERROR } from './tracing/spanstatus.js';\nimport { startInactiveSpan } from './tracing/trace.js';\nimport { getDynamicSamplingContextFromSpan, getDynamicSamplingContextFromClient } from './tracing/dynamicSamplingContext.js';\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction instrumentFetchRequest(\n  handlerData,\n  shouldCreateSpan,\n  shouldAttachHeaders,\n  spans,\n  spanOrigin = 'auto.http.browser',\n) {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = hasTracingEnabled() && shouldCreateSpan(handlerData.fetchData.url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const scope = getCurrentScope();\n  const client = getClient();\n\n  const { method, url } = handlerData.fetchData;\n\n  const fullUrl = getFullURL(url);\n  const host = fullUrl ? parseUrl(fullUrl).host : undefined;\n\n  const hasParent = !!getActiveSpan();\n\n  const span =\n    shouldCreateSpanResult && hasParent\n      ? startInactiveSpan({\n          name: `${method} ${url}`,\n          attributes: {\n            url,\n            type: 'fetch',\n            'http.method': method,\n            'http.url': fullUrl,\n            'server.address': host,\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',\n          },\n        })\n      : new SentryNonRecordingSpan();\n\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n\n  if (shouldAttachHeaders(handlerData.fetchData.url) && client) {\n    const request = handlerData.args[0];\n\n    // In case the user hasn't set the second argument of a fetch call we default it to `{}`.\n    handlerData.args[1] = handlerData.args[1] || {};\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = handlerData.args[1];\n\n    options.headers = addTracingHeadersToFetchRequest(\n      request,\n      client,\n      scope,\n      options,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      hasTracingEnabled() && hasParent ? span : undefined,\n    );\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers\n */\nfunction addTracingHeadersToFetchRequest(\n  request, // unknown is actually type Request but we can't export DOM types from this package,\n  client,\n  scope,\n  options\n\n,\n  span,\n) {\n  const isolationScope = getIsolationScope();\n\n  const { traceId, spanId, sampled, dsc } = {\n    ...isolationScope.getPropagationContext(),\n    ...scope.getPropagationContext(),\n  };\n\n  const sentryTraceHeader = span ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, spanId, sampled);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(\n    dsc || (span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromClient(traceId, client)),\n  );\n\n  const headers =\n    options.headers ||\n    (typeof Request !== 'undefined' && isInstanceOf(request, Request) ? (request ).headers : undefined);\n\n  if (!headers) {\n    return { 'sentry-trace': sentryTraceHeader, baggage: sentryBaggageHeader };\n  } else if (typeof Headers !== 'undefined' && isInstanceOf(headers, Headers)) {\n    const newHeaders = new Headers(headers );\n\n    newHeaders.append('sentry-trace', sentryTraceHeader);\n\n    if (sentryBaggageHeader) {\n      // If the same header is appended multiple times the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.append(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n\n    return newHeaders ;\n  } else if (Array.isArray(headers)) {\n    const newHeaders = [...headers, ['sentry-trace', sentryTraceHeader]];\n\n    if (sentryBaggageHeader) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push([BAGGAGE_HEADER_NAME, sentryBaggageHeader]);\n    }\n\n    return newHeaders ;\n  } else {\n    const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;\n    const newBaggageHeaders = [];\n\n    if (Array.isArray(existingBaggageHeader)) {\n      newBaggageHeaders.push(...existingBaggageHeader);\n    } else if (existingBaggageHeader) {\n      newBaggageHeaders.push(existingBaggageHeader);\n    }\n\n    if (sentryBaggageHeader) {\n      newBaggageHeaders.push(sentryBaggageHeader);\n    }\n\n    return {\n      ...(headers ),\n      'sentry-trace': sentryTraceHeader,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nfunction getFullURL(url) {\n  try {\n    const parsed = new URL(url);\n    return parsed.href;\n  } catch (e) {\n    return undefined;\n  }\n}\n\nfunction endSpan(span, handlerData) {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n\n    const contentLength =\n      handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n  }\n  span.end();\n}\n\nexport { addTracingHeadersToFetchRequest, instrumentFetchRequest };\n//# sourceMappingURL=fetch.js.map\n","import { withScope, captureException } from '@sentry/core';\nimport { GLOBAL_OBJ, getOriginalFunction, markFunctionWrapped, addNonEnumerableProperty, addExceptionTypeValue, addExceptionMechanism } from '@sentry/utils';\n\nconst WINDOW = GLOBAL_OBJ ;\n\nlet ignoreOnError = 0;\n\n/**\n * @hidden\n */\nfunction shouldIgnoreOnError() {\n  return ignoreOnError > 0;\n}\n\n/**\n * @hidden\n */\nfunction ignoreNextOnError() {\n  // onerror should trigger before setTimeout\n  ignoreOnError++;\n  setTimeout(() => {\n    ignoreOnError--;\n  });\n}\n\n/**\n * Instruments the given function and sends an event to Sentry every time the\n * function throws an exception.\n *\n * @param fn A function to wrap. It is generally safe to pass an unbound function, because the returned wrapper always\n * has a correct `this` context.\n * @returns The wrapped function.\n * @hidden\n */\nfunction wrap(\n  fn,\n  options\n\n = {},\n  before,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  // for future readers what this does is wrap a function and then create\n  // a bi-directional wrapping between them.\n  //\n  // example: wrapped = wrap(original);\n  //  original.__sentry_wrapped__ -> wrapped\n  //  wrapped.__sentry_original__ -> original\n\n  if (typeof fn !== 'function') {\n    return fn;\n  }\n\n  try {\n    // if we're dealing with a function that was previously wrapped, return\n    // the original wrapper.\n    const wrapper = fn.__sentry_wrapped__;\n    if (wrapper) {\n      return wrapper;\n    }\n\n    // We don't wanna wrap it twice\n    if (getOriginalFunction(fn)) {\n      return fn;\n    }\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    // Bail on wrapping and return the function as-is (defers to window.onerror).\n    return fn;\n  }\n\n  /* eslint-disable prefer-rest-params */\n  // It is important that `sentryWrapped` is not an arrow function to preserve the context of `this`\n  const sentryWrapped = function () {\n    const args = Array.prototype.slice.call(arguments);\n\n    try {\n      if (before && typeof before === 'function') {\n        before.apply(this, arguments);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      const wrappedArguments = args.map((arg) => wrap(arg, options));\n\n      // Attempt to invoke user-land function\n      // NOTE: If you are a Sentry user, and you are seeing this stack frame, it\n      //       means the sentry.javascript SDK caught an error invoking your application code. This\n      //       is expected behavior and NOT indicative of a bug with sentry.javascript.\n      return fn.apply(this, wrappedArguments);\n    } catch (ex) {\n      ignoreNextOnError();\n\n      withScope(scope => {\n        scope.addEventProcessor(event => {\n          if (options.mechanism) {\n            addExceptionTypeValue(event, undefined, undefined);\n            addExceptionMechanism(event, options.mechanism);\n          }\n\n          event.extra = {\n            ...event.extra,\n            arguments: args,\n          };\n\n          return event;\n        });\n\n        captureException(ex);\n      });\n\n      throw ex;\n    }\n  };\n  /* eslint-enable prefer-rest-params */\n\n  // Accessing some objects may throw\n  // ref: https://github.com/getsentry/sentry-javascript/issues/1168\n  try {\n    for (const property in fn) {\n      if (Object.prototype.hasOwnProperty.call(fn, property)) {\n        sentryWrapped[property] = fn[property];\n      }\n    }\n  } catch (_oO) {} // eslint-disable-line no-empty\n\n  // Signal that this function has been wrapped/filled already\n  // for both debugging and to prevent it to being wrapped/filled twice\n  markFunctionWrapped(sentryWrapped, fn);\n\n  addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);\n\n  // Restore original function name (not all browsers allow that)\n  try {\n    const descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name') ;\n    if (descriptor.configurable) {\n      Object.defineProperty(sentryWrapped, 'name', {\n        get() {\n          return fn.name;\n        },\n      });\n    }\n    // eslint-disable-next-line no-empty\n  } catch (_oO) {}\n\n  return sentryWrapped;\n}\n\nexport { WINDOW, ignoreNextOnError, shouldIgnoreOnError, wrap };\n//# sourceMappingURL=helpers.js.map\n","/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexport { DEBUG_BUILD };\n//# sourceMappingURL=debug-build.js.map\n","import { getClient } from '@sentry/core';\nimport { addExceptionMechanism, resolvedSyncPromise, isErrorEvent, isDOMError, isDOMException, addExceptionTypeValue, isError, isPlainObject, isEvent, isParameterizedString, normalizeToSize, extractExceptionKeysForMessage } from '@sentry/utils';\n\n/**\n * This function creates an exception from a JavaScript Error\n */\nfunction exceptionFromError(stackParser, ex) {\n  // Get the frames first since Opera can lose the stack if we touch anything else first\n  const frames = parseStackFrames(stackParser, ex);\n\n  const exception = {\n    type: ex && ex.name,\n    value: extractMessage(ex),\n  };\n\n  if (frames.length) {\n    exception.stacktrace = { frames };\n  }\n\n  if (exception.type === undefined && exception.value === '') {\n    exception.value = 'Unrecoverable error caught';\n  }\n\n  return exception;\n}\n\nfunction eventFromPlainObject(\n  stackParser,\n  exception,\n  syntheticException,\n  isUnhandledRejection,\n) {\n  const client = getClient();\n  const normalizeDepth = client && client.getOptions().normalizeDepth;\n\n  // If we can, we extract an exception from the object properties\n  const errorFromProp = getErrorPropertyFromObject(exception);\n\n  const extra = {\n    __serialized__: normalizeToSize(exception, normalizeDepth),\n  };\n\n  if (errorFromProp) {\n    return {\n      exception: {\n        values: [exceptionFromError(stackParser, errorFromProp)],\n      },\n      extra,\n    };\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: isEvent(exception) ? exception.constructor.name : isUnhandledRejection ? 'UnhandledRejection' : 'Error',\n          value: getNonErrorObjectExceptionValue(exception, { isUnhandledRejection }),\n        } ,\n      ],\n    },\n    extra,\n  } ;\n\n  if (syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      // event.exception.values[0] has been set above\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      event.exception.values[0].stacktrace = { frames };\n    }\n  }\n\n  return event;\n}\n\nfunction eventFromError(stackParser, ex) {\n  return {\n    exception: {\n      values: [exceptionFromError(stackParser, ex)],\n    },\n  };\n}\n\n/** Parses stack frames from an error */\nfunction parseStackFrames(\n  stackParser,\n  ex,\n) {\n  // Access and store the stacktrace property before doing ANYTHING\n  // else to it because Opera is not very good at providing it\n  // reliably in other circumstances.\n  const stacktrace = ex.stacktrace || ex.stack || '';\n\n  const skipLines = getSkipFirstStackStringLines(ex);\n  const framesToPop = getPopFirstTopFrames(ex);\n\n  try {\n    return stackParser(stacktrace, skipLines, framesToPop);\n  } catch (e) {\n    // no-empty\n  }\n\n  return [];\n}\n\n// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108\nconst reactMinifiedRegexp = /Minified React error #\\d+;/i;\n\n/**\n * Certain known React errors contain links that would be falsely\n * parsed as frames. This function check for these errors and\n * returns number of the stack string lines to skip.\n */\nfunction getSkipFirstStackStringLines(ex) {\n  if (ex && reactMinifiedRegexp.test(ex.message)) {\n    return 1;\n  }\n\n  return 0;\n}\n\n/**\n * If error has `framesToPop` property, it means that the\n * creator tells us the first x frames will be useless\n * and should be discarded. Typically error from wrapper function\n * which don't point to the actual location in the developer's code.\n *\n * Example: https://github.com/zertosh/invariant/blob/master/invariant.js#L46\n */\nfunction getPopFirstTopFrames(ex) {\n  if (typeof ex.framesToPop === 'number') {\n    return ex.framesToPop;\n  }\n\n  return 0;\n}\n\n/**\n * There are cases where stacktrace.message is an Event object\n * https://github.com/getsentry/sentry-javascript/issues/1949\n * In this specific case we try to extract stacktrace.message.error.message\n */\nfunction extractMessage(ex) {\n  const message = ex && ex.message;\n  if (!message) {\n    return 'No error message';\n  }\n  if (message.error && typeof message.error.message === 'string') {\n    return message.error.message;\n  }\n  return message;\n}\n\n/**\n * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.\n * @hidden\n */\nfunction eventFromException(\n  stackParser,\n  exception,\n  hint,\n  attachStacktrace,\n) {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromUnknownInput(stackParser, exception, syntheticException, attachStacktrace);\n  addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }\n  event.level = 'error';\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * Builds and Event from a Message\n * @hidden\n */\nfunction eventFromMessage(\n  stackParser,\n  message,\n  level = 'info',\n  hint,\n  attachStacktrace,\n) {\n  const syntheticException = (hint && hint.syntheticException) || undefined;\n  const event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n  event.level = level;\n  if (hint && hint.event_id) {\n    event.event_id = hint.event_id;\n  }\n  return resolvedSyncPromise(event);\n}\n\n/**\n * @hidden\n */\nfunction eventFromUnknownInput(\n  stackParser,\n  exception,\n  syntheticException,\n  attachStacktrace,\n  isUnhandledRejection,\n) {\n  let event;\n\n  if (isErrorEvent(exception ) && (exception ).error) {\n    // If it is an ErrorEvent with `error` property, extract it to get actual Error\n    const errorEvent = exception ;\n    return eventFromError(stackParser, errorEvent.error );\n  }\n\n  // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name\n  // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be\n  // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.\n  //\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMError\n  // https://developer.mozilla.org/en-US/docs/Web/API/DOMException\n  // https://webidl.spec.whatwg.org/#es-DOMException-specialness\n  if (isDOMError(exception) || isDOMException(exception )) {\n    const domException = exception ;\n\n    if ('stack' in (exception )) {\n      event = eventFromError(stackParser, exception );\n    } else {\n      const name = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');\n      const message = domException.message ? `${name}: ${domException.message}` : name;\n      event = eventFromString(stackParser, message, syntheticException, attachStacktrace);\n      addExceptionTypeValue(event, message);\n    }\n    if ('code' in domException) {\n      // eslint-disable-next-line deprecation/deprecation\n      event.tags = { ...event.tags, 'DOMException.code': `${domException.code}` };\n    }\n\n    return event;\n  }\n  if (isError(exception)) {\n    // we have a real Error object, do nothing\n    return eventFromError(stackParser, exception);\n  }\n  if (isPlainObject(exception) || isEvent(exception)) {\n    // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize\n    // it manually. This will allow us to group events based on top-level keys which is much better than creating a new\n    // group on any key/value change.\n    const objectException = exception ;\n    event = eventFromPlainObject(stackParser, objectException, syntheticException, isUnhandledRejection);\n    addExceptionMechanism(event, {\n      synthetic: true,\n    });\n    return event;\n  }\n\n  // If none of previous checks were valid, then it means that it's not:\n  // - an instance of DOMError\n  // - an instance of DOMException\n  // - an instance of Event\n  // - an instance of Error\n  // - a valid ErrorEvent (one with an error property)\n  // - a plain Object\n  //\n  // So bail out and capture it as a simple message:\n  event = eventFromString(stackParser, exception , syntheticException, attachStacktrace);\n  addExceptionTypeValue(event, `${exception}`, undefined);\n  addExceptionMechanism(event, {\n    synthetic: true,\n  });\n\n  return event;\n}\n\nfunction eventFromString(\n  stackParser,\n  message,\n  syntheticException,\n  attachStacktrace,\n) {\n  const event = {};\n\n  if (attachStacktrace && syntheticException) {\n    const frames = parseStackFrames(stackParser, syntheticException);\n    if (frames.length) {\n      event.exception = {\n        values: [{ value: message, stacktrace: { frames } }],\n      };\n    }\n  }\n\n  if (isParameterizedString(message)) {\n    const { __sentry_template_string__, __sentry_template_values__ } = message;\n\n    event.logentry = {\n      message: __sentry_template_string__,\n      params: __sentry_template_values__,\n    };\n    return event;\n  }\n\n  event.message = message;\n  return event;\n}\n\nfunction getNonErrorObjectExceptionValue(\n  exception,\n  { isUnhandledRejection },\n) {\n  const keys = extractExceptionKeysForMessage(exception);\n  const captureType = isUnhandledRejection ? 'promise rejection' : 'exception';\n\n  // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before\n  // We still want to try to get a decent message for these cases\n  if (isErrorEvent(exception)) {\n    return `Event \\`ErrorEvent\\` captured as ${captureType} with message \\`${exception.message}\\``;\n  }\n\n  if (isEvent(exception)) {\n    const className = getObjectClassName(exception);\n    return `Event \\`${className}\\` (type=${exception.type}) captured as ${captureType}`;\n  }\n\n  return `Object captured as ${captureType} with keys: ${keys}`;\n}\n\nfunction getObjectClassName(obj) {\n  try {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype ? prototype.constructor.name : undefined;\n  } catch (e) {\n    // ignore errors here\n  }\n}\n\n/** If a plain object has a property that is an `Error`, return this error. */\nfunction getErrorPropertyFromObject(obj) {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      const value = obj[prop];\n      if (value instanceof Error) {\n        return value;\n      }\n    }\n  }\n\n  return undefined;\n}\n\nexport { eventFromException, eventFromMessage, eventFromUnknownInput, exceptionFromError };\n//# sourceMappingURL=eventbuilder.js.map\n","import { dsnToString, createEnvelope } from '@sentry/utils';\n\n/**\n * Creates an envelope from a user feedback.\n */\nfunction createUserFeedbackEnvelope(\n  feedback,\n  {\n    metadata,\n    tunnel,\n    dsn,\n  }\n\n,\n) {\n  const headers = {\n    event_id: feedback.event_id,\n    sent_at: new Date().toISOString(),\n    ...(metadata &&\n      metadata.sdk && {\n        sdk: {\n          name: metadata.sdk.name,\n          version: metadata.sdk.version,\n        },\n      }),\n    ...(!!tunnel && !!dsn && { dsn: dsnToString(dsn) }),\n  };\n  const item = createUserFeedbackEnvelopeItem(feedback);\n\n  return createEnvelope(headers, [item]);\n}\n\nfunction createUserFeedbackEnvelopeItem(feedback) {\n  const feedbackHeaders = {\n    type: 'user_report',\n  };\n  return [feedbackHeaders, feedback];\n}\n\nexport { createUserFeedbackEnvelope };\n//# sourceMappingURL=userfeedback.js.map\n","import { BaseClient, applySdkMetadata } from '@sentry/core';\nimport { getSDKSource, logger, createClientReportEnvelope, dsnToString } from '@sentry/utils';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { eventFromException, eventFromMessage } from './eventbuilder.js';\nimport { WINDOW } from './helpers.js';\nimport { createUserFeedbackEnvelope } from './userfeedback.js';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nclass BrowserClient extends BaseClient {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n   constructor(options) {\n    const opts = {\n      // We default this to true, as it is the safer scenario\n      parentSpanIsAlwaysRootSpan: true,\n      ...options,\n    };\n    const sdkSource = WINDOW.SENTRY_SDK_SOURCE || getSDKSource();\n    applySdkMetadata(opts, 'browser', ['browser'], sdkSource);\n\n    super(opts);\n\n    if (opts.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n   eventFromException(exception, hint) {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   eventFromMessage(\n    message,\n    level = 'info',\n    hint,\n  ) {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * Sends user feedback to Sentry.\n   *\n   * @deprecated Use `captureFeedback` instead.\n   */\n   captureUserFeedback(feedback) {\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && logger.warn('SDK not enabled, will not capture user feedback.');\n      return;\n    }\n\n    const envelope = createUserFeedbackEnvelope(feedback, {\n      metadata: this.getSdkMetadata(),\n      dsn: this.getDsn(),\n      tunnel: this.getOptions().tunnel,\n    });\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   _prepareEvent(event, hint, scope) {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n   _flushOutcomes() {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      DEBUG_BUILD && logger.log('No outcomes to send');\n      return;\n    }\n\n    // This is really the only place where we want to check for a DSN and only send outcomes then\n    if (!this._dsn) {\n      DEBUG_BUILD && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('Sending outcomes:', outcomes);\n\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n  }\n}\n\nexport { BrowserClient };\n//# sourceMappingURL=client.js.map\n","/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexport { DEBUG_BUILD };\n//# sourceMappingURL=debug-build.js.map\n","const getRating = (value, thresholds) => {\n  if (value > thresholds[1]) {\n    return 'poor';\n  }\n  if (value > thresholds[0]) {\n    return 'needs-improvement';\n  }\n  return 'good';\n};\n\nconst bindReporter = (\n  callback,\n  metric,\n  thresholds,\n  reportAllChanges,\n) => {\n  let prevValue;\n  let delta;\n  return (forceReport) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue || 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          metric.rating = getRating(metric.value, thresholds);\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n\nexport { bindReporter };\n//# sourceMappingURL=bindReporter.js.map\n","import { GLOBAL_OBJ } from '@sentry/utils';\n\nconst WINDOW = GLOBAL_OBJ\n\n;\n\nexport { WINDOW };\n//# sourceMappingURL=types.js.map\n","/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Performantly generate a unique, 30-char string by combining a version\n * number, the current timestamp with a 13-digit number integer.\n * @return {string}\n */\nconst generateUniqueID = () => {\n  return `v3-${Date.now()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;\n};\n\nexport { generateUniqueID };\n//# sourceMappingURL=generateUniqueID.js.map\n","import { WINDOW } from '../../../types.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst getNavigationEntry = () => {\n  return WINDOW.performance && performance.getEntriesByType && performance.getEntriesByType('navigation')[0];\n};\n\nexport { getNavigationEntry };\n//# sourceMappingURL=getNavigationEntry.js.map\n","import { getNavigationEntry } from './getNavigationEntry.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst getActivationStart = () => {\n  const navEntry = getNavigationEntry();\n  return (navEntry && navEntry.activationStart) || 0;\n};\n\nexport { getActivationStart };\n//# sourceMappingURL=getActivationStart.js.map\n","import { WINDOW } from '../../../types.js';\nimport { generateUniqueID } from './generateUniqueID.js';\nimport { getActivationStart } from './getActivationStart.js';\nimport { getNavigationEntry } from './getNavigationEntry.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst initMetric = (name, value) => {\n  const navEntry = getNavigationEntry();\n  let navigationType = 'navigate';\n\n  if (navEntry) {\n    if ((WINDOW.document && WINDOW.document.prerendering) || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else if (WINDOW.document && WINDOW.document.wasDiscarded) {\n      navigationType = 'restore';\n    } else if (navEntry.type) {\n      navigationType = navEntry.type.replace(/_/g, '-') ;\n    }\n  }\n\n  // Use `entries` type specific for the metric.\n  const entries = [];\n\n  return {\n    name,\n    value: typeof value === 'undefined' ? -1 : value,\n    rating: 'good' , // If needed, will be updated when reported. `const` to keep the type from widening to `string`.\n    delta: 0,\n    entries,\n    id: generateUniqueID(),\n    navigationType,\n  };\n};\n\nexport { initMetric };\n//# sourceMappingURL=initMetric.js.map\n","/**\n * Takes a performance entry type and a callback function, and creates a\n * `PerformanceObserver` instance that will observe the specified entry type\n * with buffering enabled and call the callback _for each entry_.\n *\n * This function also feature-detects entry support and wraps the logic in a\n * try/catch to avoid errors in unsupporting browsers.\n */\nconst observe = (\n  type,\n  callback,\n  opts,\n) => {\n  try {\n    if (PerformanceObserver.supportedEntryTypes.includes(type)) {\n      const po = new PerformanceObserver(list => {\n        // Delay by a microtask to workaround a bug in Safari where the\n        // callback is invoked immediately, rather than in a separate task.\n        // See: https://github.com/GoogleChrome/web-vitals/issues/277\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        Promise.resolve().then(() => {\n          callback(list.getEntries() );\n        });\n      });\n      po.observe(\n        Object.assign(\n          {\n            type,\n            buffered: true,\n          },\n          opts || {},\n        ) ,\n      );\n      return po;\n    }\n  } catch (e) {\n    // Do nothing.\n  }\n  return;\n};\n\nexport { observe };\n//# sourceMappingURL=observe.js.map\n","import { WINDOW } from '../../../types.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst onHidden = (cb) => {\n  const onHiddenOrPageHide = (event) => {\n    if (event.type === 'pagehide' || (WINDOW.document && WINDOW.document.visibilityState === 'hidden')) {\n      cb(event);\n    }\n  };\n\n  if (WINDOW.document) {\n    addEventListener('visibilitychange', onHiddenOrPageHide, true);\n    // Some browsers have buggy implementations of visibilitychange,\n    // so we use pagehide in addition, just to be safe.\n    addEventListener('pagehide', onHiddenOrPageHide, true);\n  }\n};\n\nexport { onHidden };\n//# sourceMappingURL=onHidden.js.map\n","/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst runOnce = (cb) => {\n  let called = false;\n  return (arg) => {\n    if (!called) {\n      cb(arg);\n      called = true;\n    }\n  };\n};\n\nexport { runOnce };\n//# sourceMappingURL=runOnce.js.map\n","import { WINDOW } from '../../../types.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nlet firstHiddenTime = -1;\n\nconst initHiddenTime = () => {\n  // If the document is hidden when this code runs, assume it was always\n  // hidden and the page was loaded in the background, with the one exception\n  // that visibility state is always 'hidden' during prerendering, so we have\n  // to ignore that case until prerendering finishes (see: `prerenderingchange`\n  // event logic below).\n  firstHiddenTime = WINDOW.document.visibilityState === 'hidden' && !WINDOW.document.prerendering ? 0 : Infinity;\n};\n\nconst onVisibilityUpdate = (event) => {\n  // If the document is 'hidden' and no previous hidden timestamp has been\n  // set, update it based on the current event data.\n  if (WINDOW.document.visibilityState === 'hidden' && firstHiddenTime > -1) {\n    // If the event is a 'visibilitychange' event, it means the page was\n    // visible prior to this change, so the event timestamp is the first\n    // hidden time.\n    // However, if the event is not a 'visibilitychange' event, then it must\n    // be a 'prerenderingchange' event, and the fact that the document is\n    // still 'hidden' from the above check means the tab was activated\n    // in a background state and so has always been hidden.\n    firstHiddenTime = event.type === 'visibilitychange' ? event.timeStamp : 0;\n\n    // Remove all listeners now that a `firstHiddenTime` value has been set.\n    removeEventListener('visibilitychange', onVisibilityUpdate, true);\n    removeEventListener('prerenderingchange', onVisibilityUpdate, true);\n  }\n};\n\nconst addChangeListeners = () => {\n  addEventListener('visibilitychange', onVisibilityUpdate, true);\n  // IMPORTANT: when a page is prerendering, its `visibilityState` is\n  // 'hidden', so in order to account for cases where this module checks for\n  // visibility during prerendering, an additional check after prerendering\n  // completes is also required.\n  addEventListener('prerenderingchange', onVisibilityUpdate, true);\n};\n\nconst getVisibilityWatcher = () => {\n  if (WINDOW.document && firstHiddenTime < 0) {\n    // If the document is hidden when this code runs, assume it was hidden\n    // since navigation start. This isn't a perfect heuristic, but it's the\n    // best we can do until an API is available to support querying past\n    // visibilityState.\n    initHiddenTime();\n    addChangeListeners();\n  }\n  return {\n    get firstHiddenTime() {\n      return firstHiddenTime;\n    },\n  };\n};\n\nexport { getVisibilityWatcher };\n//# sourceMappingURL=getVisibilityWatcher.js.map\n","import { WINDOW } from '../../../types.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst whenActivated = (callback) => {\n  if (WINDOW.document && WINDOW.document.prerendering) {\n    addEventListener('prerenderingchange', () => callback(), true);\n  } else {\n    callback();\n  }\n};\n\nexport { whenActivated };\n//# sourceMappingURL=whenActivated.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for FCP. See https://web.dev/articles/fcp#what_is_a_good_fcp_score */\nconst FCPThresholds = [1800, 3000];\n\n/**\n * Calculates the [FCP](https://web.dev/articles/fcp) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `paint` performance entry used to determine the value. The reported\n * value is a `DOMHighResTimeStamp`.\n */\nconst onFCP = (onReport, opts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FCP');\n    let report;\n\n    const handleEntries = (entries) => {\n      (entries ).forEach(entry => {\n        if (entry.name === 'first-contentful-paint') {\n          po.disconnect();\n\n          // Only report if the page wasn't hidden prior to the first paint.\n          if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n            // The activationStart reference is used because FCP should be\n            // relative to page activation rather than navigation start if the\n            // page was prerendered. But in cases where `activationStart` occurs\n            // after the FCP, this time should be clamped at 0.\n            metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n            metric.entries.push(entry);\n            report(true);\n          }\n        }\n      });\n    };\n\n    const po = observe('paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, FCPThresholds, opts.reportAllChanges);\n    }\n  });\n};\n\nexport { FCPThresholds, onFCP };\n//# sourceMappingURL=onFCP.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { onFCP } from './onFCP.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for CLS. See https://web.dev/articles/cls#what_is_a_good_cls_score */\nconst CLSThresholds = [0.1, 0.25];\n\n/**\n * Calculates the [CLS](https://web.dev/articles/cls) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/articles/cls#layout_shift_score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nconst onCLS = (onReport, opts = {}) => {\n  // Start monitoring FCP so we can only report CLS if FCP is also reported.\n  // Note: this is done to match the current behavior of CrUX.\n  onFCP(\n    runOnce(() => {\n      const metric = initMetric('CLS', 0);\n      let report;\n\n      let sessionValue = 0;\n      let sessionEntries = [];\n\n      const handleEntries = (entries) => {\n        entries.forEach(entry => {\n          // Only count layout shifts without recent user input.\n          if (!entry.hadRecentInput) {\n            const firstSessionEntry = sessionEntries[0];\n            const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n            // If the entry occurred less than 1 second after the previous entry\n            // and less than 5 seconds after the first entry in the session,\n            // include the entry in the current session. Otherwise, start a new\n            // session.\n            if (\n              sessionValue &&\n              firstSessionEntry &&\n              lastSessionEntry &&\n              entry.startTime - lastSessionEntry.startTime < 1000 &&\n              entry.startTime - firstSessionEntry.startTime < 5000\n            ) {\n              sessionValue += entry.value;\n              sessionEntries.push(entry);\n            } else {\n              sessionValue = entry.value;\n              sessionEntries = [entry];\n            }\n          }\n        });\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (sessionValue > metric.value) {\n          metric.value = sessionValue;\n          metric.entries = sessionEntries;\n          report();\n        }\n      };\n\n      const po = observe('layout-shift', handleEntries);\n      if (po) {\n        report = bindReporter(onReport, metric, CLSThresholds, opts.reportAllChanges);\n\n        onHidden(() => {\n          handleEntries(po.takeRecords() );\n          report(true);\n        });\n\n        // Queue a task to report (if nothing else triggers a report first).\n        // This allows CLS to be reported as soon as FCP fires when\n        // `reportAllChanges` is true.\n        setTimeout(report, 0);\n      }\n    }),\n  );\n};\n\nexport { CLSThresholds, onCLS };\n//# sourceMappingURL=getCLS.js.map\n","import { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for FID. See https://web.dev/articles/fid#what_is_a_good_fid_score */\nconst FIDThresholds = [100, 300];\n\n/**\n * Calculates the [FID](https://web.dev/articles/fid) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nconst onFID = (onReport, opts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FID');\n    // eslint-disable-next-line prefer-const\n    let report;\n\n    const handleEntry = (entry) => {\n      // Only report if the page wasn't hidden prior to the first input.\n      if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n        metric.value = entry.processingStart - entry.startTime;\n        metric.entries.push(entry);\n        report(true);\n      }\n    };\n\n    const handleEntries = (entries) => {\n      (entries ).forEach(handleEntry);\n    };\n\n    const po = observe('first-input', handleEntries);\n    report = bindReporter(onReport, metric, FIDThresholds, opts.reportAllChanges);\n\n    if (po) {\n      onHidden(\n        runOnce(() => {\n          handleEntries(po.takeRecords() );\n          po.disconnect();\n        }),\n      );\n    }\n  });\n};\n\nexport { FIDThresholds, onFID };\n//# sourceMappingURL=getFID.js.map\n","import { observe } from '../observe.js';\n\nlet interactionCountEstimate = 0;\nlet minKnownInteractionId = Infinity;\nlet maxKnownInteractionId = 0;\n\nconst updateEstimate = (entries) => {\n  (entries ).forEach(e => {\n    if (e.interactionId) {\n      minKnownInteractionId = Math.min(minKnownInteractionId, e.interactionId);\n      maxKnownInteractionId = Math.max(maxKnownInteractionId, e.interactionId);\n\n      interactionCountEstimate = maxKnownInteractionId ? (maxKnownInteractionId - minKnownInteractionId) / 7 + 1 : 0;\n    }\n  });\n};\n\nlet po;\n\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nconst getInteractionCount = () => {\n  return po ? interactionCountEstimate : performance.interactionCount || 0;\n};\n\n/**\n * Feature detects native support or initializes the polyfill if needed.\n */\nconst initInteractionCountPolyfill = () => {\n  if ('interactionCount' in performance || po) return;\n\n  po = observe('event', updateEstimate, {\n    type: 'event',\n    buffered: true,\n    durationThreshold: 0,\n  } );\n};\n\nexport { getInteractionCount, initInteractionCountPolyfill };\n//# sourceMappingURL=interactionCountPolyfill.js.map\n","import { WINDOW } from '../../types.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { initInteractionCountPolyfill, getInteractionCount } from './lib/polyfills/interactionCountPolyfill.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for INP. See https://web.dev/articles/inp#what_is_a_good_inp_score */\nconst INPThresholds = [200, 500];\n\n// Used to store the interaction count after a bfcache restore, since p98\n// interaction latencies should only consider the current navigation.\nconst prevInteractionCount = 0;\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = () => {\n  return getInteractionCount() - prevInteractionCount;\n};\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n// A list of longest interactions on the page (by latency) sorted so the\n// longest one is first. The list is as most MAX_INTERACTIONS_TO_CONSIDER long.\nconst longestInteractionList = [];\n\n// A mapping of longest interactions by their interaction ID.\n// This is used for faster lookup.\nconst longestInteractionMap = {};\n\n/**\n * Takes a performance entry and adds it to the list of worst interactions\n * if its duration is long enough to make it among the worst. If the\n * entry is part of an existing interaction, it is merged and the latency\n * and entries list is updated as needed.\n */\nconst processEntry = (entry) => {\n  // The least-long of the 10 longest interactions.\n  const minLongestInteraction = longestInteractionList[longestInteractionList.length - 1];\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const existingInteraction = longestInteractionMap[entry.interactionId];\n\n  // Only process the entry if it's possibly one of the ten longest,\n  // or if it's part of an existing interaction.\n  if (\n    existingInteraction ||\n    longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n    (minLongestInteraction && entry.duration > minLongestInteraction.latency)\n  ) {\n    // If the interaction already exists, update it. Otherwise create one.\n    if (existingInteraction) {\n      existingInteraction.entries.push(entry);\n      existingInteraction.latency = Math.max(existingInteraction.latency, entry.duration);\n    } else {\n      const interaction = {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        id: entry.interactionId,\n        latency: entry.duration,\n        entries: [entry],\n      };\n      longestInteractionMap[interaction.id] = interaction;\n      longestInteractionList.push(interaction);\n    }\n\n    // Sort the entries by latency (descending) and keep only the top ten.\n    longestInteractionList.sort((a, b) => b.latency - a.latency);\n    longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER).forEach(i => {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete longestInteractionMap[i.id];\n    });\n  }\n};\n\n/**\n * Returns the estimated p98 longest interaction based on the stored\n * interaction candidates and the interaction count for the current page.\n */\nconst estimateP98LongestInteraction = () => {\n  const candidateInteractionIndex = Math.min(\n    longestInteractionList.length - 1,\n    Math.floor(getInteractionCountForNavigation() / 50),\n  );\n\n  return longestInteractionList[candidateInteractionIndex];\n};\n\n/**\n * Calculates the [INP](https://web.dev/articles/inp) value for the current\n * page and calls the `callback` function once the value is ready, along with\n * the `event` performance entries reported for that interaction. The reported\n * value is a `DOMHighResTimeStamp`.\n *\n * A custom `durationThreshold` configuration option can optionally be passed to\n * control what `event-timing` entries are considered for INP reporting. The\n * default threshold is `40`, which means INP scores of less than 40 are\n * reported as 0. Note that this will not affect your 75th percentile INP value\n * unless that value is also less than 40 (well below the recommended\n * [good](https://web.dev/articles/inp#what_is_a_good_inp_score) threshold).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** INP should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nconst onINP = (onReport, opts = {}) => {\n  whenActivated(() => {\n    // TODO(philipwalton): remove once the polyfill is no longer needed.\n    initInteractionCountPolyfill();\n\n    const metric = initMetric('INP');\n    // eslint-disable-next-line prefer-const\n    let report;\n\n    const handleEntries = (entries) => {\n      entries.forEach(entry => {\n        if (entry.interactionId) {\n          processEntry(entry);\n        }\n\n        // Entries of type `first-input` don't currently have an `interactionId`,\n        // so to consider them in INP we have to first check that an existing\n        // entry doesn't match the `duration` and `startTime`.\n        // Note that this logic assumes that `event` entries are dispatched\n        // before `first-input` entries. This is true in Chrome (the only browser\n        // that currently supports INP).\n        // TODO(philipwalton): remove once crbug.com/1325826 is fixed.\n        if (entry.entryType === 'first-input') {\n          const noMatchingEntry = !longestInteractionList.some(interaction => {\n            return interaction.entries.some(prevEntry => {\n              return entry.duration === prevEntry.duration && entry.startTime === prevEntry.startTime;\n            });\n          });\n          if (noMatchingEntry) {\n            processEntry(entry);\n          }\n        }\n      });\n\n      const inp = estimateP98LongestInteraction();\n\n      if (inp && inp.latency !== metric.value) {\n        metric.value = inp.latency;\n        metric.entries = inp.entries;\n        report();\n      }\n    };\n\n    const po = observe('event', handleEntries, {\n      // Event Timing entries have their durations rounded to the nearest 8ms,\n      // so a duration of 40ms would be any event that spans 2.5 or more frames\n      // at 60Hz. This threshold is chosen to strike a balance between usefulness\n      // and performance. Running this callback for any interaction that spans\n      // just one or two frames is likely not worth the insight that could be\n      // gained.\n      durationThreshold: opts.durationThreshold != null ? opts.durationThreshold : 40,\n    } );\n\n    report = bindReporter(onReport, metric, INPThresholds, opts.reportAllChanges);\n\n    if (po) {\n      // If browser supports interactionId (and so supports INP), also\n      // observe entries of type `first-input`. This is useful in cases\n      // where the first interaction is less than the `durationThreshold`.\n      if ('PerformanceEventTiming' in WINDOW && 'interactionId' in PerformanceEventTiming.prototype) {\n        po.observe({ type: 'first-input', buffered: true });\n      }\n\n      onHidden(() => {\n        handleEntries(po.takeRecords() );\n\n        // If the interaction count shows that there were interactions but\n        // none were captured by the PerformanceObserver, report a latency of 0.\n        if (metric.value < 0 && getInteractionCountForNavigation() > 0) {\n          metric.value = 0;\n          metric.entries = [];\n        }\n\n        report(true);\n      });\n    }\n  });\n};\n\nexport { INPThresholds, onINP };\n//# sourceMappingURL=getINP.js.map\n","import { WINDOW } from '../../types.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for LCP. See https://web.dev/articles/lcp#what_is_a_good_lcp_score */\nconst LCPThresholds = [2500, 4000];\n\nconst reportedMetricIDs = {};\n\n/**\n * Calculates the [LCP](https://web.dev/articles/lcp) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called any time a new `largest-contentful-paint`\n * performance entry is dispatched, or once the final value of the metric has\n * been determined.\n */\nconst onLCP = (onReport, opts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('LCP');\n    let report;\n\n    const handleEntries = (entries) => {\n      const lastEntry = entries[entries.length - 1] ;\n      if (lastEntry) {\n        // Only report if the page wasn't hidden prior to LCP.\n        if (lastEntry.startTime < visibilityWatcher.firstHiddenTime) {\n          // The startTime attribute returns the value of the renderTime if it is\n          // not 0, and the value of the loadTime otherwise. The activationStart\n          // reference is used because LCP should be relative to page activation\n          // rather than navigation start if the page was prerendered. But in cases\n          // where `activationStart` occurs after the LCP, this time should be\n          // clamped at 0.\n          metric.value = Math.max(lastEntry.startTime - getActivationStart(), 0);\n          metric.entries = [lastEntry];\n          report();\n        }\n      }\n    };\n\n    const po = observe('largest-contentful-paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, LCPThresholds, opts.reportAllChanges);\n\n      const stopListening = runOnce(() => {\n        if (!reportedMetricIDs[metric.id]) {\n          handleEntries(po.takeRecords() );\n          po.disconnect();\n          reportedMetricIDs[metric.id] = true;\n          report(true);\n        }\n      });\n\n      // Stop listening after input. Note: while scrolling is an input that\n      // stops LCP observation, it's unreliable since it can be programmatically\n      // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75\n      ['keydown', 'click'].forEach(type => {\n        if (WINDOW.document) {\n          // Wrap in a setTimeout so the callback is run in a separate task\n          // to avoid extending the keyboard/click handler to reduce INP impact\n          // https://github.com/GoogleChrome/web-vitals/issues/383\n          addEventListener(type, () => setTimeout(stopListening, 0), true);\n        }\n      });\n\n      onHidden(stopListening);\n    }\n  });\n};\n\nexport { LCPThresholds, onLCP };\n//# sourceMappingURL=getLCP.js.map\n","import { WINDOW } from '../../types.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getNavigationEntry } from './lib/getNavigationEntry.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for TTFB. See https://web.dev/articles/ttfb#what_is_a_good_ttfb_score */\nconst TTFBThresholds = [800, 1800];\n\n/**\n * Runs in the next task after the page is done loading and/or prerendering.\n * @param callback\n */\nconst whenReady = (callback) => {\n  if (WINDOW.document && WINDOW.document.prerendering) {\n    whenActivated(() => whenReady(callback));\n  } else if (WINDOW.document && WINDOW.document.readyState !== 'complete') {\n    addEventListener('load', () => whenReady(callback), true);\n  } else {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  }\n};\n\n/**\n * Calculates the [TTFB](https://web.dev/articles/ttfb) value for the\n * current page and calls the `callback` function once the page has loaded,\n * along with the relevant `navigation` performance entry used to determine the\n * value. The reported value is a `DOMHighResTimeStamp`.\n *\n * Note, this function waits until after the page is loaded to call `callback`\n * in order to ensure all properties of the `navigation` entry are populated.\n * This is useful if you want to report on other metrics exposed by the\n * [Navigation Timing API](https://w3c.github.io/navigation-timing/). For\n * example, the TTFB metric starts from the page's [time\n * origin](https://www.w3.org/TR/hr-time-2/#sec-time-origin), which means it\n * includes time spent on DNS lookup, connection negotiation, network latency,\n * and server processing time.\n */\nconst onTTFB = (onReport, opts = {}) => {\n  const metric = initMetric('TTFB');\n  const report = bindReporter(onReport, metric, TTFBThresholds, opts.reportAllChanges);\n\n  whenReady(() => {\n    const navEntry = getNavigationEntry();\n\n    if (navEntry) {\n      const responseStart = navEntry.responseStart;\n\n      // In some cases no value is reported by the browser (for\n      // privacy/security reasons), and in other cases (bugs) the value is\n      // negative or is larger than the current page time. Ignore these cases:\n      // https://github.com/GoogleChrome/web-vitals/issues/137\n      // https://github.com/GoogleChrome/web-vitals/issues/162\n      // https://github.com/GoogleChrome/web-vitals/issues/275\n      if (responseStart <= 0 || responseStart > performance.now()) return;\n\n      // The activationStart reference is used because TTFB should be\n      // relative to page activation rather than navigation start if the\n      // page was prerendered. But in cases where `activationStart` occurs\n      // after the first byte is received, this time should be clamped at 0.\n      metric.value = Math.max(responseStart - getActivationStart(), 0);\n\n      metric.entries = [navEntry];\n      report(true);\n    }\n  });\n};\n\nexport { TTFBThresholds, onTTFB };\n//# sourceMappingURL=onTTFB.js.map\n","import { logger, getFunctionName } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { onCLS } from './web-vitals/getCLS.js';\nimport { onFID } from './web-vitals/getFID.js';\nimport { onINP } from './web-vitals/getINP.js';\nimport { onLCP } from './web-vitals/getLCP.js';\nimport { observe } from './web-vitals/lib/observe.js';\nimport { onTTFB } from './web-vitals/onTTFB.js';\n\nconst handlers = {};\nconst instrumented = {};\n\nlet _previousCls;\nlet _previousFid;\nlet _previousLcp;\nlet _previousTtfb;\nlet _previousInp;\n\n/**\n * Add a callback that will be triggered when a CLS metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n *\n * Pass `stopOnCallback = true` to stop listening for CLS when the cleanup callback is called.\n * This will lead to the CLS being finalized and frozen.\n */\nfunction addClsInstrumentationHandler(\n  callback,\n  stopOnCallback = false,\n) {\n  return addMetricObserver('cls', callback, instrumentCls, _previousCls, stopOnCallback);\n}\n\n/**\n * Add a callback that will be triggered when a LCP metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n *\n * Pass `stopOnCallback = true` to stop listening for LCP when the cleanup callback is called.\n * This will lead to the LCP being finalized and frozen.\n */\nfunction addLcpInstrumentationHandler(\n  callback,\n  stopOnCallback = false,\n) {\n  return addMetricObserver('lcp', callback, instrumentLcp, _previousLcp, stopOnCallback);\n}\n\n/**\n * Add a callback that will be triggered when a FID metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nfunction addFidInstrumentationHandler(callback) {\n  return addMetricObserver('fid', callback, instrumentFid, _previousFid);\n}\n\n/**\n * Add a callback that will be triggered when a FID metric is available.\n */\nfunction addTtfbInstrumentationHandler(callback) {\n  return addMetricObserver('ttfb', callback, instrumentTtfb, _previousTtfb);\n}\n\n/**\n * Add a callback that will be triggered when a INP metric is available.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nfunction addInpInstrumentationHandler(\n  callback,\n) {\n  return addMetricObserver('inp', callback, instrumentInp, _previousInp);\n}\n\n/**\n * Add a callback that will be triggered when a performance observer is triggered,\n * and receives the entries of the observer.\n * Returns a cleanup callback which can be called to remove the instrumentation handler.\n */\nfunction addPerformanceInstrumentationHandler(\n  type,\n  callback,\n) {\n  addHandler(type, callback);\n\n  if (!instrumented[type]) {\n    instrumentPerformanceObserver(type);\n    instrumented[type] = true;\n  }\n\n  return getCleanupCallback(type, callback);\n}\n\n/** Trigger all handlers of a given type. */\nfunction triggerHandlers(type, data) {\n  const typeHandlers = handlers[type];\n\n  if (!typeHandlers || !typeHandlers.length) {\n    return;\n  }\n\n  for (const handler of typeHandlers) {\n    try {\n      handler(data);\n    } catch (e) {\n      DEBUG_BUILD &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\nfunction instrumentCls() {\n  return onCLS(\n    metric => {\n      triggerHandlers('cls', {\n        metric,\n      });\n      _previousCls = metric;\n    },\n    // We want the callback to be called whenever the CLS value updates.\n    // By default, the callback is only called when the tab goes to the background.\n    { reportAllChanges: true },\n  );\n}\n\nfunction instrumentFid() {\n  return onFID(metric => {\n    triggerHandlers('fid', {\n      metric,\n    });\n    _previousFid = metric;\n  });\n}\n\nfunction instrumentLcp() {\n  return onLCP(\n    metric => {\n      triggerHandlers('lcp', {\n        metric,\n      });\n      _previousLcp = metric;\n    },\n    // We want the callback to be called whenever the LCP value updates.\n    // By default, the callback is only called when the tab goes to the background.\n    { reportAllChanges: true },\n  );\n}\n\nfunction instrumentTtfb() {\n  return onTTFB(metric => {\n    triggerHandlers('ttfb', {\n      metric,\n    });\n    _previousTtfb = metric;\n  });\n}\n\nfunction instrumentInp() {\n  return onINP(metric => {\n    triggerHandlers('inp', {\n      metric,\n    });\n    _previousInp = metric;\n  });\n}\n\nfunction addMetricObserver(\n  type,\n  callback,\n  instrumentFn,\n  previousValue,\n  stopOnCallback = false,\n) {\n  addHandler(type, callback);\n\n  let stopListening;\n\n  if (!instrumented[type]) {\n    stopListening = instrumentFn();\n    instrumented[type] = true;\n  }\n\n  if (previousValue) {\n    callback({ metric: previousValue });\n  }\n\n  return getCleanupCallback(type, callback, stopOnCallback ? stopListening : undefined);\n}\n\nfunction instrumentPerformanceObserver(type) {\n  const options = {};\n\n  // Special per-type options we want to use\n  if (type === 'event') {\n    options.durationThreshold = 0;\n  }\n\n  observe(\n    type,\n    entries => {\n      triggerHandlers(type, { entries });\n    },\n    options,\n  );\n}\n\nfunction addHandler(type, handler) {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] ).push(handler);\n}\n\n// Get a callback which can be called to remove the instrumentation handler\nfunction getCleanupCallback(\n  type,\n  callback,\n  stopListening,\n) {\n  return () => {\n    if (stopListening) {\n      stopListening();\n    }\n\n    const typeHandlers = handlers[type];\n\n    if (!typeHandlers) {\n      return;\n    }\n\n    const index = typeHandlers.indexOf(callback);\n    if (index !== -1) {\n      typeHandlers.splice(index, 1);\n    }\n  };\n}\n\n/**\n * Check if a PerformanceEntry is a PerformanceEventTiming by checking for the `duration` property.\n */\nfunction isPerformanceEventTiming(entry) {\n  return 'duration' in entry;\n}\n\nexport { addClsInstrumentationHandler, addFidInstrumentationHandler, addInpInstrumentationHandler, addLcpInstrumentationHandler, addPerformanceInstrumentationHandler, addTtfbInstrumentationHandler, isPerformanceEventTiming };\n//# sourceMappingURL=instrument.js.map\n","import { spanToJSON, withActiveSpan, startInactiveSpan } from '@sentry/core';\nimport { WINDOW } from '../types.js';\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nfunction startAndEndSpan(\n  parentSpan,\n  startTimeInSeconds,\n  endTime,\n  { ...ctx },\n) {\n  const parentStartTime = spanToJSON(parentSpan).start_timestamp;\n  if (parentStartTime && parentStartTime > startTimeInSeconds) {\n    // We can only do this for SentrySpans...\n    if (typeof (parentSpan ).updateStartTime === 'function') {\n      (parentSpan ).updateStartTime(startTimeInSeconds);\n    }\n  }\n\n  // The return value only exists for tests\n  return withActiveSpan(parentSpan, () => {\n    const span = startInactiveSpan({\n      startTime: startTimeInSeconds,\n      ...ctx,\n    });\n\n    if (span) {\n      span.end(endTime);\n    }\n\n    return span;\n  });\n}\n\n/** Get the browser performance API. */\nfunction getBrowserPerformanceAPI() {\n  // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n  return WINDOW && WINDOW.addEventListener && WINDOW.performance;\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nfunction msToSec(time) {\n  return time / 1000;\n}\n\nexport { getBrowserPerformanceAPI, isMeasurementValue, msToSec, startAndEndSpan };\n//# sourceMappingURL=utils.js.map\n","import { getActiveSpan, startInactiveSpan, spanToJSON, setMeasurement, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport { browserPerformanceTimeOrigin, logger, parseUrl, htmlTreeAsString, getComponentName } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../types.js';\nimport { addPerformanceInstrumentationHandler, addClsInstrumentationHandler, addLcpInstrumentationHandler, addFidInstrumentationHandler, addTtfbInstrumentationHandler } from './instrument.js';\nimport { getBrowserPerformanceAPI, msToSec, startAndEndSpan, isMeasurementValue } from './utils.js';\nimport { getNavigationEntry } from './web-vitals/lib/getNavigationEntry.js';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher.js';\n\n/* eslint-disable max-lines */\n\nconst MAX_INT_AS_BYTES = 2147483647;\n\nlet _performanceCursor = 0;\n\nlet _measurements = {};\nlet _lcpEntry;\nlet _clsEntry;\n\n/**\n * Start tracking web vitals.\n * The callback returned by this function can be used to stop tracking & ensure all measurements are final & captured.\n *\n * @returns A function that forces web vitals collection\n */\nfunction startTrackingWebVitals() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    // @ts-expect-error we want to make sure all of these are available, even if TS is sure they are\n    if (performance.mark) {\n      WINDOW.performance.mark('sentry-tracing-init');\n    }\n    const fidCallback = _trackFID();\n    const clsCallback = _trackCLS();\n    const lcpCallback = _trackLCP();\n    const ttfbCallback = _trackTtfb();\n\n    return () => {\n      fidCallback();\n      clsCallback();\n      lcpCallback();\n      ttfbCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\n/**\n * Start tracking long tasks.\n */\nfunction startTrackingLongTasks() {\n  addPerformanceInstrumentationHandler('longtask', ({ entries }) => {\n    for (const entry of entries) {\n      if (!getActiveSpan()) {\n        return;\n      }\n      const startTime = msToSec((browserPerformanceTimeOrigin ) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      const span = startInactiveSpan({\n        name: 'Main UI thread blocked',\n        op: 'ui.long-task',\n        startTime,\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n        },\n      });\n      if (span) {\n        span.end(startTime + duration);\n      }\n    }\n  });\n}\n\n/**\n * Start tracking long animation frames.\n */\nfunction startTrackingLongAnimationFrames() {\n  // NOTE: the current web-vitals version (3.5.2) does not support long-animation-frame, so\n  // we directly observe `long-animation-frame` events instead of through the web-vitals\n  // `observe` helper function.\n  const observer = new PerformanceObserver(list => {\n    for (const entry of list.getEntries() ) {\n      if (!getActiveSpan()) {\n        return;\n      }\n      if (!entry.scripts[0]) {\n        return;\n      }\n\n      const startTime = msToSec((browserPerformanceTimeOrigin ) + entry.startTime);\n      const duration = msToSec(entry.duration);\n\n      const attributes = {\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n      };\n      const initialScript = entry.scripts[0];\n      if (initialScript) {\n        const { invoker, invokerType, sourceURL, sourceFunctionName, sourceCharPosition } = initialScript;\n        attributes['browser.script.invoker'] = invoker;\n        attributes['browser.script.invoker_type'] = invokerType;\n        if (sourceURL) {\n          attributes['code.filepath'] = sourceURL;\n        }\n        if (sourceFunctionName) {\n          attributes['code.function'] = sourceFunctionName;\n        }\n        if (sourceCharPosition !== -1) {\n          attributes['browser.script.source_char_position'] = sourceCharPosition;\n        }\n      }\n\n      const span = startInactiveSpan({\n        name: 'Main UI thread blocked',\n        op: 'ui.long-animation-frame',\n        startTime,\n        attributes,\n      });\n      if (span) {\n        span.end(startTime + duration);\n      }\n    }\n  });\n\n  observer.observe({ type: 'long-animation-frame', buffered: true });\n}\n\n/**\n * Start tracking interaction events.\n */\nfunction startTrackingInteractions() {\n  addPerformanceInstrumentationHandler('event', ({ entries }) => {\n    for (const entry of entries) {\n      if (!getActiveSpan()) {\n        return;\n      }\n\n      if (entry.name === 'click') {\n        const startTime = msToSec((browserPerformanceTimeOrigin ) + entry.startTime);\n        const duration = msToSec(entry.duration);\n\n        const spanOptions = {\n          name: htmlTreeAsString(entry.target),\n          op: `ui.interaction.${entry.name}`,\n          startTime: startTime,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n          },\n        };\n\n        const componentName = getComponentName(entry.target);\n        if (componentName) {\n          spanOptions.attributes['ui.component_name'] = componentName;\n        }\n\n        const span = startInactiveSpan(spanOptions);\n        if (span) {\n          span.end(startTime + duration);\n        }\n      }\n    }\n  });\n}\n\n/** Starts tracking the Cumulative Layout Shift on the current page. */\nfunction _trackCLS() {\n  return addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n    _measurements['cls'] = { value: metric.value, unit: '' };\n    _clsEntry = entry ;\n  }, true);\n}\n\n/** Starts tracking the Largest Contentful Paint on the current page. */\nfunction _trackLCP() {\n  return addLcpInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n    _measurements['lcp'] = { value: metric.value, unit: 'millisecond' };\n    _lcpEntry = entry ;\n  }, true);\n}\n\n/** Starts tracking the First Input Delay on the current page. */\nfunction _trackFID() {\n  return addFidInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin );\n    const startTime = msToSec(entry.startTime);\n    DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n    _measurements['fid'] = { value: metric.value, unit: 'millisecond' };\n    _measurements['mark.fid'] = { value: timeOrigin + startTime, unit: 'second' };\n  });\n}\n\nfunction _trackTtfb() {\n  return addTtfbInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n\n    DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n    _measurements['ttfb'] = { value: metric.value, unit: 'millisecond' };\n  });\n}\n\n/** Add performance related spans to a transaction */\nfunction addPerformanceEntries(span) {\n  const performance = getBrowserPerformanceAPI();\n  if (!performance || !WINDOW.performance.getEntries || !browserPerformanceTimeOrigin) {\n    // Gatekeeper if performance API not available\n    return;\n  }\n\n  DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n  const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n  const performanceEntries = performance.getEntries();\n\n  const { op, start_timestamp: transactionStartTime } = spanToJSON(span);\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  performanceEntries.slice(_performanceCursor).forEach((entry) => {\n    const startTime = msToSec(entry.startTime);\n    const duration = msToSec(entry.duration);\n\n    if (op === 'navigation' && transactionStartTime && timeOrigin + startTime < transactionStartTime) {\n      return;\n    }\n\n    switch (entry.entryType) {\n      case 'navigation': {\n        _addNavigationSpans(span, entry, timeOrigin);\n        break;\n      }\n      case 'mark':\n      case 'paint':\n      case 'measure': {\n        _addMeasureSpans(span, entry, startTime, duration, timeOrigin);\n\n        // capture web vitals\n        const firstHidden = getVisibilityWatcher();\n        // Only report if the page wasn't hidden prior to the web vital.\n        const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n        if (entry.name === 'first-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n          _measurements['fp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        if (entry.name === 'first-contentful-paint' && shouldRecord) {\n          DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n          _measurements['fcp'] = { value: entry.startTime, unit: 'millisecond' };\n        }\n        break;\n      }\n      case 'resource': {\n        _addResourceSpans(span, entry, entry.name , startTime, duration, timeOrigin);\n        break;\n      }\n      // Ignore other entry types.\n    }\n  });\n\n  _performanceCursor = Math.max(performanceEntries.length - 1, 0);\n\n  _trackNavigator(span);\n\n  // Measurements are only available for pageload transactions\n  if (op === 'pageload') {\n    _addTtfbRequestTimeToMeasurements(_measurements);\n\n    ['fcp', 'fp', 'lcp'].forEach(name => {\n      const measurement = _measurements[name];\n      if (!measurement || !transactionStartTime || timeOrigin >= transactionStartTime) {\n        return;\n      }\n      // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n      // Unfortunately, timeOrigin is not captured within the span span data, so these web vitals will need\n      // to be adjusted to be relative to span.startTimestamp.\n      const oldValue = measurement.value;\n      const measurementTimestamp = timeOrigin + msToSec(oldValue);\n\n      // normalizedValue should be in milliseconds\n      const normalizedValue = Math.abs((measurementTimestamp - transactionStartTime) * 1000);\n      const delta = normalizedValue - oldValue;\n\n      DEBUG_BUILD && logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n      measurement.value = normalizedValue;\n    });\n\n    const fidMark = _measurements['mark.fid'];\n    if (fidMark && _measurements['fid']) {\n      // create span for FID\n      startAndEndSpan(span, fidMark.value, fidMark.value + msToSec(_measurements['fid'].value), {\n        name: 'first input delay',\n        op: 'ui.action',\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n        },\n      });\n\n      // Delete mark.fid as we don't want it to be part of final payload\n      delete _measurements['mark.fid'];\n    }\n\n    // If FCP is not recorded we should not record the cls value\n    // according to the new definition of CLS.\n    if (!('fcp' in _measurements)) {\n      delete _measurements.cls;\n    }\n\n    Object.entries(_measurements).forEach(([measurementName, measurement]) => {\n      setMeasurement(measurementName, measurement.value, measurement.unit);\n    });\n\n    _tagMetricInfo(span);\n  }\n\n  _lcpEntry = undefined;\n  _clsEntry = undefined;\n  _measurements = {};\n}\n\n/** Create measure related spans */\nfunction _addMeasureSpans(\n  span,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry,\n  startTime,\n  duration,\n  timeOrigin,\n) {\n  const navEntry = getNavigationEntry();\n  const requestTime = msToSec(navEntry ? navEntry.requestStart : 0);\n  // Because performance.measure accepts arbitrary timestamps it can produce\n  // spans that happen before the browser even makes a request for the page.\n  //\n  // An example of this is the automatically generated Next.js-before-hydration\n  // spans created by the Next.js framework.\n  //\n  // To prevent this we will pin the start timestamp to the request start time\n  // This does make duration inaccruate, so if this does happen, we will add\n  // an attribute to the span\n  const measureStartTimestamp = timeOrigin + Math.max(startTime, requestTime);\n  const startTimeStamp = timeOrigin + startTime;\n  const measureEndTimestamp = startTimeStamp + duration;\n\n  const attributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.resource.browser.metrics',\n  };\n\n  if (measureStartTimestamp !== startTimeStamp) {\n    attributes['sentry.browser.measure_happened_before_request'] = true;\n    attributes['sentry.browser.measure_start_time'] = measureStartTimestamp;\n  }\n\n  startAndEndSpan(span, measureStartTimestamp, measureEndTimestamp, {\n    name: entry.name ,\n    op: entry.entryType ,\n    attributes,\n  });\n\n  return measureStartTimestamp;\n}\n\n/** Instrument navigation entries */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addNavigationSpans(span, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    _addPerformanceNavigationTiming(span, entry, event, timeOrigin);\n  });\n  _addPerformanceNavigationTiming(span, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  _addPerformanceNavigationTiming(span, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  _addPerformanceNavigationTiming(span, entry, 'domainLookup', timeOrigin, 'DNS');\n  _addRequest(span, entry, timeOrigin);\n}\n\n/** Create performance navigation related spans */\nfunction _addPerformanceNavigationTiming(\n  span,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  entry,\n  event,\n  timeOrigin,\n  name,\n  eventEnd,\n) {\n  const end = eventEnd ? (entry[eventEnd] ) : (entry[`${event}End`] );\n  const start = entry[`${event}Start`] ;\n  if (!start || !end) {\n    return;\n  }\n  startAndEndSpan(span, timeOrigin + msToSec(start), timeOrigin + msToSec(end), {\n    op: 'browser',\n    name: name || event,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n    },\n  });\n}\n\n/** Create request and response related spans */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _addRequest(span, entry, timeOrigin) {\n  const requestStartTimestamp = timeOrigin + msToSec(entry.requestStart );\n  const responseEndTimestamp = timeOrigin + msToSec(entry.responseEnd );\n  const responseStartTimestamp = timeOrigin + msToSec(entry.responseStart );\n  if (entry.responseEnd) {\n    // It is possible that we are collecting these metrics when the page hasn't finished loading yet, for example when the HTML slowly streams in.\n    // In this case, ie. when the document request hasn't finished yet, `entry.responseEnd` will be 0.\n    // In order not to produce faulty spans, where the end timestamp is before the start timestamp, we will only collect\n    // these spans when the responseEnd value is available. The backend (Relay) would drop the entire span if it contained faulty spans.\n    startAndEndSpan(span, requestStartTimestamp, responseEndTimestamp, {\n      op: 'browser',\n      name: 'request',\n      attributes: {\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n      },\n    });\n\n    startAndEndSpan(span, responseStartTimestamp, responseEndTimestamp, {\n      op: 'browser',\n      name: 'response',\n      attributes: {\n        [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.metrics',\n      },\n    });\n  }\n}\n\n/** Create resource-related spans */\nfunction _addResourceSpans(\n  span,\n  entry,\n  resourceUrl,\n  startTime,\n  duration,\n  timeOrigin,\n) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const parsedUrl = parseUrl(resourceUrl);\n\n  const attributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.resource.browser.metrics',\n  };\n  setResourceEntrySizeData(attributes, entry, 'transferSize', 'http.response_transfer_size');\n  setResourceEntrySizeData(attributes, entry, 'encodedBodySize', 'http.response_content_length');\n  setResourceEntrySizeData(attributes, entry, 'decodedBodySize', 'http.decoded_response_content_length');\n\n  if ('renderBlockingStatus' in entry) {\n    attributes['resource.render_blocking_status'] = entry.renderBlockingStatus;\n  }\n  if (parsedUrl.protocol) {\n    attributes['url.scheme'] = parsedUrl.protocol.split(':').pop(); // the protocol returned by parseUrl includes a :, but OTEL spec does not, so we remove it.\n  }\n\n  if (parsedUrl.host) {\n    attributes['server.address'] = parsedUrl.host;\n  }\n\n  attributes['url.same_origin'] = resourceUrl.includes(WINDOW.location.origin);\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  startAndEndSpan(span, startTimestamp, endTimestamp, {\n    name: resourceUrl.replace(WINDOW.location.origin, ''),\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource.other',\n    attributes,\n  });\n}\n\n/**\n * Capture the information of the user agent.\n */\nfunction _trackNavigator(span) {\n  const navigator = WINDOW.navigator ;\n  if (!navigator) {\n    return;\n  }\n\n  // track network connectivity\n  const connection = navigator.connection;\n  if (connection) {\n    if (connection.effectiveType) {\n      span.setAttribute('effectiveConnectionType', connection.effectiveType);\n    }\n\n    if (connection.type) {\n      span.setAttribute('connectionType', connection.type);\n    }\n\n    if (isMeasurementValue(connection.rtt)) {\n      _measurements['connection.rtt'] = { value: connection.rtt, unit: 'millisecond' };\n    }\n  }\n\n  if (isMeasurementValue(navigator.deviceMemory)) {\n    span.setAttribute('deviceMemory', `${navigator.deviceMemory} GB`);\n  }\n\n  if (isMeasurementValue(navigator.hardwareConcurrency)) {\n    span.setAttribute('hardwareConcurrency', String(navigator.hardwareConcurrency));\n  }\n}\n\n/** Add LCP / CLS data to span to allow debugging */\nfunction _tagMetricInfo(span) {\n  if (_lcpEntry) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (_lcpEntry.element) {\n      span.setAttribute('lcp.element', htmlTreeAsString(_lcpEntry.element));\n    }\n\n    if (_lcpEntry.id) {\n      span.setAttribute('lcp.id', _lcpEntry.id);\n    }\n\n    if (_lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      span.setAttribute('lcp.url', _lcpEntry.url.trim().slice(0, 200));\n    }\n\n    span.setAttribute('lcp.size', _lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (_clsEntry && _clsEntry.sources) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    _clsEntry.sources.forEach((source, index) =>\n      span.setAttribute(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n\nfunction setResourceEntrySizeData(\n  attributes,\n  entry,\n  key,\n  dataKey,\n) {\n  const entryVal = entry[key];\n  if (entryVal != null && entryVal < MAX_INT_AS_BYTES) {\n    attributes[dataKey] = entryVal;\n  }\n}\n\n/**\n * Add ttfb request time information to measurements.\n *\n * ttfb information is added via vendored web vitals library.\n */\nfunction _addTtfbRequestTimeToMeasurements(_measurements) {\n  const navEntry = getNavigationEntry();\n  if (!navEntry) {\n    return;\n  }\n\n  const { responseStart, requestStart } = navEntry;\n\n  if (requestStart <= responseStart) {\n    DEBUG_BUILD && logger.log('[Measurements] Adding TTFB Request Time');\n    _measurements['ttfb.requestTime'] = {\n      value: responseStart - requestStart,\n      unit: 'millisecond',\n    };\n  }\n}\n\nexport { _addMeasureSpans, _addResourceSpans, addPerformanceEntries, startTrackingInteractions, startTrackingLongAnimationFrames, startTrackingLongTasks, startTrackingWebVitals };\n//# sourceMappingURL=browserMetrics.js.map\n","import { addHandler, maybeInstrument, triggerHandlers, fill, addNonEnumerableProperty, uuid4 } from '@sentry/utils';\nimport { WINDOW } from '../types.js';\n\nconst DEBOUNCE_DURATION = 1000;\n\nlet debounceTimerID;\nlet lastCapturedEventType;\nlet lastCapturedEventTargetId;\n\n/**\n * Add an instrumentation handler for when a click or a keypress happens.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addClickKeypressInstrumentationHandler(handler) {\n  const type = 'dom';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentDOM);\n}\n\n/** Exported for tests only. */\nfunction instrumentDOM() {\n  if (!WINDOW.document) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    const proto = (WINDOW )[target] && (WINDOW )[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener) {\n      return function (\n\n        type,\n        listener,\n        options,\n      ) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this ;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount++;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener) {\n        return function (\n\n          type,\n          listener,\n          options,\n        ) {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this ;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount--;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\n/**\n * Check whether the event is similar to the last captured one. For example, two click events on the same button.\n */\nfunction isSimilarToLastCapturedEvent(event) {\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (event.type !== lastCapturedEventType) {\n    return false;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (!event.target || (event.target )._sentryId !== lastCapturedEventTargetId) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return true;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(eventType, target) {\n  // We are only interested in filtering `keypress` events for now.\n  if (eventType !== 'keypress') {\n    return false;\n  }\n\n  if (!target || !target.tagName) {\n    return true;\n  }\n\n  // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n  // e.g.tabbing through elements, hotkeys, etc.\n  if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n */\nfunction makeDOMEventHandler(\n  handler,\n  globalListener = false,\n) {\n  return (event) => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || event['_sentryCaptured']) {\n      return;\n    }\n\n    const target = getEventTarget(event);\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event.type, target)) {\n      return;\n    }\n\n    // Mark event as \"seen\"\n    addNonEnumerableProperty(event, '_sentryCaptured', true);\n\n    if (target && !target._sentryId) {\n      // Add UUID to event target so we can identify if\n      addNonEnumerableProperty(target, '_sentryId', uuid4());\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no last captured event, it means that we can safely capture the new event and store it for future comparisons.\n    // If there is a last captured event, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    if (!isSimilarToLastCapturedEvent(event)) {\n      const handlerData = { event, name, global: globalListener };\n      handler(handlerData);\n      lastCapturedEventType = event.type;\n      lastCapturedEventTargetId = target ? target._sentryId : undefined;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      lastCapturedEventTargetId = undefined;\n      lastCapturedEventType = undefined;\n    }, DEBOUNCE_DURATION);\n  };\n}\n\nfunction getEventTarget(event) {\n  try {\n    return event.target ;\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n    return null;\n  }\n}\n\nexport { addClickKeypressInstrumentationHandler, instrumentDOM };\n//# sourceMappingURL=dom.js.map\n","import { addHandler, maybeInstrument, supportsHistory, triggerHandlers, fill } from '@sentry/utils';\nimport { WINDOW } from '../types.js';\n\nlet lastHref;\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addHistoryInstrumentationHandler(handler) {\n  const type = 'history';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentHistory);\n}\n\nfunction instrumentHistory() {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function ( ...args) {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    const handlerData = { from, to };\n    triggerHandlers('history', handlerData);\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  function historyReplacementFunction(originalHistoryFunction) {\n    return function ( ...args) {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        const handlerData = { from, to };\n        triggerHandlers('history', handlerData);\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n\nexport { addHistoryInstrumentationHandler };\n//# sourceMappingURL=history.js.map\n","import { isNativeFunction, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { WINDOW } from './types.js';\n\n/**\n * We generally want to use window.fetch / window.setTimeout.\n * However, in some cases this may be wrapped (e.g. by Zone.js for Angular),\n * so we try to get an unpatched version of this from a sandboxed iframe.\n */\n\nconst cachedImplementations = {};\n\n/**\n * Get the native implementation of a browser function.\n *\n * This can be used to ensure we get an unwrapped version of a function, in cases where a wrapped function can lead to problems.\n *\n * The following methods can be retrieved:\n * - `setTimeout`: This can be wrapped by e.g. Angular, causing change detection to be triggered.\n * - `fetch`: This can be wrapped by e.g. ad-blockers, causing an infinite loop when a request is blocked.\n */\nfunction getNativeImplementation(\n  name,\n) {\n  const cached = cachedImplementations[name];\n  if (cached) {\n    return cached;\n  }\n\n  let impl = WINDOW[name] ;\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFunction(impl)) {\n    return (cachedImplementations[name] = impl.bind(WINDOW) );\n  }\n\n  const document = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow && contentWindow[name]) {\n        impl = contentWindow[name] ;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      // Could not create sandbox iframe, just use window.xxx\n      DEBUG_BUILD && logger.warn(`Could not create sandbox iframe for ${name} check, bailing to window.${name}: `, e);\n    }\n  }\n\n  // Sanity check: This _should_ not happen, but if it does, we just skip caching...\n  // This can happen e.g. in tests where fetch may not be available in the env, or similar.\n  if (!impl) {\n    return impl;\n  }\n\n  return (cachedImplementations[name] = impl.bind(WINDOW) );\n}\n\n/** Clear a cached implementation. */\nfunction clearCachedImplementation(name) {\n  cachedImplementations[name] = undefined;\n}\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nfunction fetch(...rest) {\n  return getNativeImplementation('fetch')(...rest);\n}\n\n/**\n * Get an unwrapped `setTimeout` method.\n * This ensures that even if e.g. Angular wraps `setTimeout`, we get the native implementation,\n * avoiding triggering change detection.\n */\nfunction setTimeout(...rest) {\n  return getNativeImplementation('setTimeout')(...rest);\n}\n\nexport { clearCachedImplementation, fetch, getNativeImplementation, setTimeout };\n//# sourceMappingURL=getNativeImplementation.js.map\n","import { addHandler, maybeInstrument, fill, timestampInSeconds, isString, triggerHandlers } from '@sentry/utils';\nimport { WINDOW } from '../types.js';\n\nconst SENTRY_XHR_DATA_KEY = '__sentry_xhr_v3__';\n\n/**\n * Add an instrumentation handler for when an XHR request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addXhrInstrumentationHandler(handler) {\n  const type = 'xhr';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentXHR);\n}\n\n/** Exported only for tests. */\nfunction instrumentXHR() {\n  if (!(WINDOW ).XMLHttpRequest) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen) {\n    return function ( ...args) {\n      const startTimestamp = timestampInSeconds() * 1000;\n\n      // open() should always be called with two or more arguments\n      // But to be on the safe side, we actually validate this and bail out if we don't have a method & url\n      const method = isString(args[0]) ? args[0].toUpperCase() : undefined;\n      const url = parseUrl(args[1]);\n\n      if (!method || !url) {\n        return originalOpen.apply(this, args);\n      }\n\n      this[SENTRY_XHR_DATA_KEY] = {\n        method,\n        url,\n        request_headers: {},\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      if (method === 'POST' && url.match(/sentry_key/)) {\n        this.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = () => {\n        // For whatever reason, this is not the same instance here as from the outer method\n        const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n        if (!xhrInfo) {\n          return;\n        }\n\n        if (this.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = this.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          const handlerData = {\n            endTimestamp: timestampInSeconds() * 1000,\n            startTimestamp,\n            xhr: this,\n          };\n          triggerHandlers('xhr', handlerData);\n        }\n      };\n\n      if ('onreadystatechange' in this && typeof this.onreadystatechange === 'function') {\n        fill(this, 'onreadystatechange', function (original) {\n          return function ( ...readyStateArgs) {\n            onreadystatechangeHandler();\n            return original.apply(this, readyStateArgs);\n          };\n        });\n      } else {\n        this.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      // Intercepting `setRequestHeader` to access the request headers of XHR instance.\n      // This will only work for user/library defined headers, not for the default/browser-assigned headers.\n      // Request cookies are also unavailable for XHR, as `Cookie` header can't be defined by `setRequestHeader`.\n      fill(this, 'setRequestHeader', function (original) {\n        return function ( ...setRequestHeaderArgs) {\n          const [header, value] = setRequestHeaderArgs;\n\n          const xhrInfo = this[SENTRY_XHR_DATA_KEY];\n\n          if (xhrInfo && isString(header) && isString(value)) {\n            xhrInfo.request_headers[header.toLowerCase()] = value;\n          }\n\n          return original.apply(this, setRequestHeaderArgs);\n        };\n      });\n\n      return originalOpen.apply(this, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend) {\n    return function ( ...args) {\n      const sentryXhrData = this[SENTRY_XHR_DATA_KEY];\n\n      if (!sentryXhrData) {\n        return originalSend.apply(this, args);\n      }\n\n      if (args[0] !== undefined) {\n        sentryXhrData.body = args[0];\n      }\n\n      const handlerData = {\n        startTimestamp: timestampInSeconds() * 1000,\n        xhr: this,\n      };\n      triggerHandlers('xhr', handlerData);\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nfunction parseUrl(url) {\n  if (isString(url)) {\n    return url;\n  }\n\n  try {\n    // url can be a string or URL\n    // but since URL is not available in IE11, we do not check for it,\n    // but simply assume it is an URL and return `toString()` from it (which returns the full URL)\n    // If that fails, we just return undefined\n    return (url ).toString();\n  } catch (e2) {} // eslint-disable-line no-empty\n\n  return undefined;\n}\n\nexport { SENTRY_XHR_DATA_KEY, addXhrInstrumentationHandler, instrumentXHR };\n//# sourceMappingURL=xhr.js.map\n","import { getClient, getCurrentScope, getActiveSpan, getRootSpan, spanToJSON, SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, startInactiveSpan, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE } from '@sentry/core';\nimport { browserPerformanceTimeOrigin, htmlTreeAsString, dropUndefinedKeys } from '@sentry/utils';\nimport { WINDOW } from '../types.js';\nimport { addInpInstrumentationHandler, addPerformanceInstrumentationHandler, isPerformanceEventTiming } from './instrument.js';\nimport { getBrowserPerformanceAPI, msToSec } from './utils.js';\n\nconst LAST_INTERACTIONS = [];\nconst INTERACTIONS_SPAN_MAP = new Map();\n\n/**\n * Start tracking INP webvital events.\n */\nfunction startTrackingINP() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    const inpCallback = _trackINP();\n\n    return () => {\n      inpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\nconst INP_ENTRY_MAP = {\n  click: 'click',\n  pointerdown: 'click',\n  pointerup: 'click',\n  mousedown: 'click',\n  mouseup: 'click',\n  touchstart: 'click',\n  touchend: 'click',\n  mouseover: 'hover',\n  mouseout: 'hover',\n  mouseenter: 'hover',\n  mouseleave: 'hover',\n  pointerover: 'hover',\n  pointerout: 'hover',\n  pointerenter: 'hover',\n  pointerleave: 'hover',\n  dragstart: 'drag',\n  dragend: 'drag',\n  drag: 'drag',\n  dragenter: 'drag',\n  dragleave: 'drag',\n  dragover: 'drag',\n  drop: 'drag',\n  keydown: 'press',\n  keyup: 'press',\n  keypress: 'press',\n  input: 'press',\n};\n\n/** Starts tracking the Interaction to Next Paint on the current page. */\nfunction _trackINP() {\n  return addInpInstrumentationHandler(({ metric }) => {\n    const client = getClient();\n    if (!client || metric.value == undefined) {\n      return;\n    }\n\n    const entry = metric.entries.find(entry => entry.duration === metric.value && INP_ENTRY_MAP[entry.name]);\n\n    if (!entry) {\n      return;\n    }\n\n    const { interactionId } = entry;\n    const interactionType = INP_ENTRY_MAP[entry.name];\n\n    const options = client.getOptions();\n    /** Build the INP span, create an envelope from the span, and then send the envelope */\n    const startTime = msToSec((browserPerformanceTimeOrigin ) + entry.startTime);\n    const duration = msToSec(metric.value);\n    const scope = getCurrentScope();\n    const activeSpan = getActiveSpan();\n    const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n\n    // We first try to lookup the span from our INTERACTIONS_SPAN_MAP,\n    // where we cache the route per interactionId\n    const cachedSpan = interactionId != null ? INTERACTIONS_SPAN_MAP.get(interactionId) : undefined;\n\n    const spanToUse = cachedSpan || rootSpan;\n\n    // Else, we try to use the active span.\n    // Finally, we fall back to look at the transactionName on the scope\n    const routeName = spanToUse ? spanToJSON(spanToUse).description : scope.getScopeData().transactionName;\n\n    const user = scope.getUser();\n\n    // We need to get the replay, user, and activeTransaction from the current scope\n    // so that we can associate replay id, profile id, and a user display to the span\n    const replay = client.getIntegrationByName('Replay');\n\n    const replayId = replay && replay.getReplayId();\n\n    const userDisplay = user !== undefined ? user.email || user.id || user.ip_address : undefined;\n    let profileId = undefined;\n    try {\n      // @ts-expect-error skip optional chaining to save bundle size with try catch\n      profileId = scope.getScopeData().contexts.profile.profile_id;\n    } catch (e) {\n      // do nothing\n    }\n\n    const name = htmlTreeAsString(entry.target);\n    const attributes = dropUndefinedKeys({\n      release: options.release,\n      environment: options.environment,\n      transaction: routeName,\n      [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: metric.value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.inp',\n      user: userDisplay || undefined,\n      profile_id: profileId || undefined,\n      replay_id: replayId || undefined,\n      // INP score calculation in the sentry backend relies on the user agent\n      // to account for different INP values being reported from different browsers\n      'user_agent.original': WINDOW.navigator && WINDOW.navigator.userAgent,\n    });\n\n    const span = startInactiveSpan({\n      name,\n      op: `ui.interaction.${interactionType}`,\n      attributes,\n      startTime: startTime,\n      experimental: {\n        standalone: true,\n      },\n    });\n\n    span.addEvent('inp', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: 'millisecond',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: metric.value,\n    });\n\n    span.end(startTime + duration);\n  });\n}\n\n/**\n * Register a listener to cache route information for INP interactions.\n * TODO(v9): `latestRoute` no longer needs to be passed in and will be removed in v9.\n */\nfunction registerInpInteractionListener(_latestRoute) {\n  const handleEntries = ({ entries }) => {\n    const activeSpan = getActiveSpan();\n    const activeRootSpan = activeSpan && getRootSpan(activeSpan);\n\n    entries.forEach(entry => {\n      if (!isPerformanceEventTiming(entry) || !activeRootSpan) {\n        return;\n      }\n\n      const interactionId = entry.interactionId;\n      if (interactionId == null) {\n        return;\n      }\n\n      // If the interaction was already recorded before, nothing more to do\n      if (INTERACTIONS_SPAN_MAP.has(interactionId)) {\n        return;\n      }\n\n      // We keep max. 10 interactions in the list, then remove the oldest one & clean up\n      if (LAST_INTERACTIONS.length > 10) {\n        const last = LAST_INTERACTIONS.shift() ;\n        INTERACTIONS_SPAN_MAP.delete(last);\n      }\n\n      // We add the interaction to the list of recorded interactions\n      // and store the span for this interaction\n      LAST_INTERACTIONS.push(interactionId);\n      INTERACTIONS_SPAN_MAP.set(interactionId, activeRootSpan);\n    });\n  };\n\n  addPerformanceInstrumentationHandler('event', handleEntries);\n  addPerformanceInstrumentationHandler('first-input', handleEntries);\n}\n\nexport { registerInpInteractionListener, startTrackingINP };\n//# sourceMappingURL=inp.js.map\n","import { getNativeImplementation, clearCachedImplementation } from '@sentry-internal/browser-utils';\nimport { createTransport } from '@sentry/core';\nimport { rejectedSyncPromise } from '@sentry/utils';\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nfunction makeFetchTransport(\n  options,\n  nativeFetch = getNativeImplementation('fetch'),\n) {\n  let pendingBodySize = 0;\n  let pendingCount = 0;\n\n  function makeRequest(request) {\n    const requestSize = request.body.length;\n    pendingBodySize += requestSize;\n    pendingCount++;\n\n    const requestOptions = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      headers: options.headers,\n      // Outgoing requests are usually cancelled when navigating to a different page, causing a \"TypeError: Failed to\n      // fetch\" error and sending a \"network_error\" client-outcome - in Chrome, the request status shows \"(cancelled)\".\n      // The `keepalive` flag keeps outgoing requests alive, even when switching pages. We want this since we're\n      // frequently sending events right before the user is switching pages (eg. whenfinishing navigation transactions).\n      // Gotchas:\n      // - `keepalive` isn't supported by Firefox\n      // - As per spec (https://fetch.spec.whatwg.org/#http-network-or-cache-fetch):\n      //   If the sum of contentLength and inflightKeepaliveBytes is greater than 64 kibibytes, then return a network error.\n      //   We will therefore only activate the flag when we're below that limit.\n      // There is also a limit of requests that can be open at the same time, so we also limit this to 15\n      // See https://github.com/getsentry/sentry-javascript/pull/7553 for details\n      keepalive: pendingBodySize <= 60000 && pendingCount < 15,\n      ...options.fetchOptions,\n    };\n\n    if (!nativeFetch) {\n      clearCachedImplementation('fetch');\n      return rejectedSyncPromise('No fetch implementation available');\n    }\n\n    try {\n      return nativeFetch(options.url, requestOptions).then(response => {\n        pendingBodySize -= requestSize;\n        pendingCount--;\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    } catch (e) {\n      clearCachedImplementation('fetch');\n      pendingBodySize -= requestSize;\n      pendingCount--;\n      return rejectedSyncPromise(e);\n    }\n  }\n\n  return createTransport(options, makeRequest);\n}\n\nexport { makeFetchTransport };\n//# sourceMappingURL=fetch.js.map\n","import { createStackParser, UNKNOWN_FUNCTION } from '@sentry/utils';\n\nconst OPERA10_PRIORITY = 10;\nconst OPERA11_PRIORITY = 20;\nconst CHROME_PRIORITY = 30;\nconst WINJS_PRIORITY = 40;\nconst GECKO_PRIORITY = 50;\n\nfunction createFrame(filename, func, lineno, colno) {\n  const frame = {\n    filename,\n    function: func === '<anonymous>' ? UNKNOWN_FUNCTION : func,\n    in_app: true, // All browser frames are considered in_app\n  };\n\n  if (lineno !== undefined) {\n    frame.lineno = lineno;\n  }\n\n  if (colno !== undefined) {\n    frame.colno = colno;\n  }\n\n  return frame;\n}\n\n// This regex matches frames that have no function name (ie. are at the top level of a module).\n// For example \"at http://localhost:5000//script.js:1:126\"\n// Frames _with_ function names usually look as follows: \"at commitLayoutEffects (react-dom.development.js:23426:1)\"\nconst chromeRegexNoFnName = /^\\s*at (\\S+?)(?::(\\d+))(?::(\\d+))\\s*$/i;\n\n// This regex matches all the frames that have a function name.\nconst chromeRegex =\n  /^\\s*at (?:(.+?\\)(?: \\[.+\\])?|.*?) ?\\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\\/)?.*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i;\n\nconst chromeEvalRegex = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\n\n// Chromium based browsers: Chrome, Brave, new Opera, new Edge\n// We cannot call this variable `chrome` because it can conflict with global `chrome` variable in certain environments\n// See: https://github.com/getsentry/sentry-javascript/issues/6880\nconst chromeStackParserFn = line => {\n  // If the stack line has no function name, we need to parse it differently\n  const noFnParts = chromeRegexNoFnName.exec(line) ;\n\n  if (noFnParts) {\n    const [, filename, line, col] = noFnParts;\n    return createFrame(filename, UNKNOWN_FUNCTION, +line, +col);\n  }\n\n  const parts = chromeRegex.exec(line) ;\n\n  if (parts) {\n    const isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line\n\n    if (isEval) {\n      const subMatch = chromeEvalRegex.exec(parts[2]) ;\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line/column number\n        parts[2] = subMatch[1]; // url\n        parts[3] = subMatch[2]; // line\n        parts[4] = subMatch[3]; // column\n      }\n    }\n\n    // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now\n    // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)\n    const [func, filename] = extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]);\n\n    return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);\n  }\n\n  return;\n};\n\nconst chromeStackLineParser = [CHROME_PRIORITY, chromeStackParserFn];\n\n// gecko regex: `(?:bundle|\\d+\\.js)`: `bundle` is for react native, `\\d+\\.js` also but specifically for ram bundles because it\n// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js\n// We need this specific case for now because we want no other regex to match.\nconst geckoREgex =\n  /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)?((?:[-a-z]+)?:\\/.*?|\\[native code\\]|[^@]*(?:bundle|\\d+\\.js)|\\/[\\w\\-. /=]+)(?::(\\d+))?(?::(\\d+))?\\s*$/i;\nconst geckoEvalRegex = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\n\nconst gecko = line => {\n  const parts = geckoREgex.exec(line) ;\n\n  if (parts) {\n    const isEval = parts[3] && parts[3].indexOf(' > eval') > -1;\n    if (isEval) {\n      const subMatch = geckoEvalRegex.exec(parts[3]) ;\n\n      if (subMatch) {\n        // throw out eval line/column and use top-most line number\n        parts[1] = parts[1] || 'eval';\n        parts[3] = subMatch[1];\n        parts[4] = subMatch[2];\n        parts[5] = ''; // no column when eval\n      }\n    }\n\n    let filename = parts[3];\n    let func = parts[1] || UNKNOWN_FUNCTION;\n    [func, filename] = extractSafariExtensionDetails(func, filename);\n\n    return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);\n  }\n\n  return;\n};\n\nconst geckoStackLineParser = [GECKO_PRIORITY, gecko];\n\nconst winjsRegex = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:[-a-z]+):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\n\nconst winjs = line => {\n  const parts = winjsRegex.exec(line) ;\n\n  return parts\n    ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)\n    : undefined;\n};\n\nconst winjsStackLineParser = [WINJS_PRIORITY, winjs];\n\nconst opera10Regex = / line (\\d+).*script (?:in )?(\\S+)(?:: in function (\\S+))?$/i;\n\nconst opera10 = line => {\n  const parts = opera10Regex.exec(line) ;\n  return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;\n};\n\nconst opera10StackLineParser = [OPERA10_PRIORITY, opera10];\n\nconst opera11Regex =\n  / line (\\d+), column (\\d+)\\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\\(.*\\))? in (.*):\\s*$/i;\n\nconst opera11 = line => {\n  const parts = opera11Regex.exec(line) ;\n  return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;\n};\n\nconst opera11StackLineParser = [OPERA11_PRIORITY, opera11];\n\nconst defaultStackLineParsers = [chromeStackLineParser, geckoStackLineParser];\n\nconst defaultStackParser = createStackParser(...defaultStackLineParsers);\n\n/**\n * Safari web extensions, starting version unknown, can produce \"frames-only\" stacktraces.\n * What it means, is that instead of format like:\n *\n * Error: wat\n *   at function@url:row:col\n *   at function@url:row:col\n *   at function@url:row:col\n *\n * it produces something like:\n *\n *   function@url:row:col\n *   function@url:row:col\n *   function@url:row:col\n *\n * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.\n * This function is extracted so that we can use it in both places without duplicating the logic.\n * Unfortunately \"just\" changing RegExp is too complicated now and making it pass all tests\n * and fix this case seems like an impossible, or at least way too time-consuming task.\n */\nconst extractSafariExtensionDetails = (func, filename) => {\n  const isSafariExtension = func.indexOf('safari-extension') !== -1;\n  const isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;\n\n  return isSafariExtension || isSafariWebExtension\n    ? [\n        func.indexOf('@') !== -1 ? (func.split('@')[0] ) : UNKNOWN_FUNCTION,\n        isSafariExtension ? `safari-extension:${filename}` : `safari-web-extension:${filename}`,\n      ]\n    : [func, filename];\n};\n\nexport { chromeStackLineParser, defaultStackLineParsers, defaultStackParser, geckoStackLineParser, opera10StackLineParser, opera11StackLineParser, winjsStackLineParser };\n//# sourceMappingURL=stack-parsers.js.map\n","import { addClickKeypressInstrumentationHandler, addXhrInstrumentationHandler, addHistoryInstrumentationHandler, SENTRY_XHR_DATA_KEY } from '@sentry-internal/browser-utils';\nimport { defineIntegration, getClient, addBreadcrumb } from '@sentry/core';\nimport { addConsoleInstrumentationHandler, addFetchInstrumentationHandler, getEventDescription, logger, htmlTreeAsString, getComponentName, severityLevelFromString, safeJoin, parseUrl } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nconst INTEGRATION_NAME = 'Breadcrumbs';\n\nconst _breadcrumbsIntegration = ((options = {}) => {\n  const _options = {\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (_options.console) {\n        addConsoleInstrumentationHandler(_getConsoleBreadcrumbHandler(client));\n      }\n      if (_options.dom) {\n        addClickKeypressInstrumentationHandler(_getDomBreadcrumbHandler(client, _options.dom));\n      }\n      if (_options.xhr) {\n        addXhrInstrumentationHandler(_getXhrBreadcrumbHandler(client));\n      }\n      if (_options.fetch) {\n        addFetchInstrumentationHandler(_getFetchBreadcrumbHandler(client));\n      }\n      if (_options.history) {\n        addHistoryInstrumentationHandler(_getHistoryBreadcrumbHandler(client));\n      }\n      if (_options.sentry) {\n        client.on('beforeSendEvent', _getSentryBreadcrumbHandler(client));\n      }\n    },\n  };\n}) ;\n\nconst breadcrumbsIntegration = defineIntegration(_breadcrumbsIntegration);\n\n/**\n * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n */\nfunction _getSentryBreadcrumbHandler(client) {\n  return function addSentryBreadcrumb(event) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  };\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _getDomBreadcrumbHandler(\n  client,\n  dom,\n) {\n  return function _innerDomBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let target;\n    let componentName;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event ;\n      const element = _isEvent(event) ? event.target : event;\n\n      target = htmlTreeAsString(element, { keyAttrs, maxStringLength });\n      componentName = getComponentName(element);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    const breadcrumb = {\n      category: `ui.${handlerData.name}`,\n      message: target,\n    };\n\n    if (componentName) {\n      breadcrumb.data = { 'ui.component_name': componentName };\n    }\n\n    addBreadcrumb(breadcrumb, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _getConsoleBreadcrumbHandler(client) {\n  return function _consoleBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: severityLevelFromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _getXhrBreadcrumbHandler(client) {\n  return function _xhrBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n    // We only capture complete, non-sentry requests\n    if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n      return;\n    }\n\n    const { method, url, status_code, body } = sentryXhrData;\n\n    const data = {\n      method,\n      url,\n      status_code,\n    };\n\n    const hint = {\n      xhr: handlerData.xhr,\n      input: body,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    addBreadcrumb(\n      {\n        category: 'xhr',\n        data,\n        type: 'http',\n      },\n      hint,\n    );\n  };\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _getFetchBreadcrumbHandler(client) {\n  return function _fetchBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    // We only capture complete fetch requests\n    if (!endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    if (handlerData.error) {\n      const data = handlerData.fetchData;\n      const hint = {\n        data: handlerData.error,\n        input: handlerData.args,\n        startTimestamp,\n        endTimestamp,\n      };\n\n      addBreadcrumb(\n        {\n          category: 'fetch',\n          data,\n          level: 'error',\n          type: 'http',\n        },\n        hint,\n      );\n    } else {\n      const response = handlerData.response ;\n      const data = {\n        ...handlerData.fetchData,\n        status_code: response && response.status,\n      };\n      const hint = {\n        input: handlerData.args,\n        response,\n        startTimestamp,\n        endTimestamp,\n      };\n      addBreadcrumb(\n        {\n          category: 'fetch',\n          data,\n          type: 'http',\n        },\n        hint,\n      );\n    }\n  };\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _getHistoryBreadcrumbHandler(client) {\n  return function _historyBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(WINDOW.location.href);\n    let parsedFrom = from ? parseUrl(from) : undefined;\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom || !parsedFrom.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  };\n}\n\nfunction _isEvent(event) {\n  return !!event && !!(event ).target;\n}\n\nexport { breadcrumbsIntegration };\n//# sourceMappingURL=breadcrumbs.js.map\n","import { defineIntegration } from '@sentry/core';\nimport { fill, getFunctionName, getOriginalFunction } from '@sentry/utils';\nimport { WINDOW, wrap } from '../helpers.js';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'BroadcastChannel',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'SharedWorker',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\nconst INTEGRATION_NAME = 'BrowserApiErrors';\n\nconst _browserApiErrorsIntegration = ((options = {}) => {\n  const _options = {\n    XMLHttpRequest: true,\n    eventTarget: true,\n    requestAnimationFrame: true,\n    setInterval: true,\n    setTimeout: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO: This currently only works for the first client this is setup\n    // We may want to adjust this to check for client etc.\n    setupOnce() {\n      if (_options.setTimeout) {\n        fill(WINDOW, 'setTimeout', _wrapTimeFunction);\n      }\n\n      if (_options.setInterval) {\n        fill(WINDOW, 'setInterval', _wrapTimeFunction);\n      }\n\n      if (_options.requestAnimationFrame) {\n        fill(WINDOW, 'requestAnimationFrame', _wrapRAF);\n      }\n\n      if (_options.XMLHttpRequest && 'XMLHttpRequest' in WINDOW) {\n        fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n      }\n\n      const eventTargetOption = _options.eventTarget;\n      if (eventTargetOption) {\n        const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n        eventTarget.forEach(_wrapEventTarget);\n      }\n    },\n  };\n}) ;\n\n/**\n * Wrap timer functions and event targets to catch errors and provide better meta data.\n */\nconst browserApiErrorsIntegration = defineIntegration(_browserApiErrorsIntegration);\n\nfunction _wrapTimeFunction(original) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function ( ...args) {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: false,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _wrapRAF(original) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function ( callback) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: false,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\nfunction _wrapXHR(originalSend) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function ( ...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        fill(xhr, prop, function (original) {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: false,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before BrowserApiErrors, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\nfunction _wrapEventTarget(target) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const globalObject = WINDOW ;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const proto = globalObject[target] && globalObject[target].prototype;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n  if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original,)\n\n {\n    return function (\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      eventName,\n      fn,\n      options,\n    ) {\n      try {\n        if (typeof fn.handleEvent === 'function') {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: false,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch (err) {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      return original.apply(this, [\n        eventName,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        wrap(fn , {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: false,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(\n    proto,\n    'removeEventListener',\n    function (\n      originalRemoveEventListener,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) {\n      return function (\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        eventName,\n        fn,\n        options,\n      ) {\n        /**\n         * There are 2 possible scenarios here:\n         *\n         * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n         * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n         * as a pass-through, and call original `removeEventListener` with it.\n         *\n         * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n         * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n         * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n         * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n         * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n         *\n         * When someone adds a handler prior to initialization, and then do it again, but after,\n         * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n         * to get rid of the initial handler and it'd stick there forever.\n         */\n        const wrappedEventHandler = fn ;\n        try {\n          const originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;\n          if (originalEventHandler) {\n            originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n          }\n        } catch (e) {\n          // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n        }\n        return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);\n      };\n    },\n  );\n}\n\nexport { browserApiErrorsIntegration };\n//# sourceMappingURL=browserapierrors.js.map\n","import { defineIntegration, getClient, captureEvent } from '@sentry/core';\nimport { addGlobalErrorInstrumentationHandler, addGlobalUnhandledRejectionInstrumentationHandler, isPrimitive, isString, getLocationHref, UNKNOWN_FUNCTION, logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { eventFromUnknownInput } from '../eventbuilder.js';\nimport { shouldIgnoreOnError } from '../helpers.js';\n\nconst INTEGRATION_NAME = 'GlobalHandlers';\n\nconst _globalHandlersIntegration = ((options = {}) => {\n  const _options = {\n    onerror: true,\n    onunhandledrejection: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      Error.stackTraceLimit = 50;\n    },\n    setup(client) {\n      if (_options.onerror) {\n        _installGlobalOnErrorHandler(client);\n        globalHandlerLog('onerror');\n      }\n      if (_options.onunhandledrejection) {\n        _installGlobalOnUnhandledRejectionHandler(client);\n        globalHandlerLog('onunhandledrejection');\n      }\n    },\n  };\n}) ;\n\nconst globalHandlersIntegration = defineIntegration(_globalHandlersIntegration);\n\nfunction _installGlobalOnErrorHandler(client) {\n  addGlobalErrorInstrumentationHandler(data => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const { msg, url, line, column, error } = data;\n\n    const event = _enhanceEventWithInitialFrame(\n      eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n      url,\n      line,\n      column,\n    );\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onerror',\n      },\n    });\n  });\n}\n\nfunction _installGlobalOnUnhandledRejectionHandler(client) {\n  addGlobalUnhandledRejectionInstrumentationHandler(e => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const error = _getUnhandledRejectionError(e );\n\n    const event = isPrimitive(error)\n      ? _eventFromRejectionWithPrimitive(error)\n      : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n  });\n}\n\nfunction _getUnhandledRejectionError(error) {\n  if (isPrimitive(error)) {\n    return error;\n  }\n\n  // dig the object of the rejection out of known event types\n  try {\n\n    // PromiseRejectionEvents store the object of the rejection under 'reason'\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n    if ('reason' in (error )) {\n      return (error ).reason;\n    }\n\n    // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n    // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n    // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n    // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n    // https://github.com/getsentry/sentry-javascript/issues/2380\n    if ('detail' in (error ) && 'reason' in (error ).detail) {\n      return (error ).detail.reason;\n    }\n  } catch (e2) {} // eslint-disable-line no-empty\n\n  return error;\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: UNKNOWN_FUNCTION,\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type) {\n  DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction getOptions() {\n  const client = getClient();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return options;\n}\n\nexport { globalHandlersIntegration };\n//# sourceMappingURL=globalhandlers.js.map\n","import { defineIntegration } from '@sentry/core';\nimport { WINDOW } from '../helpers.js';\n\n/**\n * Collects information about HTTP request headers and\n * attaches them to the event.\n */\nconst httpContextIntegration = defineIntegration(() => {\n  return {\n    name: 'HttpContext',\n    preprocessEvent(event) {\n      // if none of the information we want exists, don't bother\n      if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n        return;\n      }\n\n      // grab as much info as exists and add it to the event\n      const url = (event.request && event.request.url) || (WINDOW.location && WINDOW.location.href);\n      const { referrer } = WINDOW.document || {};\n      const { userAgent } = WINDOW.navigator || {};\n\n      const headers = {\n        ...(event.request && event.request.headers),\n        ...(referrer && { Referer: referrer }),\n        ...(userAgent && { 'User-Agent': userAgent }),\n      };\n      const request = { ...event.request, ...(url && { url }), headers };\n\n      event.request = request;\n    },\n  };\n});\n\nexport { httpContextIntegration };\n//# sourceMappingURL=httpcontext.js.map\n","import { defineIntegration } from '@sentry/core';\nimport { applyAggregateErrorsToEvent } from '@sentry/utils';\nimport { exceptionFromError } from '../eventbuilder.js';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      applyAggregateErrorsToEvent(\n        // This differs from the LinkedErrors integration in core by using a different exceptionFromError function\n        exceptionFromError,\n        options.stackParser,\n        options.maxValueLength,\n        key,\n        limit,\n        event,\n        hint,\n      );\n    },\n  };\n}) ;\n\n/**\n * Aggregrate linked errors in an event.\n */\nconst linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\n\nexport { linkedErrorsIntegration };\n//# sourceMappingURL=linkederrors.js.map\n","import { inboundFiltersIntegration, functionToStringIntegration, dedupeIntegration, getIntegrationsToSetup, initAndBind, getCurrentScope, lastEventId, getReportDialogEndpoint, startSession, captureSession, getClient } from '@sentry/core';\nimport { consoleSandbox, supportsFetch, logger, stackParserFromStackParserOptions } from '@sentry/utils';\nimport { addHistoryInstrumentationHandler } from '@sentry-internal/browser-utils';\nimport { BrowserClient } from './client.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { WINDOW } from './helpers.js';\nimport { breadcrumbsIntegration } from './integrations/breadcrumbs.js';\nimport { browserApiErrorsIntegration } from './integrations/browserapierrors.js';\nimport { globalHandlersIntegration } from './integrations/globalhandlers.js';\nimport { httpContextIntegration } from './integrations/httpcontext.js';\nimport { linkedErrorsIntegration } from './integrations/linkederrors.js';\nimport { defaultStackParser } from './stack-parsers.js';\nimport { makeFetchTransport } from './transports/fetch.js';\n\n/** Get the default integrations for the browser SDK. */\nfunction getDefaultIntegrations(_options) {\n  /**\n   * Note: Please make sure this stays in sync with Angular SDK, which re-exports\n   * `getDefaultIntegrations` but with an adjusted set of integrations.\n   */\n  return [\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    browserApiErrorsIntegration(),\n    breadcrumbsIntegration(),\n    globalHandlersIntegration(),\n    linkedErrorsIntegration(),\n    dedupeIntegration(),\n    httpContextIntegration(),\n  ];\n}\n\nfunction applyDefaultOptions(optionsArg = {}) {\n  const defaultOptions = {\n    defaultIntegrations: getDefaultIntegrations(),\n    release:\n      typeof __SENTRY_RELEASE__ === 'string' // This allows build tooling to find-and-replace __SENTRY_RELEASE__ to inject a release value\n        ? __SENTRY_RELEASE__\n        : WINDOW.SENTRY_RELEASE && WINDOW.SENTRY_RELEASE.id // This supports the variable that sentry-webpack-plugin injects\n          ? WINDOW.SENTRY_RELEASE.id\n          : undefined,\n    autoSessionTracking: true,\n    sendClientReports: true,\n  };\n\n  return { ...defaultOptions, ...optionsArg };\n}\n\nfunction shouldShowBrowserExtensionError() {\n  const windowWithMaybeExtension = WINDOW ;\n\n  const extensionKey = windowWithMaybeExtension.chrome ? 'chrome' : 'browser';\n  const extensionObject = windowWithMaybeExtension[extensionKey];\n\n  const runtimeId = extensionObject && extensionObject.runtime && extensionObject.runtime.id;\n  const href = (WINDOW.location && WINDOW.location.href) || '';\n\n  const extensionProtocols = ['chrome-extension:', 'moz-extension:', 'ms-browser-extension:'];\n\n  // Running the SDK in a dedicated extension page and calling Sentry.init is fine; no risk of data leakage\n  const isDedicatedExtensionPage =\n    !!runtimeId && WINDOW === WINDOW.top && extensionProtocols.some(protocol => href.startsWith(`${protocol}//`));\n\n  // Running the SDK in NW.js, which appears like a browser extension but isn't, is also fine\n  // see: https://github.com/getsentry/sentry-javascript/issues/12668\n  const isNWjs = typeof windowWithMaybeExtension.nw !== 'undefined';\n\n  return !!runtimeId && !isDedicatedExtensionPage && !isNWjs;\n}\n\n/**\n * A magic string that build tooling can leverage in order to inject a release value into the SDK.\n */\n\n/**\n * The Sentry Browser SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible when\n * loading the web page. To set context information or send manual events, use\n * the provided methods.\n *\n * @example\n *\n * ```\n *\n * import { init } from '@sentry/browser';\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * import { addBreadcrumb } from '@sentry/browser';\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n *\n * ```\n *\n * import * as Sentry from '@sentry/browser';\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link BrowserOptions} for documentation on configuration options.\n */\nfunction init(browserOptions = {}) {\n  const options = applyDefaultOptions(browserOptions);\n\n  if (shouldShowBrowserExtensionError()) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(\n        '[Sentry] You cannot run Sentry this way in a browser extension, check: https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/',\n      );\n    });\n    return;\n  }\n\n  if (DEBUG_BUILD) {\n    if (!supportsFetch()) {\n      logger.warn(\n        'No Fetch API detected. The Sentry SDK requires a Fetch API compatible environment to send events. Please add a Fetch API polyfill.',\n      );\n    }\n  }\n  const clientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeFetchTransport,\n  };\n\n  const client = initAndBind(BrowserClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n\n  return client;\n}\n\n/**\n * All properties the report dialog supports\n */\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the global scope.\n */\nfunction showReportDialog(options = {}) {\n  // doesn't work without a document (React Native)\n  if (!WINDOW.document) {\n    DEBUG_BUILD && logger.error('Global document not defined in showReportDialog call');\n    return;\n  }\n\n  const scope = getCurrentScope();\n  const client = scope.getClient();\n  const dsn = client && client.getDsn();\n\n  if (!dsn) {\n    DEBUG_BUILD && logger.error('DSN not configured for showReportDialog call');\n    return;\n  }\n\n  if (scope) {\n    options.user = {\n      ...scope.getUser(),\n      ...options.user,\n    };\n  }\n\n  if (!options.eventId) {\n    const eventId = lastEventId();\n    if (eventId) {\n      options.eventId = eventId;\n    }\n  }\n\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, options);\n\n  if (options.onLoad) {\n    script.onload = options.onLoad;\n  }\n\n  const { onClose } = options;\n  if (onClose) {\n    const reportDialogClosedMessageHandler = (event) => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n\n  const injectionPoint = WINDOW.document.head || WINDOW.document.body;\n  if (injectionPoint) {\n    injectionPoint.appendChild(script);\n  } else {\n    DEBUG_BUILD && logger.error('Not injecting report dialog. No injection point found in HTML');\n  }\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction forceLoad() {\n  // Noop\n}\n\n/**\n * This function is here to be API compatible with the loader.\n * @hidden\n */\nfunction onLoad(callback) {\n  callback();\n}\n\n/**\n * Enable automatic Session Tracking for the initial page load.\n */\nfunction startSessionTracking() {\n  if (typeof WINDOW.document === 'undefined') {\n    DEBUG_BUILD && logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');\n    return;\n  }\n\n  // The session duration for browser sessions does not track a meaningful\n  // concept that can be used as a metric.\n  // Automatically captured sessions are akin to page views, and thus we\n  // discard their duration.\n  startSession({ ignoreDuration: true });\n  captureSession();\n\n  // We want to create a session for every navigation as well\n  addHistoryInstrumentationHandler(({ from, to }) => {\n    // Don't create an additional session for the initial route or if the location did not change\n    if (from !== undefined && from !== to) {\n      startSession({ ignoreDuration: true });\n      captureSession();\n    }\n  });\n}\n\n/**\n * Captures user feedback and sends it to Sentry.\n *\n * @deprecated Use `captureFeedback` instead.\n */\nfunction captureUserFeedback(feedback) {\n  const client = getClient();\n  if (client) {\n    // eslint-disable-next-line deprecation/deprecation\n    client.captureUserFeedback(feedback);\n  }\n}\n\nexport { captureUserFeedback, forceLoad, getDefaultIntegrations, init, onLoad, showReportDialog };\n//# sourceMappingURL=sdk.js.map\n","import { addXhrInstrumentationHandler, addPerformanceInstrumentationHandler, SENTRY_XHR_DATA_KEY } from '@sentry-internal/browser-utils';\nimport { instrumentFetchRequest, spanToJSON, hasTracingEnabled, setHttpStatus, getActiveSpan, startInactiveSpan, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_OP, SentryNonRecordingSpan, getClient, getCurrentScope, getIsolationScope, spanToTraceHeader, getDynamicSamplingContextFromSpan, getDynamicSamplingContextFromClient } from '@sentry/core';\nimport { addFetchInstrumentationHandler, parseUrl, browserPerformanceTimeOrigin, generateSentryTraceHeader, dynamicSamplingContextToSentryBaggageHeader, BAGGAGE_HEADER_NAME, stringMatchesSomePattern } from '@sentry/utils';\nimport { WINDOW } from '../helpers.js';\n\n/** Options for Request Instrumentation */\n\nconst defaultRequestInstrumentationOptions = {\n  traceFetch: true,\n  traceXHR: true,\n  enableHTTPTimings: true,\n};\n\n/** Registers span creators for xhr and fetch requests  */\nfunction instrumentOutgoingRequests(_options) {\n  const { traceFetch, traceXHR, shouldCreateSpanForRequest, enableHTTPTimings, tracePropagationTargets } = {\n    traceFetch: defaultRequestInstrumentationOptions.traceFetch,\n    traceXHR: defaultRequestInstrumentationOptions.traceXHR,\n    ..._options,\n  };\n\n  const shouldCreateSpan =\n    typeof shouldCreateSpanForRequest === 'function' ? shouldCreateSpanForRequest : (_) => true;\n\n  const shouldAttachHeadersWithTargets = (url) => shouldAttachHeaders(url, tracePropagationTargets);\n\n  const spans = {};\n\n  if (traceFetch) {\n    addFetchInstrumentationHandler(handlerData => {\n      const createdSpan = instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      // We cannot use `window.location` in the generic fetch instrumentation,\n      // but we need it for reliable `server.address` attribute.\n      // so we extend this in here\n      if (createdSpan) {\n        const fullUrl = getFullURL(handlerData.fetchData.url);\n        const host = fullUrl ? parseUrl(fullUrl).host : undefined;\n        createdSpan.setAttributes({\n          'http.url': fullUrl,\n          'server.address': host,\n        });\n      }\n\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n\n  if (traceXHR) {\n    addXhrInstrumentationHandler(handlerData => {\n      const createdSpan = xhrCallback(handlerData, shouldCreateSpan, shouldAttachHeadersWithTargets, spans);\n      if (enableHTTPTimings && createdSpan) {\n        addHTTPTimings(createdSpan);\n      }\n    });\n  }\n}\n\nfunction isPerformanceResourceTiming(entry) {\n  return (\n    entry.entryType === 'resource' &&\n    'initiatorType' in entry &&\n    typeof (entry ).nextHopProtocol === 'string' &&\n    (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest')\n  );\n}\n\n/**\n * Creates a temporary observer to listen to the next fetch/xhr resourcing timings,\n * so that when timings hit their per-browser limit they don't need to be removed.\n *\n * @param span A span that has yet to be finished, must contain `url` on data.\n */\nfunction addHTTPTimings(span) {\n  const { url } = spanToJSON(span).data || {};\n\n  if (!url || typeof url !== 'string') {\n    return;\n  }\n\n  const cleanup = addPerformanceInstrumentationHandler('resource', ({ entries }) => {\n    entries.forEach(entry => {\n      if (isPerformanceResourceTiming(entry) && entry.name.endsWith(url)) {\n        const spanData = resourceTimingEntryToSpanData(entry);\n        spanData.forEach(data => span.setAttribute(...data));\n        // In the next tick, clean this handler up\n        // We have to wait here because otherwise this cleans itself up before it is fully done\n        setTimeout(cleanup);\n      }\n    });\n  });\n}\n\n/**\n * Converts ALPN protocol ids to name and version.\n *\n * (https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids)\n * @param nextHopProtocol PerformanceResourceTiming.nextHopProtocol\n */\nfunction extractNetworkProtocol(nextHopProtocol) {\n  let name = 'unknown';\n  let version = 'unknown';\n  let _name = '';\n  for (const char of nextHopProtocol) {\n    // http/1.1 etc.\n    if (char === '/') {\n      [name, version] = nextHopProtocol.split('/') ;\n      break;\n    }\n    // h2, h3 etc.\n    if (!isNaN(Number(char))) {\n      name = _name === 'h' ? 'http' : _name;\n      version = nextHopProtocol.split(_name)[1] ;\n      break;\n    }\n    _name += char;\n  }\n  if (_name === nextHopProtocol) {\n    // webrtc, ftp, etc.\n    name = _name;\n  }\n  return { name, version };\n}\n\nfunction getAbsoluteTime(time = 0) {\n  return ((browserPerformanceTimeOrigin || performance.timeOrigin) + time) / 1000;\n}\n\nfunction resourceTimingEntryToSpanData(resourceTiming) {\n  const { name, version } = extractNetworkProtocol(resourceTiming.nextHopProtocol);\n\n  const timingSpanData = [];\n\n  timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n\n  if (!browserPerformanceTimeOrigin) {\n    return timingSpanData;\n  }\n  return [\n    ...timingSpanData,\n    ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)],\n    ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)],\n    ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)],\n    ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)],\n    ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)],\n    ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)],\n    ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)],\n    ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)],\n    ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)],\n    ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)],\n  ];\n}\n\n/**\n * A function that determines whether to attach tracing headers to a request.\n * We only export this function for testing purposes.\n */\nfunction shouldAttachHeaders(\n  targetUrl,\n  tracePropagationTargets,\n) {\n  // window.location.href not being defined is an edge case in the browser but we need to handle it.\n  // Potentially dangerous situations where it may not be defined: Browser Extensions, Web Workers, patching of the location obj\n  const href = WINDOW.location && WINDOW.location.href;\n\n  if (!href) {\n    // If there is no window.location.origin, we default to only attaching tracing headers to relative requests, i.e. ones that start with `/`\n    // BIG DISCLAIMER: Users can call URLs with a double slash (fetch(\"//example.com/api\")), this is a shorthand for \"send to the same protocol\",\n    // so we need a to exclude those requests, because they might be cross origin.\n    const isRelativeSameOriginRequest = !!targetUrl.match(/^\\/(?!\\/)/);\n    if (!tracePropagationTargets) {\n      return isRelativeSameOriginRequest;\n    } else {\n      return stringMatchesSomePattern(targetUrl, tracePropagationTargets);\n    }\n  } else {\n    let resolvedUrl;\n    let currentOrigin;\n\n    // URL parsing may fail, we default to not attaching trace headers in that case.\n    try {\n      resolvedUrl = new URL(targetUrl, href);\n      currentOrigin = new URL(href).origin;\n    } catch (e) {\n      return false;\n    }\n\n    const isSameOriginRequest = resolvedUrl.origin === currentOrigin;\n    if (!tracePropagationTargets) {\n      return isSameOriginRequest;\n    } else {\n      return (\n        stringMatchesSomePattern(resolvedUrl.toString(), tracePropagationTargets) ||\n        (isSameOriginRequest && stringMatchesSomePattern(resolvedUrl.pathname, tracePropagationTargets))\n      );\n    }\n  }\n}\n\n/**\n * Create and track xhr request spans\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction xhrCallback(\n  handlerData,\n  shouldCreateSpan,\n  shouldAttachHeaders,\n  spans,\n) {\n  const xhr = handlerData.xhr;\n  const sentryXhrData = xhr && xhr[SENTRY_XHR_DATA_KEY];\n\n  if (!xhr || xhr.__sentry_own_request__ || !sentryXhrData) {\n    return undefined;\n  }\n\n  const shouldCreateSpanResult = hasTracingEnabled() && shouldCreateSpan(sentryXhrData.url);\n\n  // check first if the request has finished and is tracked by an existing span which should now end\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = xhr.__sentry_xhr_span_id__;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span && sentryXhrData.status_code !== undefined) {\n      setHttpStatus(span, sentryXhrData.status_code);\n      span.end();\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const fullUrl = getFullURL(sentryXhrData.url);\n  const host = fullUrl ? parseUrl(fullUrl).host : undefined;\n\n  const hasParent = !!getActiveSpan();\n\n  const span =\n    shouldCreateSpanResult && hasParent\n      ? startInactiveSpan({\n          name: `${sentryXhrData.method} ${sentryXhrData.url}`,\n          attributes: {\n            type: 'xhr',\n            'http.method': sentryXhrData.method,\n            'http.url': fullUrl,\n            url: sentryXhrData.url,\n            'server.address': host,\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser',\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',\n          },\n        })\n      : new SentryNonRecordingSpan();\n\n  xhr.__sentry_xhr_span_id__ = span.spanContext().spanId;\n  spans[xhr.__sentry_xhr_span_id__] = span;\n\n  const client = getClient();\n\n  if (xhr.setRequestHeader && shouldAttachHeaders(sentryXhrData.url) && client) {\n    addTracingHeadersToXhrRequest(\n      xhr,\n      client,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      hasTracingEnabled() && hasParent ? span : undefined,\n    );\n  }\n\n  return span;\n}\n\nfunction addTracingHeadersToXhrRequest(xhr, client, span) {\n  const scope = getCurrentScope();\n  const isolationScope = getIsolationScope();\n  const { traceId, spanId, sampled, dsc } = {\n    ...isolationScope.getPropagationContext(),\n    ...scope.getPropagationContext(),\n  };\n\n  const sentryTraceHeader =\n    span && hasTracingEnabled() ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, spanId, sampled);\n\n  const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(\n    dsc || (span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromClient(traceId, client)),\n  );\n\n  setHeaderOnXhr(xhr, sentryTraceHeader, sentryBaggageHeader);\n}\n\nfunction setHeaderOnXhr(\n  xhr,\n  sentryTraceHeader,\n  sentryBaggageHeader,\n) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    xhr.setRequestHeader('sentry-trace', sentryTraceHeader);\n    if (sentryBaggageHeader) {\n      // From MDN: \"If this method is called several times with the same header, the values are merged into one single request header.\"\n      // We can therefore simply set a baggage header without checking what was there before\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      xhr.setRequestHeader(BAGGAGE_HEADER_NAME, sentryBaggageHeader);\n    }\n  } catch (_) {\n    // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.\n  }\n}\n\nfunction getFullURL(url) {\n  try {\n    // By adding a base URL to new URL(), this will also work for relative urls\n    // If `url` is a full URL, the base URL is ignored anyhow\n    const parsed = new URL(url, WINDOW.location.origin);\n    return parsed.href;\n  } catch (e2) {\n    return undefined;\n  }\n}\n\nexport { defaultRequestInstrumentationOptions, extractNetworkProtocol, instrumentOutgoingRequests, shouldAttachHeaders, xhrCallback };\n//# sourceMappingURL=request.js.map\n","import { getActiveSpan, getRootSpan, spanToJSON, SPAN_STATUS_ERROR } from '@sentry/core';\nimport { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nfunction registerBackgroundTabDetection() {\n  if (WINDOW && WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      const activeSpan = getActiveSpan();\n      if (!activeSpan) {\n        return;\n      }\n\n      const rootSpan = getRootSpan(activeSpan);\n\n      if (WINDOW.document.hidden && rootSpan) {\n        const cancelledStatus = 'cancelled';\n\n        const { op, status } = spanToJSON(rootSpan);\n\n        if (DEBUG_BUILD) {\n          logger.log(`[Tracing] Transaction: ${cancelledStatus} -> since tab moved to the background, op: ${op}`);\n        }\n\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!status) {\n          rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message: cancelledStatus });\n        }\n\n        rootSpan.setAttribute('sentry.cancellation_reason', 'document.hidden');\n        rootSpan.end();\n      }\n    });\n  } else {\n    DEBUG_BUILD && logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n\nexport { registerBackgroundTabDetection };\n//# sourceMappingURL=backgroundtab.js.map\n","import { startTrackingWebVitals, startTrackingINP, startTrackingLongAnimationFrames, startTrackingLongTasks, startTrackingInteractions, addHistoryInstrumentationHandler, registerInpInteractionListener, addPerformanceEntries } from '@sentry-internal/browser-utils';\nimport { TRACING_DEFAULTS, registerSpanErrorInstrumentation, getClient, spanToJSON, getCurrentScope, getRootSpan, spanIsSampled, getDynamicSamplingContextFromSpan, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, getActiveSpan, getIsolationScope, startIdleSpan, SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON } from '@sentry/core';\nimport { logger, propagationContextFromHeaders, browserPerformanceTimeOrigin, generatePropagationContext, getDomElement } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\nimport { registerBackgroundTabDetection } from './backgroundtab.js';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request.js';\n\n/* eslint-disable max-lines */\n\nconst BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  ...TRACING_DEFAULTS,\n  instrumentNavigation: true,\n  instrumentPageLoad: true,\n  markBackgroundSpan: true,\n  enableLongTask: true,\n  enableLongAnimationFrame: false,\n  enableInp: true,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library.\n *\n * We explicitly export the proper type here, as this has to be extended in some cases.\n */\nconst browserTracingIntegration = ((_options = {}) => {\n  registerSpanErrorInstrumentation();\n\n  const {\n    enableInp,\n    enableLongTask,\n    enableLongAnimationFrame,\n    _experiments: { enableInteractions },\n    beforeStartSpan,\n    idleTimeout,\n    finalTimeout,\n    childSpanTimeout,\n    markBackgroundSpan,\n    traceFetch,\n    traceXHR,\n    shouldCreateSpanForRequest,\n    enableHTTPTimings,\n    instrumentPageLoad,\n    instrumentNavigation,\n  } = {\n    ...DEFAULT_BROWSER_TRACING_OPTIONS,\n    ..._options,\n  };\n\n  const _collectWebVitals = startTrackingWebVitals();\n\n  if (enableInp) {\n    startTrackingINP();\n  }\n\n  if (enableLongAnimationFrame && PerformanceObserver.supportedEntryTypes.includes('long-animation-frame')) {\n    startTrackingLongAnimationFrames();\n  } else if (enableLongTask) {\n    startTrackingLongTasks();\n  }\n\n  if (enableInteractions) {\n    startTrackingInteractions();\n  }\n\n  const latestRoute = {\n    name: undefined,\n    source: undefined,\n  };\n\n  /** Create routing idle transaction. */\n  function _createRouteSpan(client, startSpanOptions) {\n    const isPageloadTransaction = startSpanOptions.op === 'pageload';\n\n    const finalStartSpanOptions = beforeStartSpan\n      ? beforeStartSpan(startSpanOptions)\n      : startSpanOptions;\n\n    const attributes = finalStartSpanOptions.attributes || {};\n\n    // If `finalStartSpanOptions.name` is different than `startSpanOptions.name`\n    // it is because `beforeStartSpan` set a custom name. Therefore we set the source to 'custom'.\n    if (startSpanOptions.name !== finalStartSpanOptions.name) {\n      attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'custom';\n      finalStartSpanOptions.attributes = attributes;\n    }\n\n    latestRoute.name = finalStartSpanOptions.name;\n    latestRoute.source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    const idleSpan = startIdleSpan(finalStartSpanOptions, {\n      idleTimeout,\n      finalTimeout,\n      childSpanTimeout,\n      // should wait for finish signal if it's a pageload transaction\n      disableAutoFinish: isPageloadTransaction,\n      beforeSpanEnd: span => {\n        _collectWebVitals();\n        addPerformanceEntries(span);\n      },\n    });\n\n    function emitFinish() {\n      if (['interactive', 'complete'].includes(WINDOW.document.readyState)) {\n        client.emit('idleSpanEnableAutoFinish', idleSpan);\n      }\n    }\n\n    if (isPageloadTransaction && WINDOW.document) {\n      WINDOW.document.addEventListener('readystatechange', () => {\n        emitFinish();\n      });\n\n      emitFinish();\n    }\n\n    return idleSpan;\n  }\n\n  return {\n    name: BROWSER_TRACING_INTEGRATION_ID,\n    afterAllSetup(client) {\n      let activeSpan;\n      let startingUrl = WINDOW.location && WINDOW.location.href;\n\n      client.on('startNavigationSpan', startSpanOptions => {\n        if (getClient() !== client) {\n          return;\n        }\n\n        if (activeSpan && !spanToJSON(activeSpan).timestamp) {\n          DEBUG_BUILD && logger.log(`[Tracing] Finishing current root span with op: ${spanToJSON(activeSpan).op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeSpan.end();\n        }\n        activeSpan = _createRouteSpan(client, {\n          op: 'navigation',\n          ...startSpanOptions,\n        });\n      });\n\n      client.on('startPageLoadSpan', (startSpanOptions, traceOptions = {}) => {\n        if (getClient() !== client) {\n          return;\n        }\n\n        if (activeSpan && !spanToJSON(activeSpan).timestamp) {\n          DEBUG_BUILD && logger.log(`[Tracing] Finishing current root span with op: ${spanToJSON(activeSpan).op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeSpan.end();\n        }\n\n        const sentryTrace = traceOptions.sentryTrace || getMetaContent('sentry-trace');\n        const baggage = traceOptions.baggage || getMetaContent('baggage');\n\n        const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n        getCurrentScope().setPropagationContext(propagationContext);\n\n        activeSpan = _createRouteSpan(client, {\n          op: 'pageload',\n          ...startSpanOptions,\n        });\n      });\n\n      // A trace should to stay the consistent over the entire time span of one route.\n      // Therefore, when the initial pageload or navigation root span ends, we update the\n      // scope's propagation context to keep span-specific attributes like the `sampled` decision and\n      // the dynamic sampling context valid, even after the root span has ended.\n      // This ensures that the trace data is consistent for the entire duration of the route.\n      client.on('spanEnd', span => {\n        const op = spanToJSON(span).op;\n        if (span !== getRootSpan(span) || (op !== 'navigation' && op !== 'pageload')) {\n          return;\n        }\n\n        const scope = getCurrentScope();\n        const oldPropagationContext = scope.getPropagationContext();\n\n        scope.setPropagationContext({\n          ...oldPropagationContext,\n          sampled: oldPropagationContext.sampled !== undefined ? oldPropagationContext.sampled : spanIsSampled(span),\n          dsc: oldPropagationContext.dsc || getDynamicSamplingContextFromSpan(span),\n        });\n      });\n\n      if (WINDOW.location) {\n        if (instrumentPageLoad) {\n          startBrowserTracingPageLoadSpan(client, {\n            name: WINDOW.location.pathname,\n            // pageload should always start at timeOrigin (and needs to be in s, not ms)\n            startTime: browserPerformanceTimeOrigin ? browserPerformanceTimeOrigin / 1000 : undefined,\n            attributes: {\n              [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n              [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.browser',\n            },\n          });\n        }\n\n        if (instrumentNavigation) {\n          addHistoryInstrumentationHandler(({ to, from }) => {\n            /**\n             * This early return is there to account for some cases where a navigation transaction starts right after\n             * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n             * create an uneccessary navigation transaction.\n             *\n             * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n             * only be caused in certain development environments where the usage of a hot module reloader is causing\n             * errors.\n             */\n            if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n              startingUrl = undefined;\n              return;\n            }\n\n            if (from !== to) {\n              startingUrl = undefined;\n              startBrowserTracingNavigationSpan(client, {\n                name: WINDOW.location.pathname,\n                attributes: {\n                  [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n                  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.browser',\n                },\n              });\n            }\n          });\n        }\n      }\n\n      if (markBackgroundSpan) {\n        registerBackgroundTabDetection();\n      }\n\n      if (enableInteractions) {\n        registerInteractionListener(idleTimeout, finalTimeout, childSpanTimeout, latestRoute);\n      }\n\n      if (enableInp) {\n        registerInpInteractionListener();\n      }\n\n      instrumentOutgoingRequests({\n        traceFetch,\n        traceXHR,\n        tracePropagationTargets: client.getOptions().tracePropagationTargets,\n        shouldCreateSpanForRequest,\n        enableHTTPTimings,\n      });\n    },\n  };\n}) ;\n\n/**\n * Manually start a page load span.\n * This will only do something if a browser tracing integration integration has been setup.\n *\n * If you provide a custom `traceOptions` object, it will be used to continue the trace\n * instead of the default behavior, which is to look it up on the <meta> tags.\n */\nfunction startBrowserTracingPageLoadSpan(\n  client,\n  spanOptions,\n  traceOptions,\n) {\n  client.emit('startPageLoadSpan', spanOptions, traceOptions);\n\n  getCurrentScope().setTransactionName(spanOptions.name);\n\n  const span = getActiveSpan();\n  const op = span && spanToJSON(span).op;\n  return op === 'pageload' ? span : undefined;\n}\n\n/**\n * Manually start a navigation span.\n * This will only do something if a browser tracing integration has been setup.\n */\nfunction startBrowserTracingNavigationSpan(client, spanOptions) {\n  getIsolationScope().setPropagationContext(generatePropagationContext());\n  getCurrentScope().setPropagationContext(generatePropagationContext());\n\n  client.emit('startNavigationSpan', spanOptions);\n\n  getCurrentScope().setTransactionName(spanOptions.name);\n\n  const span = getActiveSpan();\n  const op = span && spanToJSON(span).op;\n  return op === 'navigation' ? span : undefined;\n}\n\n/** Returns the value of a meta tag */\nfunction getMetaContent(metaName) {\n  // Can't specify generic to `getDomElement` because tracing can be used\n  // in a variety of environments, have to disable `no-unsafe-member-access`\n  // as a result.\n  const metaTag = getDomElement(`meta[name=${metaName}]`);\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return metaTag ? metaTag.getAttribute('content') : undefined;\n}\n\n/** Start listener for interaction transactions */\nfunction registerInteractionListener(\n  idleTimeout,\n  finalTimeout,\n  childSpanTimeout,\n  latestRoute,\n) {\n  let inflightInteractionSpan;\n  const registerInteractionTransaction = () => {\n    const op = 'ui.action.click';\n\n    const activeSpan = getActiveSpan();\n    const rootSpan = activeSpan && getRootSpan(activeSpan);\n    if (rootSpan) {\n      const currentRootSpanOp = spanToJSON(rootSpan).op;\n      if (['navigation', 'pageload'].includes(currentRootSpanOp )) {\n        DEBUG_BUILD &&\n          logger.warn(`[Tracing] Did not create ${op} span because a pageload or navigation span is in progress.`);\n        return undefined;\n      }\n    }\n\n    if (inflightInteractionSpan) {\n      inflightInteractionSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, 'interactionInterrupted');\n      inflightInteractionSpan.end();\n      inflightInteractionSpan = undefined;\n    }\n\n    if (!latestRoute.name) {\n      DEBUG_BUILD && logger.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n      return undefined;\n    }\n\n    inflightInteractionSpan = startIdleSpan(\n      {\n        name: latestRoute.name,\n        op,\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: latestRoute.source || 'url',\n        },\n      },\n      {\n        idleTimeout,\n        finalTimeout,\n        childSpanTimeout,\n      },\n    );\n  };\n\n  if (WINDOW.document) {\n    addEventListener('click', registerInteractionTransaction, { once: false, capture: true });\n  }\n}\n\nexport { BROWSER_TRACING_INTEGRATION_ID, browserTracingIntegration, getMetaContent, startBrowserTracingNavigationSpan, startBrowserTracingPageLoadSpan };\n//# sourceMappingURL=browserTracingIntegration.js.map\n","import { captureException } from '@sentry/browser';\nimport { isError } from '@sentry/utils';\nimport { version } from 'react';\n\n/**\n * See if React major version is 17+ by parsing version string.\n */\nfunction isAtLeastReact17(reactVersion) {\n  const reactMajor = reactVersion.match(/^([^.]+)/);\n  return reactMajor !== null && parseInt(reactMajor[0]) >= 17;\n}\n\n/**\n * Recurse through `error.cause` chain to set cause on an error.\n */\nfunction setCause(error, cause) {\n  const seenErrors = new WeakSet();\n\n  function recurse(error, cause) {\n    // If we've already seen the error, there is a recursive loop somewhere in the error's\n    // cause chain. Let's just bail out then to prevent a stack overflow.\n    if (seenErrors.has(error)) {\n      return;\n    }\n    if (error.cause) {\n      seenErrors.add(error);\n      return recurse(error.cause, cause);\n    }\n    error.cause = cause;\n  }\n\n  recurse(error, cause);\n}\n\n/**\n * Captures an error that was thrown by a React ErrorBoundary or React root.\n *\n * @param error The error to capture.\n * @param errorInfo The errorInfo provided by React.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nfunction captureReactException(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error,\n  { componentStack },\n  hint,\n) {\n  // If on React version >= 17, create stack trace from componentStack param and links\n  // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n  // Linking errors requires the `LinkedErrors` integration be enabled.\n  // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n  //\n  // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n  // with non-error objects. This is why we need to check if the error is an error-like object.\n  // See: https://github.com/getsentry/sentry-javascript/issues/6167\n  if (isAtLeastReact17(version) && isError(error) && componentStack) {\n    const errorBoundaryError = new Error(error.message);\n    errorBoundaryError.name = `React ErrorBoundary ${error.name}`;\n    errorBoundaryError.stack = componentStack;\n\n    // Using the `LinkedErrors` integration to link the errors together.\n    setCause(error, errorBoundaryError);\n  }\n\n  return captureException(error, {\n    ...hint,\n    captureContext: {\n      contexts: { react: { componentStack } },\n    },\n  });\n}\n\n/**\n * Creates an error handler that can be used with the `onCaughtError`, `onUncaughtError`,\n * and `onRecoverableError` options in `createRoot` and `hydrateRoot` React DOM methods.\n *\n * @param callback An optional callback that will be called after the error is captured.\n * Use this to add custom handling for errors.\n *\n * @example\n *\n * ```JavaScript\n * const root = createRoot(container, {\n *  onCaughtError: Sentry.reactErrorHandler(),\n *  onUncaughtError: Sentry.reactErrorHandler((error, errorInfo) => {\n *    console.warn('Caught error', error, errorInfo.componentStack);\n *  });\n * });\n * ```\n */\nfunction reactErrorHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (error, errorInfo) => {\n    const eventId = captureReactException(error, errorInfo);\n    if (callback) {\n      callback(error, errorInfo, eventId);\n    }\n  };\n}\n\nexport { captureReactException, isAtLeastReact17, reactErrorHandler, setCause };\n//# sourceMappingURL=error.js.map\n","/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexport { DEBUG_BUILD };\n//# sourceMappingURL=debug-build.js.map\n","import { getClient, showReportDialog, withScope } from '@sentry/browser';\nimport { logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { captureReactException } from './error.js';\n\nconst UNKNOWN_COMPONENT = 'unknown';\n\nconst INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null,\n};\n\n/**\n * A ErrorBoundary component that logs errors to Sentry.\n * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the\n * Sentry React SDK ErrorBoundary caught an error invoking your application code. This\n * is expected behavior and NOT indicative of a bug with the Sentry React SDK.\n */\nclass ErrorBoundary extends React.Component {\n\n   constructor(props) {\n    super(props);ErrorBoundary.prototype.__init.call(this);\n    this.state = INITIAL_STATE;\n    this._openFallbackReportDialog = true;\n\n    const client = getClient();\n    if (client && props.showDialog) {\n      this._openFallbackReportDialog = false;\n      this._cleanupHook = client.on('afterSendEvent', event => {\n        if (!event.type && this._lastEventId && event.event_id === this._lastEventId) {\n          showReportDialog({ ...props.dialogOptions, eventId: this._lastEventId });\n        }\n      });\n    }\n  }\n\n   componentDidCatch(error, errorInfo) {\n    const { componentStack } = errorInfo;\n    // TODO(v9): Remove this check and type `componentStack` to be React.ErrorInfo['componentStack'].\n    const passedInComponentStack = componentStack == null ? undefined : componentStack;\n\n    const { beforeCapture, onError, showDialog, dialogOptions } = this.props;\n    withScope(scope => {\n      if (beforeCapture) {\n        beforeCapture(scope, error, passedInComponentStack);\n      }\n\n      const eventId = captureReactException(error, errorInfo, { mechanism: { handled: !!this.props.fallback } });\n\n      if (onError) {\n        onError(error, passedInComponentStack, eventId);\n      }\n      if (showDialog) {\n        this._lastEventId = eventId;\n        if (this._openFallbackReportDialog) {\n          showReportDialog({ ...dialogOptions, eventId });\n        }\n      }\n\n      // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n      this.setState({ error, componentStack, eventId });\n    });\n  }\n\n   componentDidMount() {\n    const { onMount } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n\n   componentWillUnmount() {\n    const { error, componentStack, eventId } = this.state;\n    const { onUnmount } = this.props;\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n\n    if (this._cleanupHook) {\n      this._cleanupHook();\n      this._cleanupHook = undefined;\n    }\n  }\n\n   __init() {this.resetErrorBoundary = () => {\n    const { onReset } = this.props;\n    const { error, componentStack, eventId } = this.state;\n    if (onReset) {\n      onReset(error, componentStack, eventId);\n    }\n    this.setState(INITIAL_STATE);\n  };}\n\n   render() {\n    const { fallback, children } = this.props;\n    const state = this.state;\n\n    if (state.error) {\n      let element = undefined;\n      if (typeof fallback === 'function') {\n        element = React.createElement(fallback, {\n          error: state.error,\n          componentStack: state.componentStack ,\n          resetError: this.resetErrorBoundary,\n          eventId: state.eventId ,\n        });\n      } else {\n        element = fallback;\n      }\n\n      if (React.isValidElement(element)) {\n        return element;\n      }\n\n      if (fallback) {\n        DEBUG_BUILD && logger.warn('fallback did not produce a valid ReactElement');\n      }\n\n      // Fail gracefully if no fallback provided or is not valid\n      return null;\n    }\n\n    if (typeof children === 'function') {\n      return (children )();\n    }\n    return children;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(\n  WrappedComponent,\n  errorBoundaryOptions,\n) {\n  const componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped = (props) => (\n    React.createElement(ErrorBoundary, { ...errorBoundaryOptions,}\n      , React.createElement(WrappedComponent, { ...props,} )\n    )\n  );\n\n  Wrapped.displayName = `errorBoundary(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\nexport { ErrorBoundary, UNKNOWN_COMPONENT, withErrorBoundary };\n//# sourceMappingURL=errorboundary.js.map\n","/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexport { DEBUG_BUILD };\n//# sourceMappingURL=debug-build.js.map\n","import { _optionalChain } from '@sentry/utils';\nimport { GLOBAL_OBJ } from '@sentry/utils';\n\n/**\n * Get the future flags from the Remix browser context\n *\n * @returns The future flags\n */\nfunction getFutureFlagsBrowser() {\n  const window = GLOBAL_OBJ ;\n\n  if (!window.__remixContext) {\n    return;\n  }\n\n  return window.__remixContext.future;\n}\n\n/**\n * Get the future flags from the Remix server build\n *\n * @param build The Remix server build\n *\n * @returns The future flags\n */\nfunction getFutureFlagsServer(build) {\n  return build.future;\n}\n\n/**\n * Learn Remix version from the server build object\n * V2 Server builds have a non-optional `mode` property\n *\n * @returns The major version number\n */\nfunction getRemixVersionFromBuild(build) {\n  if ('mode' in build) {\n    return 2;\n  }\n\n  return 1;\n}\n\n/**\n * Read Remix version from the Remix context on the browser\n *\n * @returns The major version number\n */\nfunction readRemixVersionFromLoader() {\n  const window = GLOBAL_OBJ ;\n\n  return _optionalChain([window, 'access', _ => _.__remixContext, 'optionalAccess', _2 => _2.state, 'optionalAccess', _3 => _3.loaderData, 'optionalAccess', _4 => _4.root, 'optionalAccess', _5 => _5.remixVersion]);\n}\n\nexport { getFutureFlagsBrowser, getFutureFlagsServer, getRemixVersionFromBuild, readRemixVersionFromLoader };\n//# sourceMappingURL=futureFlags.js.map\n","import { _optionalChain } from '@sentry/utils';\nimport { getCurrentScope, getActiveSpan, getRootSpan, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport { startBrowserTracingPageLoadSpan, withErrorBoundary, WINDOW, getClient, startBrowserTracingNavigationSpan } from '@sentry/react';\nimport { isNodeEnv, logger } from '@sentry/utils';\nimport * as React from 'react';\nimport { DEBUG_BUILD } from '../utils/debug-build.js';\nimport { readRemixVersionFromLoader, getFutureFlagsBrowser } from '../utils/futureFlags.js';\n\nlet _useEffect;\nlet _useLocation;\nlet _useMatches;\n\nlet _instrumentNavigation;\n\nfunction getInitPathName() {\n  if (WINDOW && WINDOW.location) {\n    return WINDOW.location.pathname;\n  }\n\n  return undefined;\n}\n\nfunction isRemixV2(remixVersion) {\n  return remixVersion === 2 || _optionalChain([getFutureFlagsBrowser, 'call', _ => _(), 'optionalAccess', _2 => _2.v2_errorBoundary]) || false;\n}\n\nfunction startPageloadSpan(client) {\n  const initPathName = getInitPathName();\n\n  if (!initPathName) {\n    return;\n  }\n\n  const spanContext = {\n    name: initPathName,\n    op: 'pageload',\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.remix',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n    },\n  };\n\n  startBrowserTracingPageLoadSpan(client, spanContext);\n}\n\nfunction startNavigationSpan(matches) {\n  const lastMatch = matches[matches.length - 1];\n\n  const client = getClient();\n\n  if (!client || !lastMatch) {\n    return;\n  }\n\n  const spanContext = {\n    name: lastMatch.id,\n    op: 'navigation',\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.remix',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',\n    },\n  };\n\n  startBrowserTracingNavigationSpan(client, spanContext);\n}\n\n/**\n * Wraps a remix `root` (see: https://remix.run/docs/en/v1/guides/migrating-react-router-app#creating-the-root-route)\n * To enable pageload/navigation tracing on every route.\n * Also wraps the application with `ErrorBoundary`.\n *\n * @param OrigApp The Remix root to wrap\n * @param options The options for ErrorBoundary wrapper.\n */\nfunction withSentry(\n  OrigApp,\n  options\n\n = {\n    // We don't want to wrap application with Sentry's ErrorBoundary by default for Remix v2\n    wrapWithErrorBoundary: true,\n    errorBoundaryOptions: {},\n  },\n) {\n  const SentryRoot = (props) => {\n    // Early return when any of the required functions is not available.\n    if (!_useEffect || !_useLocation || !_useMatches) {\n      DEBUG_BUILD &&\n        !isNodeEnv() &&\n        logger.warn('Remix SDK was unable to wrap your root because of one or more missing parameters.');\n\n      // @ts-expect-error Setting more specific React Component typing for `R` generic above\n      // will break advanced type inference done by react router params\n      return React.createElement(OrigApp, { ...props,} );\n    }\n\n    let isBaseLocation = false;\n\n    const location = _useLocation();\n    const matches = _useMatches();\n\n    _useEffect(() => {\n      const lastMatch = matches && matches[matches.length - 1];\n      if (lastMatch) {\n        const routeName = lastMatch.id;\n        getCurrentScope().setTransactionName(routeName);\n\n        const activeRootSpan = getActiveSpan();\n        if (activeRootSpan) {\n          const transaction = getRootSpan(activeRootSpan);\n\n          if (transaction) {\n            transaction.updateName(routeName);\n            transaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n          }\n        }\n      }\n\n      isBaseLocation = true;\n    }, []);\n\n    _useEffect(() => {\n      const activeRootSpan = getActiveSpan();\n\n      if (isBaseLocation) {\n        if (activeRootSpan) {\n          activeRootSpan.end();\n        }\n\n        return;\n      }\n\n      if (_instrumentNavigation && matches && matches.length) {\n        if (activeRootSpan) {\n          activeRootSpan.end();\n        }\n\n        startNavigationSpan(matches);\n      }\n    }, [location]);\n\n    isBaseLocation = false;\n\n    if (!isRemixV2(readRemixVersionFromLoader()) && options.wrapWithErrorBoundary) {\n      // @ts-expect-error Setting more specific React Component typing for `R` generic above\n      // will break advanced type inference done by react router params\n      return withErrorBoundary(OrigApp, options.errorBoundaryOptions)(props);\n    }\n    // @ts-expect-error Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params\n    return React.createElement(OrigApp, { ...props,} );\n  };\n\n  // @ts-expect-error Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params\n  return SentryRoot;\n}\n\nfunction setGlobals({\n  useEffect,\n  useLocation,\n  useMatches,\n  instrumentNavigation,\n}\n\n) {\n  _useEffect = useEffect;\n  _useLocation = useLocation;\n  _useMatches = useMatches;\n  _instrumentNavigation = instrumentNavigation;\n}\n\nexport { setGlobals, startPageloadSpan, withSentry };\n//# sourceMappingURL=performance.js.map\n"],"names":["applyAggregateErrorsToEvent","exceptionFromErrorImplementation","parser","maxValueLimit","key","limit","event","hint","isInstanceOf","originalException","truncateAggregateExceptions","aggregateExceptionsFromError","error","prevExceptions","exception","exceptionId","newExceptions","applyExceptionGroupFieldsForParentException","newException","newExceptionId","applyExceptionGroupFieldsForChildException","childError","i","source","parentId","exceptions","maxValueLength","truncate","DSN_REGEX","isValidProtocol","protocol","dsnToString","dsn","withPassword","host","path","pass","port","projectId","publicKey","dsnFromString","str","match","consoleSandbox","lastPath","split","projectMatch","dsnFromComponents","components","validateDsn","DEBUG_BUILD","component","logger","makeDsn","from","SentryError","message","logLevel","handlers","instrumented","addHandler","type","handler","maybeInstrument","instrumentFn","triggerHandlers","data","typeHandlers","e","getFunctionName","addConsoleInstrumentationHandler","instrumentConsole","GLOBAL_OBJ","CONSOLE_LEVELS","level","fill","originalConsoleMethod","originalConsoleMethods","args","log","WINDOW","supportsFetch","isNativeFunction","func","supportsNativeFetch","result","doc","sandbox","err","addFetchInstrumentationHandler","instrumentFetch","originalFetch","method","url","parseFetchArgs","handlerData","timestampInSeconds","virtualStackTrace","response","finishedHandlerData","erroredHandlerData","isError","addNonEnumerableProperty","hasProp","obj","prop","getUrlFromResource","resource","fetchArgs","options","arg","_oldOnErrorHandler","addGlobalErrorInstrumentationHandler","instrumentError","msg","line","column","_oldOnUnhandledRejectionHandler","addGlobalUnhandledRejectionInstrumentationHandler","instrumentUnhandledRejection","makePromiseBuffer","buffer","isReady","remove","task","add","taskProducer","rejectedSyncPromise","drain","timeout","SyncPromise","resolve","reject","counter","capturedSetTimeout","item","resolvedSyncPromise","parseUrl","query","fragment","validSeverityLevels","severityLevelFromString","createEnvelope","headers","items","addItemToEnvelope","envelope","newItem","forEachEnvelopeItem","callback","envelopeItems","envelopeItem","envelopeItemType","encodeUTF8","input","serializeEnvelope","envHeaders","parts","append","next","itemHeaders","payload","stringifiedPayload","normalize","concatBuffers","buffers","totalLength","acc","buf","merged","offset","createSpanEnvelopeItem","spanJson","createAttachmentEnvelopeItem","attachment","dropUndefinedKeys","ITEM_TYPE_TO_DATA_CATEGORY_MAP","envelopeItemTypeToDataCategory","getSdkMetadataForEnvelopeHeader","metadataOrEvent","name","version","createEventEnvelopeHeaders","sdkInfo","tunnel","dynamicSamplingContext","createClientReportEnvelope","discarded_events","timestamp","clientReportItem","dateTimestampInSeconds","DEFAULT_RETRY_AFTER","parseRetryAfterHeader","header","now","headerDelay","headerDate","disabledUntil","limits","dataCategory","isRateLimited","updateRateLimits","statusCode","updatedRateLimits","rateLimitHeader","retryAfterHeader","retryAfter","categories","namespaces","delay","category","_optionalChain","ops","lastAccessLHS","value","op","fn","supportsHistory","chromeVar","isChromePackagedApp","hasHistoryApi","errorsInstrumented","registerSpanErrorInstrumentation","errorCallback","activeSpan","getActiveSpan","rootSpan","getRootSpan","SPAN_STATUS_ERROR","SCOPE_ON_START_SPAN_FIELD","ISOLATION_SCOPE_ON_START_SPAN_FIELD","setCapturedScopesOnSpan","span","scope","isolationScope","getCapturedScopesOnSpan","hasTracingEnabled","maybeOptions","getClientOptions","client","getClient","SentryNonRecordingSpan","spanContext","uuid4","TRACE_FLAG_NONE","_timestamp","_key","_value","_values","_status","_name","_attributesOrStartTime","_startTime","logSpanStart","description","parentSpanId","spanToJSON","spanId","sampled","spanIsSampled","isRootSpan","infoParts","logSpanEnd","parseSampleRate","sampleRate","rate","sampleSpan","samplingContext","parsedSampleRate","enhanceEventWithSdkInfo","createSessionEnvelope","session","metadata","envelopeHeaders","createEventEnvelope","eventType","createSpanEnvelope","spans","dscHasRequiredProps","dsc","getDynamicSamplingContextFromSpan","beforeSendSpan","convertToSpanJSON","setMeasurement","unit","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","timedEventsToMeasurements","events","measurements","attributes","MAX_SPAN_COUNT","SentrySpan","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","traceId","TRACE_FLAG_SAMPLED","timeInput","spanTimeInputToSeconds","endTimestamp","getStatusMessage","getMetricSummaryJsonForSpan","SEMANTIC_ATTRIBUTE_PROFILE_ID","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","attributesOrStartTime","startTime","time","isSpanTimeInput","sendSpanEnvelope","transactionEvent","getCurrentScope","isFullFinishedSpan","capturedSpanScope","capturedSpanIsolationScope","getSpanDescendants","isStandaloneSpan","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","transaction","spanToTransactionTraceContext","a","b","spanItems","transport","reason","SUPPRESS_TRACING_KEY","startInactiveSpan","acs","getAcs","spanArguments","parseSentrySpanArguments","forceTransaction","customParentSpan","withScope","withActiveSpan","parentSpan","getParentSpan","createChildOrRootSpan","_setSpanForScope","getIsolationScope","_startChildSpan","addChildSpanToSpan","parentSampled","_startRootSpan","freezeDscOnSpan","initialCtx","ctx","carrier","getMainCarrier","getAsyncContextStrategy","SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE","childSpan","_getSpanForScope","TRACING_DEFAULTS","FINISH_REASON_HEARTBEAT_FAILED","FINISH_REASON_IDLE_TIMEOUT","FINISH_REASON_FINAL_TIMEOUT","FINISH_REASON_EXTERNAL_FINISH","startIdleSpan","startSpanOptions","activities","_finished","_idleTimeoutID","_finishReason","_autoFinishAllowed","_cleanupHooks","idleTimeout","finalTimeout","childSpanTimeout","beforeSpanEnd","previousActiveSpan","_startIdleSpan","target","thisArg","definedEndTimestamp","rest","spanEndTimestamp","child","onIdleSpanEnded","childEndTimestamps","latestSpanEndTimestamp","spanStartTimestamp","_cancelIdleTimeout","_restartIdleTimeout","_restartChildSpanTimeout","_pushActivity","_popActivity","cleanup","spanJSON","startTimestamp","SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON","childSpans","discardedSpans","childSpanJSON","childEndTimestamp","childStartTimestamp","spanStartedBeforeIdleSpanEnd","timeoutWithMarginOfError","spanEndedBeforeFinalTimeout","stringifiedSpan","removeChildSpanFromSpan","startedSpan","endedSpan","spanToAllowAutoFinish","SENTRY_API_VERSION","getBaseApiEndpoint","_getIngestEndpoint","_encodedAuth","urlEncode","getEnvelopeEndpointWithUrlEncodedAuth","getReportDialogEndpoint","dsnLike","dialogOptions","endpoint","encodedOptions","user","installedIntegrations","filterDuplicates","integrations","integrationsByName","currentInstance","existingInstance","getIntegrationsToSetup","defaultIntegrations","userIntegrations","integration","arrayify","finalIntegrations","debugIndex","debugInstance","setupIntegrations","integrationIndex","setupIntegration","afterSetupIntegrations","processor","defineIntegration","ALREADY_SEEN_ERROR","BaseClient","eventId","checkOrSetAlreadyCaught","hintWithEventId","currentScope","eventMessage","isParameterizedString","promisedEvent","isPrimitive","updateSession","clientFinished","transportFlushed","eventProcessor","integrationName","isAlreadyInstalled","env","promise","sendResponse","_event","hook","hooks","cbIndex","callbacks","crashed","errored","ex","mechanism","sessionNonTerminal","ticked","tick","interval","prepareEvent","evt","propagationContext","trace_id","getDynamicSamplingContextFromClient","finalEvent","sentryError","isTransaction","isTransactionEvent","isErrorEvent","beforeSendLabel","prepared","processBeforeSend","_validateBeforeSendResult","processedEvent","spanCount","transactionInfo","outcomes","quantity","beforeSendResult","invalidValueError","isThenable","isPlainObject","beforeSend","beforeSendTransaction","processedSpans","processedSpan","initAndBind","clientClass","setCurrentClient","DEFAULT_TRANSPORT_BUFFER_SIZE","createTransport","makeRequest","rateLimits","flush","send","filteredEnvelopeItems","getEventForEnvelopeItem","filteredEnvelope","recordEnvelopeLoss","requestTask","applySdkMetadata","names","SDK_VERSION","DEFAULT_BREADCRUMBS","addBreadcrumb","breadcrumb","beforeBreadcrumb","maxBreadcrumbs","mergedBreadcrumb","finalBreadcrumb","originalFunctionToString","INTEGRATION_NAME","SETUP_CLIENTS","_functionToStringIntegration","originalFunction","getOriginalFunction","context","functionToStringIntegration","DEFAULT_IGNORE_ERRORS","_inboundFiltersIntegration","_hint","clientOptions","mergedOptions","_mergeOptions","_shouldDropEvent","inboundFiltersIntegration","internalOptions","_isSentryError","getEventDescription","_isIgnoredError","_isUselessError","_isIgnoredTransaction","_isDeniedUrl","_getEventFilterUrl","_isAllowedUrl","ignoreErrors","_getPossibleEventMessages","stringMatchesSomePattern","ignoreTransactions","denyUrls","allowUrls","possibleMessages","lastException","_getLastValidUrl","frames","frame","_dedupeIntegration","previousEvent","currentEvent","dedupeIntegration","_isSameMessageEvent","_isSameExceptionEvent","currentMessage","previousMessage","_isSameFingerprint","_isSameStacktrace","previousException","_getExceptionFromEvent","currentException","currentFrames","getFramesFromEvent","previousFrames","frameA","frameB","currentFingerprint","previousFingerprint","instrumentFetchRequest","shouldCreateSpan","shouldAttachHeaders","spanOrigin","shouldCreateSpanResult","endSpan","fullUrl","getFullURL","hasParent","request","addTracingHeadersToFetchRequest","sentryTraceHeader","spanToTraceHeader","generateSentryTraceHeader","sentryBaggageHeader","dynamicSamplingContextToSentryBaggageHeader","newHeaders","BAGGAGE_HEADER_NAME","existingBaggageHeader","newBaggageHeaders","setHttpStatus","contentLength","contentLengthNum","ignoreOnError","shouldIgnoreOnError","ignoreNextOnError","wrap","before","wrapper","sentryWrapped","wrappedArguments","addExceptionTypeValue","addExceptionMechanism","captureException","property","markFunctionWrapped","exceptionFromError","stackParser","parseStackFrames","extractMessage","eventFromPlainObject","syntheticException","isUnhandledRejection","normalizeDepth","errorFromProp","getErrorPropertyFromObject","extra","normalizeToSize","isEvent","getNonErrorObjectExceptionValue","eventFromError","stacktrace","skipLines","getSkipFirstStackStringLines","framesToPop","getPopFirstTopFrames","reactMinifiedRegexp","eventFromException","attachStacktrace","eventFromUnknownInput","eventFromMessage","eventFromString","isDOMError","isDOMException","domException","__sentry_template_string__","__sentry_template_values__","keys","extractExceptionKeysForMessage","captureType","getObjectClassName","prototype","createUserFeedbackEnvelope","feedback","createUserFeedbackEnvelopeItem","BrowserClient","opts","sdkSource","getSDKSource","getRating","thresholds","bindReporter","metric","reportAllChanges","prevValue","delta","forceReport","generateUniqueID","getNavigationEntry","getActivationStart","navEntry","initMetric","navigationType","observe","po","list","onHidden","cb","onHiddenOrPageHide","runOnce","called","firstHiddenTime","initHiddenTime","onVisibilityUpdate","addChangeListeners","getVisibilityWatcher","whenActivated","FCPThresholds","onFCP","onReport","visibilityWatcher","report","entries","entry","CLSThresholds","onCLS","sessionValue","sessionEntries","handleEntries","firstSessionEntry","lastSessionEntry","FIDThresholds","onFID","handleEntry","interactionCountEstimate","minKnownInteractionId","maxKnownInteractionId","updateEstimate","getInteractionCount","initInteractionCountPolyfill","INPThresholds","prevInteractionCount","getInteractionCountForNavigation","MAX_INTERACTIONS_TO_CONSIDER","longestInteractionList","longestInteractionMap","processEntry","minLongestInteraction","existingInteraction","interaction","estimateP98LongestInteraction","candidateInteractionIndex","onINP","prevEntry","inp","LCPThresholds","reportedMetricIDs","onLCP","lastEntry","stopListening","TTFBThresholds","whenReady","onTTFB","responseStart","_previousCls","_previousFid","_previousLcp","_previousTtfb","_previousInp","addClsInstrumentationHandler","stopOnCallback","addMetricObserver","instrumentCls","addLcpInstrumentationHandler","instrumentLcp","addFidInstrumentationHandler","instrumentFid","addTtfbInstrumentationHandler","instrumentTtfb","addInpInstrumentationHandler","instrumentInp","addPerformanceInstrumentationHandler","instrumentPerformanceObserver","getCleanupCallback","previousValue","index","isPerformanceEventTiming","isMeasurementValue","startAndEndSpan","startTimeInSeconds","endTime","parentStartTime","getBrowserPerformanceAPI","msToSec","MAX_INT_AS_BYTES","_performanceCursor","_measurements","_lcpEntry","_clsEntry","startTrackingWebVitals","performance","browserPerformanceTimeOrigin","fidCallback","_trackFID","clsCallback","_trackCLS","lcpCallback","_trackLCP","ttfbCallback","_trackTtfb","startTrackingLongTasks","duration","startTrackingLongAnimationFrames","initialScript","invoker","invokerType","sourceURL","sourceFunctionName","sourceCharPosition","startTrackingInteractions","spanOptions","htmlTreeAsString","componentName","getComponentName","timeOrigin","addPerformanceEntries","performanceEntries","transactionStartTime","_addNavigationSpans","_addMeasureSpans","firstHidden","shouldRecord","_addResourceSpans","_trackNavigator","_addTtfbRequestTimeToMeasurements","measurement","oldValue","measurementTimestamp","normalizedValue","fidMark","measurementName","_tagMetricInfo","requestTime","measureStartTimestamp","startTimeStamp","measureEndTimestamp","_addPerformanceNavigationTiming","_addRequest","eventEnd","end","start","requestStartTimestamp","responseEndTimestamp","responseStartTimestamp","resourceUrl","parsedUrl","setResourceEntrySizeData","navigator","connection","dataKey","entryVal","requestStart","DEBOUNCE_DURATION","debounceTimerID","lastCapturedEventType","lastCapturedEventTargetId","addClickKeypressInstrumentationHandler","instrumentDOM","triggerDOMHandler","globalDOMEventHandler","makeDOMEventHandler","proto","originalAddEventListener","listener","el","handlerForType","originalRemoveEventListener","isSimilarToLastCapturedEvent","shouldSkipDOMEvent","globalListener","getEventTarget","lastHref","addHistoryInstrumentationHandler","instrumentHistory","oldOnPopState","to","historyReplacementFunction","originalHistoryFunction","cachedImplementations","getNativeImplementation","cached","impl","document","contentWindow","clearCachedImplementation","setTimeout","SENTRY_XHR_DATA_KEY","addXhrInstrumentationHandler","instrumentXHR","xhrproto","originalOpen","isString","onreadystatechangeHandler","xhrInfo","original","readyStateArgs","setRequestHeaderArgs","originalSend","sentryXhrData","LAST_INTERACTIONS","INTERACTIONS_SPAN_MAP","startTrackingINP","inpCallback","_trackINP","INP_ENTRY_MAP","interactionId","interactionType","spanToUse","routeName","replay","replayId","userDisplay","profileId","registerInpInteractionListener","_latestRoute","activeRootSpan","last","makeFetchTransport","nativeFetch","pendingBodySize","pendingCount","requestSize","requestOptions","CHROME_PRIORITY","GECKO_PRIORITY","createFrame","filename","lineno","colno","UNKNOWN_FUNCTION","chromeRegexNoFnName","chromeRegex","chromeEvalRegex","chromeStackParserFn","noFnParts","col","subMatch","extractSafariExtensionDetails","chromeStackLineParser","geckoREgex","geckoEvalRegex","gecko","geckoStackLineParser","defaultStackLineParsers","defaultStackParser","createStackParser","isSafariExtension","isSafariWebExtension","MAX_ALLOWED_STRING_LENGTH","_breadcrumbsIntegration","_options","_getConsoleBreadcrumbHandler","_getDomBreadcrumbHandler","_getXhrBreadcrumbHandler","_getFetchBreadcrumbHandler","_getHistoryBreadcrumbHandler","_getSentryBreadcrumbHandler","breadcrumbsIntegration","dom","keyAttrs","maxStringLength","element","_isEvent","safeJoin","status_code","body","parsedLoc","parsedFrom","parsedTo","DEFAULT_EVENT_TARGET","_browserApiErrorsIntegration","_wrapTimeFunction","_wrapRAF","_wrapXHR","eventTargetOption","_wrapEventTarget","browserApiErrorsIntegration","originalCallback","xhr","wrapOptions","globalObject","eventName","wrappedEventHandler","originalEventHandler","_globalHandlersIntegration","_installGlobalOnErrorHandler","globalHandlerLog","_installGlobalOnUnhandledRejectionHandler","globalHandlersIntegration","getOptions","_enhanceEventWithInitialFrame","captureEvent","_getUnhandledRejectionError","_eventFromRejectionWithPrimitive","ev","ev0","ev0s","ev0sf","getLocationHref","httpContextIntegration","referrer","userAgent","DEFAULT_KEY","DEFAULT_LIMIT","_linkedErrorsIntegration","linkedErrorsIntegration","getDefaultIntegrations","applyDefaultOptions","optionsArg","shouldShowBrowserExtensionError","windowWithMaybeExtension","extensionKey","extensionObject","runtimeId","href","extensionProtocols","isDedicatedExtensionPage","isNWjs","init","browserOptions","stackParserFromStackParserOptions","startSessionTracking","showReportDialog","lastEventId","script","onClose","reportDialogClosedMessageHandler","injectionPoint","startSession","captureSession","defaultRequestInstrumentationOptions","instrumentOutgoingRequests","traceFetch","traceXHR","shouldCreateSpanForRequest","enableHTTPTimings","tracePropagationTargets","_","shouldAttachHeadersWithTargets","createdSpan","addHTTPTimings","xhrCallback","isPerformanceResourceTiming","resourceTimingEntryToSpanData","extractNetworkProtocol","nextHopProtocol","char","getAbsoluteTime","resourceTiming","timingSpanData","targetUrl","resolvedUrl","currentOrigin","isSameOriginRequest","isRelativeSameOriginRequest","addTracingHeadersToXhrRequest","setHeaderOnXhr","registerBackgroundTabDetection","cancelledStatus","status","BROWSER_TRACING_INTEGRATION_ID","DEFAULT_BROWSER_TRACING_OPTIONS","browserTracingIntegration","enableInp","enableLongTask","enableLongAnimationFrame","enableInteractions","beforeStartSpan","markBackgroundSpan","instrumentPageLoad","instrumentNavigation","_collectWebVitals","latestRoute","_createRouteSpan","isPageloadTransaction","finalStartSpanOptions","idleSpan","emitFinish","startingUrl","traceOptions","sentryTrace","getMetaContent","baggage","propagationContextFromHeaders","oldPropagationContext","startBrowserTracingPageLoadSpan","startBrowserTracingNavigationSpan","registerInteractionListener","generatePropagationContext","metaName","metaTag","getDomElement","inflightInteractionSpan","registerInteractionTransaction","currentRootSpanOp","isAtLeastReact17","reactVersion","reactMajor","setCause","cause","seenErrors","recurse","captureReactException","componentStack","errorBoundaryError","UNKNOWN_COMPONENT","INITIAL_STATE","ErrorBoundary","React.Component","props","errorInfo","passedInComponentStack","beforeCapture","onError","showDialog","onMount","onUnmount","onReset","fallback","children","state","React.createElement","React.isValidElement","withErrorBoundary","WrappedComponent","errorBoundaryOptions","componentDisplayName","Wrapped","hoistNonReactStatics","getFutureFlagsBrowser","window","readRemixVersionFromLoader","_2","_3","_4","_5","_useEffect","_useLocation","_useMatches","_instrumentNavigation","getInitPathName","isRemixV2","remixVersion","startPageloadSpan","initPathName","startNavigationSpan","matches","lastMatch","withSentry","OrigApp","isNodeEnv","isBaseLocation","location","setGlobals","useEffect","useLocation","useMatches"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88]}